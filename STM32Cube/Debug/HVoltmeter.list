
HVoltmeter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009520  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b5c  080095e0  080095e0  000195e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a13c  0800a13c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a13c  0800a13c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a13c  0800a13c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a13c  0800a13c  0001a13c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a140  0800a140  0001a140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  200001e4  0800a328  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a0  0800a328  000204a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016c8e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002edc  00000000  00000000  00036e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  00039d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  0003afc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019508  00000000  00000000  0003c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151ae  00000000  00000000  000555c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b3a2  00000000  00000000  0006a76e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00105b10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005418  00000000  00000000  00105b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e4 	.word	0x200001e4
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080095c4 	.word	0x080095c4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e8 	.word	0x200001e8
 8000100:	080095c4 	.word	0x080095c4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	1c10      	adds	r0, r2, #0
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	1c19      	adds	r1, r3, #0
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f001 f87b 	bl	8001534 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ffc5 	bl	80013d8 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f001 f86d 	bl	8001534 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 f863 	bl	8001534 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ffe7 	bl	8001450 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ffdd 	bl	8001450 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_fdiv>:
 80004a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a6:	464f      	mov	r7, r9
 80004a8:	4646      	mov	r6, r8
 80004aa:	46d6      	mov	lr, sl
 80004ac:	0245      	lsls	r5, r0, #9
 80004ae:	b5c0      	push	{r6, r7, lr}
 80004b0:	0047      	lsls	r7, r0, #1
 80004b2:	1c0c      	adds	r4, r1, #0
 80004b4:	0a6d      	lsrs	r5, r5, #9
 80004b6:	0e3f      	lsrs	r7, r7, #24
 80004b8:	0fc6      	lsrs	r6, r0, #31
 80004ba:	2f00      	cmp	r7, #0
 80004bc:	d066      	beq.n	800058c <__aeabi_fdiv+0xe8>
 80004be:	2fff      	cmp	r7, #255	; 0xff
 80004c0:	d06c      	beq.n	800059c <__aeabi_fdiv+0xf8>
 80004c2:	2300      	movs	r3, #0
 80004c4:	00ea      	lsls	r2, r5, #3
 80004c6:	2580      	movs	r5, #128	; 0x80
 80004c8:	4699      	mov	r9, r3
 80004ca:	469a      	mov	sl, r3
 80004cc:	04ed      	lsls	r5, r5, #19
 80004ce:	4315      	orrs	r5, r2
 80004d0:	3f7f      	subs	r7, #127	; 0x7f
 80004d2:	0260      	lsls	r0, r4, #9
 80004d4:	0061      	lsls	r1, r4, #1
 80004d6:	0a43      	lsrs	r3, r0, #9
 80004d8:	4698      	mov	r8, r3
 80004da:	0e09      	lsrs	r1, r1, #24
 80004dc:	0fe4      	lsrs	r4, r4, #31
 80004de:	2900      	cmp	r1, #0
 80004e0:	d048      	beq.n	8000574 <__aeabi_fdiv+0xd0>
 80004e2:	29ff      	cmp	r1, #255	; 0xff
 80004e4:	d010      	beq.n	8000508 <__aeabi_fdiv+0x64>
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	00d8      	lsls	r0, r3, #3
 80004ea:	04d2      	lsls	r2, r2, #19
 80004ec:	4302      	orrs	r2, r0
 80004ee:	4690      	mov	r8, r2
 80004f0:	2000      	movs	r0, #0
 80004f2:	397f      	subs	r1, #127	; 0x7f
 80004f4:	464a      	mov	r2, r9
 80004f6:	0033      	movs	r3, r6
 80004f8:	1a7f      	subs	r7, r7, r1
 80004fa:	4302      	orrs	r2, r0
 80004fc:	496c      	ldr	r1, [pc, #432]	; (80006b0 <__aeabi_fdiv+0x20c>)
 80004fe:	0092      	lsls	r2, r2, #2
 8000500:	588a      	ldr	r2, [r1, r2]
 8000502:	4063      	eors	r3, r4
 8000504:	b2db      	uxtb	r3, r3
 8000506:	4697      	mov	pc, r2
 8000508:	2b00      	cmp	r3, #0
 800050a:	d16d      	bne.n	80005e8 <__aeabi_fdiv+0x144>
 800050c:	2002      	movs	r0, #2
 800050e:	3fff      	subs	r7, #255	; 0xff
 8000510:	e033      	b.n	800057a <__aeabi_fdiv+0xd6>
 8000512:	2300      	movs	r3, #0
 8000514:	4698      	mov	r8, r3
 8000516:	0026      	movs	r6, r4
 8000518:	4645      	mov	r5, r8
 800051a:	4682      	mov	sl, r0
 800051c:	4653      	mov	r3, sl
 800051e:	2b02      	cmp	r3, #2
 8000520:	d100      	bne.n	8000524 <__aeabi_fdiv+0x80>
 8000522:	e07f      	b.n	8000624 <__aeabi_fdiv+0x180>
 8000524:	2b03      	cmp	r3, #3
 8000526:	d100      	bne.n	800052a <__aeabi_fdiv+0x86>
 8000528:	e094      	b.n	8000654 <__aeabi_fdiv+0x1b0>
 800052a:	2b01      	cmp	r3, #1
 800052c:	d017      	beq.n	800055e <__aeabi_fdiv+0xba>
 800052e:	0038      	movs	r0, r7
 8000530:	307f      	adds	r0, #127	; 0x7f
 8000532:	2800      	cmp	r0, #0
 8000534:	dd5f      	ble.n	80005f6 <__aeabi_fdiv+0x152>
 8000536:	076b      	lsls	r3, r5, #29
 8000538:	d004      	beq.n	8000544 <__aeabi_fdiv+0xa0>
 800053a:	230f      	movs	r3, #15
 800053c:	402b      	ands	r3, r5
 800053e:	2b04      	cmp	r3, #4
 8000540:	d000      	beq.n	8000544 <__aeabi_fdiv+0xa0>
 8000542:	3504      	adds	r5, #4
 8000544:	012b      	lsls	r3, r5, #4
 8000546:	d503      	bpl.n	8000550 <__aeabi_fdiv+0xac>
 8000548:	0038      	movs	r0, r7
 800054a:	4b5a      	ldr	r3, [pc, #360]	; (80006b4 <__aeabi_fdiv+0x210>)
 800054c:	3080      	adds	r0, #128	; 0x80
 800054e:	401d      	ands	r5, r3
 8000550:	28fe      	cmp	r0, #254	; 0xfe
 8000552:	dc67      	bgt.n	8000624 <__aeabi_fdiv+0x180>
 8000554:	01ad      	lsls	r5, r5, #6
 8000556:	0a6d      	lsrs	r5, r5, #9
 8000558:	b2c0      	uxtb	r0, r0
 800055a:	e002      	b.n	8000562 <__aeabi_fdiv+0xbe>
 800055c:	001e      	movs	r6, r3
 800055e:	2000      	movs	r0, #0
 8000560:	2500      	movs	r5, #0
 8000562:	05c0      	lsls	r0, r0, #23
 8000564:	4328      	orrs	r0, r5
 8000566:	07f6      	lsls	r6, r6, #31
 8000568:	4330      	orrs	r0, r6
 800056a:	bce0      	pop	{r5, r6, r7}
 800056c:	46ba      	mov	sl, r7
 800056e:	46b1      	mov	r9, r6
 8000570:	46a8      	mov	r8, r5
 8000572:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000574:	2b00      	cmp	r3, #0
 8000576:	d12b      	bne.n	80005d0 <__aeabi_fdiv+0x12c>
 8000578:	2001      	movs	r0, #1
 800057a:	464a      	mov	r2, r9
 800057c:	0033      	movs	r3, r6
 800057e:	494e      	ldr	r1, [pc, #312]	; (80006b8 <__aeabi_fdiv+0x214>)
 8000580:	4302      	orrs	r2, r0
 8000582:	0092      	lsls	r2, r2, #2
 8000584:	588a      	ldr	r2, [r1, r2]
 8000586:	4063      	eors	r3, r4
 8000588:	b2db      	uxtb	r3, r3
 800058a:	4697      	mov	pc, r2
 800058c:	2d00      	cmp	r5, #0
 800058e:	d113      	bne.n	80005b8 <__aeabi_fdiv+0x114>
 8000590:	2304      	movs	r3, #4
 8000592:	4699      	mov	r9, r3
 8000594:	3b03      	subs	r3, #3
 8000596:	2700      	movs	r7, #0
 8000598:	469a      	mov	sl, r3
 800059a:	e79a      	b.n	80004d2 <__aeabi_fdiv+0x2e>
 800059c:	2d00      	cmp	r5, #0
 800059e:	d105      	bne.n	80005ac <__aeabi_fdiv+0x108>
 80005a0:	2308      	movs	r3, #8
 80005a2:	4699      	mov	r9, r3
 80005a4:	3b06      	subs	r3, #6
 80005a6:	27ff      	movs	r7, #255	; 0xff
 80005a8:	469a      	mov	sl, r3
 80005aa:	e792      	b.n	80004d2 <__aeabi_fdiv+0x2e>
 80005ac:	230c      	movs	r3, #12
 80005ae:	4699      	mov	r9, r3
 80005b0:	3b09      	subs	r3, #9
 80005b2:	27ff      	movs	r7, #255	; 0xff
 80005b4:	469a      	mov	sl, r3
 80005b6:	e78c      	b.n	80004d2 <__aeabi_fdiv+0x2e>
 80005b8:	0028      	movs	r0, r5
 80005ba:	f001 ffa3 	bl	8002504 <__clzsi2>
 80005be:	2776      	movs	r7, #118	; 0x76
 80005c0:	1f43      	subs	r3, r0, #5
 80005c2:	409d      	lsls	r5, r3
 80005c4:	2300      	movs	r3, #0
 80005c6:	427f      	negs	r7, r7
 80005c8:	4699      	mov	r9, r3
 80005ca:	469a      	mov	sl, r3
 80005cc:	1a3f      	subs	r7, r7, r0
 80005ce:	e780      	b.n	80004d2 <__aeabi_fdiv+0x2e>
 80005d0:	0018      	movs	r0, r3
 80005d2:	f001 ff97 	bl	8002504 <__clzsi2>
 80005d6:	4642      	mov	r2, r8
 80005d8:	1f43      	subs	r3, r0, #5
 80005da:	2176      	movs	r1, #118	; 0x76
 80005dc:	409a      	lsls	r2, r3
 80005de:	4249      	negs	r1, r1
 80005e0:	1a09      	subs	r1, r1, r0
 80005e2:	4690      	mov	r8, r2
 80005e4:	2000      	movs	r0, #0
 80005e6:	e785      	b.n	80004f4 <__aeabi_fdiv+0x50>
 80005e8:	21ff      	movs	r1, #255	; 0xff
 80005ea:	2003      	movs	r0, #3
 80005ec:	e782      	b.n	80004f4 <__aeabi_fdiv+0x50>
 80005ee:	001e      	movs	r6, r3
 80005f0:	20ff      	movs	r0, #255	; 0xff
 80005f2:	2500      	movs	r5, #0
 80005f4:	e7b5      	b.n	8000562 <__aeabi_fdiv+0xbe>
 80005f6:	2301      	movs	r3, #1
 80005f8:	1a1b      	subs	r3, r3, r0
 80005fa:	2b1b      	cmp	r3, #27
 80005fc:	dcaf      	bgt.n	800055e <__aeabi_fdiv+0xba>
 80005fe:	379e      	adds	r7, #158	; 0x9e
 8000600:	0029      	movs	r1, r5
 8000602:	40bd      	lsls	r5, r7
 8000604:	40d9      	lsrs	r1, r3
 8000606:	1e6a      	subs	r2, r5, #1
 8000608:	4195      	sbcs	r5, r2
 800060a:	430d      	orrs	r5, r1
 800060c:	076b      	lsls	r3, r5, #29
 800060e:	d004      	beq.n	800061a <__aeabi_fdiv+0x176>
 8000610:	230f      	movs	r3, #15
 8000612:	402b      	ands	r3, r5
 8000614:	2b04      	cmp	r3, #4
 8000616:	d000      	beq.n	800061a <__aeabi_fdiv+0x176>
 8000618:	3504      	adds	r5, #4
 800061a:	016b      	lsls	r3, r5, #5
 800061c:	d544      	bpl.n	80006a8 <__aeabi_fdiv+0x204>
 800061e:	2001      	movs	r0, #1
 8000620:	2500      	movs	r5, #0
 8000622:	e79e      	b.n	8000562 <__aeabi_fdiv+0xbe>
 8000624:	20ff      	movs	r0, #255	; 0xff
 8000626:	2500      	movs	r5, #0
 8000628:	e79b      	b.n	8000562 <__aeabi_fdiv+0xbe>
 800062a:	2580      	movs	r5, #128	; 0x80
 800062c:	2600      	movs	r6, #0
 800062e:	20ff      	movs	r0, #255	; 0xff
 8000630:	03ed      	lsls	r5, r5, #15
 8000632:	e796      	b.n	8000562 <__aeabi_fdiv+0xbe>
 8000634:	2300      	movs	r3, #0
 8000636:	4698      	mov	r8, r3
 8000638:	2080      	movs	r0, #128	; 0x80
 800063a:	03c0      	lsls	r0, r0, #15
 800063c:	4205      	tst	r5, r0
 800063e:	d009      	beq.n	8000654 <__aeabi_fdiv+0x1b0>
 8000640:	4643      	mov	r3, r8
 8000642:	4203      	tst	r3, r0
 8000644:	d106      	bne.n	8000654 <__aeabi_fdiv+0x1b0>
 8000646:	4645      	mov	r5, r8
 8000648:	4305      	orrs	r5, r0
 800064a:	026d      	lsls	r5, r5, #9
 800064c:	0026      	movs	r6, r4
 800064e:	20ff      	movs	r0, #255	; 0xff
 8000650:	0a6d      	lsrs	r5, r5, #9
 8000652:	e786      	b.n	8000562 <__aeabi_fdiv+0xbe>
 8000654:	2080      	movs	r0, #128	; 0x80
 8000656:	03c0      	lsls	r0, r0, #15
 8000658:	4305      	orrs	r5, r0
 800065a:	026d      	lsls	r5, r5, #9
 800065c:	20ff      	movs	r0, #255	; 0xff
 800065e:	0a6d      	lsrs	r5, r5, #9
 8000660:	e77f      	b.n	8000562 <__aeabi_fdiv+0xbe>
 8000662:	4641      	mov	r1, r8
 8000664:	016a      	lsls	r2, r5, #5
 8000666:	0148      	lsls	r0, r1, #5
 8000668:	4282      	cmp	r2, r0
 800066a:	d219      	bcs.n	80006a0 <__aeabi_fdiv+0x1fc>
 800066c:	211b      	movs	r1, #27
 800066e:	2500      	movs	r5, #0
 8000670:	3f01      	subs	r7, #1
 8000672:	2601      	movs	r6, #1
 8000674:	0014      	movs	r4, r2
 8000676:	006d      	lsls	r5, r5, #1
 8000678:	0052      	lsls	r2, r2, #1
 800067a:	2c00      	cmp	r4, #0
 800067c:	db01      	blt.n	8000682 <__aeabi_fdiv+0x1de>
 800067e:	4290      	cmp	r0, r2
 8000680:	d801      	bhi.n	8000686 <__aeabi_fdiv+0x1e2>
 8000682:	1a12      	subs	r2, r2, r0
 8000684:	4335      	orrs	r5, r6
 8000686:	3901      	subs	r1, #1
 8000688:	2900      	cmp	r1, #0
 800068a:	d1f3      	bne.n	8000674 <__aeabi_fdiv+0x1d0>
 800068c:	1e50      	subs	r0, r2, #1
 800068e:	4182      	sbcs	r2, r0
 8000690:	0038      	movs	r0, r7
 8000692:	307f      	adds	r0, #127	; 0x7f
 8000694:	001e      	movs	r6, r3
 8000696:	4315      	orrs	r5, r2
 8000698:	2800      	cmp	r0, #0
 800069a:	dd00      	ble.n	800069e <__aeabi_fdiv+0x1fa>
 800069c:	e74b      	b.n	8000536 <__aeabi_fdiv+0x92>
 800069e:	e7aa      	b.n	80005f6 <__aeabi_fdiv+0x152>
 80006a0:	211a      	movs	r1, #26
 80006a2:	2501      	movs	r5, #1
 80006a4:	1a12      	subs	r2, r2, r0
 80006a6:	e7e4      	b.n	8000672 <__aeabi_fdiv+0x1ce>
 80006a8:	01ad      	lsls	r5, r5, #6
 80006aa:	2000      	movs	r0, #0
 80006ac:	0a6d      	lsrs	r5, r5, #9
 80006ae:	e758      	b.n	8000562 <__aeabi_fdiv+0xbe>
 80006b0:	08009628 	.word	0x08009628
 80006b4:	f7ffffff 	.word	0xf7ffffff
 80006b8:	08009668 	.word	0x08009668

080006bc <__aeabi_ui2f>:
 80006bc:	b570      	push	{r4, r5, r6, lr}
 80006be:	1e05      	subs	r5, r0, #0
 80006c0:	d00e      	beq.n	80006e0 <__aeabi_ui2f+0x24>
 80006c2:	f001 ff1f 	bl	8002504 <__clzsi2>
 80006c6:	239e      	movs	r3, #158	; 0x9e
 80006c8:	0004      	movs	r4, r0
 80006ca:	1a1b      	subs	r3, r3, r0
 80006cc:	2b96      	cmp	r3, #150	; 0x96
 80006ce:	dc0c      	bgt.n	80006ea <__aeabi_ui2f+0x2e>
 80006d0:	2808      	cmp	r0, #8
 80006d2:	dd01      	ble.n	80006d8 <__aeabi_ui2f+0x1c>
 80006d4:	3c08      	subs	r4, #8
 80006d6:	40a5      	lsls	r5, r4
 80006d8:	026d      	lsls	r5, r5, #9
 80006da:	0a6d      	lsrs	r5, r5, #9
 80006dc:	b2d8      	uxtb	r0, r3
 80006de:	e001      	b.n	80006e4 <__aeabi_ui2f+0x28>
 80006e0:	2000      	movs	r0, #0
 80006e2:	2500      	movs	r5, #0
 80006e4:	05c0      	lsls	r0, r0, #23
 80006e6:	4328      	orrs	r0, r5
 80006e8:	bd70      	pop	{r4, r5, r6, pc}
 80006ea:	2b99      	cmp	r3, #153	; 0x99
 80006ec:	dd09      	ble.n	8000702 <__aeabi_ui2f+0x46>
 80006ee:	0002      	movs	r2, r0
 80006f0:	0029      	movs	r1, r5
 80006f2:	321b      	adds	r2, #27
 80006f4:	4091      	lsls	r1, r2
 80006f6:	1e4a      	subs	r2, r1, #1
 80006f8:	4191      	sbcs	r1, r2
 80006fa:	2205      	movs	r2, #5
 80006fc:	1a12      	subs	r2, r2, r0
 80006fe:	40d5      	lsrs	r5, r2
 8000700:	430d      	orrs	r5, r1
 8000702:	2c05      	cmp	r4, #5
 8000704:	dd01      	ble.n	800070a <__aeabi_ui2f+0x4e>
 8000706:	1f62      	subs	r2, r4, #5
 8000708:	4095      	lsls	r5, r2
 800070a:	0029      	movs	r1, r5
 800070c:	4e08      	ldr	r6, [pc, #32]	; (8000730 <__aeabi_ui2f+0x74>)
 800070e:	4031      	ands	r1, r6
 8000710:	076a      	lsls	r2, r5, #29
 8000712:	d009      	beq.n	8000728 <__aeabi_ui2f+0x6c>
 8000714:	200f      	movs	r0, #15
 8000716:	4028      	ands	r0, r5
 8000718:	2804      	cmp	r0, #4
 800071a:	d005      	beq.n	8000728 <__aeabi_ui2f+0x6c>
 800071c:	3104      	adds	r1, #4
 800071e:	014a      	lsls	r2, r1, #5
 8000720:	d502      	bpl.n	8000728 <__aeabi_ui2f+0x6c>
 8000722:	239f      	movs	r3, #159	; 0x9f
 8000724:	4031      	ands	r1, r6
 8000726:	1b1b      	subs	r3, r3, r4
 8000728:	0189      	lsls	r1, r1, #6
 800072a:	0a4d      	lsrs	r5, r1, #9
 800072c:	b2d8      	uxtb	r0, r3
 800072e:	e7d9      	b.n	80006e4 <__aeabi_ui2f+0x28>
 8000730:	fbffffff 	.word	0xfbffffff

08000734 <__aeabi_dadd>:
 8000734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000736:	464f      	mov	r7, r9
 8000738:	46d6      	mov	lr, sl
 800073a:	4646      	mov	r6, r8
 800073c:	000d      	movs	r5, r1
 800073e:	0001      	movs	r1, r0
 8000740:	0018      	movs	r0, r3
 8000742:	b5c0      	push	{r6, r7, lr}
 8000744:	0017      	movs	r7, r2
 8000746:	032b      	lsls	r3, r5, #12
 8000748:	0a5a      	lsrs	r2, r3, #9
 800074a:	0f4b      	lsrs	r3, r1, #29
 800074c:	4313      	orrs	r3, r2
 800074e:	00ca      	lsls	r2, r1, #3
 8000750:	4691      	mov	r9, r2
 8000752:	0302      	lsls	r2, r0, #12
 8000754:	006e      	lsls	r6, r5, #1
 8000756:	0041      	lsls	r1, r0, #1
 8000758:	0a52      	lsrs	r2, r2, #9
 800075a:	0fec      	lsrs	r4, r5, #31
 800075c:	0f7d      	lsrs	r5, r7, #29
 800075e:	4315      	orrs	r5, r2
 8000760:	0d76      	lsrs	r6, r6, #21
 8000762:	0d49      	lsrs	r1, r1, #21
 8000764:	0fc0      	lsrs	r0, r0, #31
 8000766:	4682      	mov	sl, r0
 8000768:	46ac      	mov	ip, r5
 800076a:	00ff      	lsls	r7, r7, #3
 800076c:	1a72      	subs	r2, r6, r1
 800076e:	4284      	cmp	r4, r0
 8000770:	d100      	bne.n	8000774 <__aeabi_dadd+0x40>
 8000772:	e098      	b.n	80008a6 <__aeabi_dadd+0x172>
 8000774:	2a00      	cmp	r2, #0
 8000776:	dc00      	bgt.n	800077a <__aeabi_dadd+0x46>
 8000778:	e081      	b.n	800087e <__aeabi_dadd+0x14a>
 800077a:	2900      	cmp	r1, #0
 800077c:	d100      	bne.n	8000780 <__aeabi_dadd+0x4c>
 800077e:	e0b6      	b.n	80008ee <__aeabi_dadd+0x1ba>
 8000780:	49c9      	ldr	r1, [pc, #804]	; (8000aa8 <__aeabi_dadd+0x374>)
 8000782:	428e      	cmp	r6, r1
 8000784:	d100      	bne.n	8000788 <__aeabi_dadd+0x54>
 8000786:	e172      	b.n	8000a6e <__aeabi_dadd+0x33a>
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	0028      	movs	r0, r5
 800078c:	0409      	lsls	r1, r1, #16
 800078e:	4308      	orrs	r0, r1
 8000790:	4684      	mov	ip, r0
 8000792:	2a38      	cmp	r2, #56	; 0x38
 8000794:	dd00      	ble.n	8000798 <__aeabi_dadd+0x64>
 8000796:	e15e      	b.n	8000a56 <__aeabi_dadd+0x322>
 8000798:	2a1f      	cmp	r2, #31
 800079a:	dd00      	ble.n	800079e <__aeabi_dadd+0x6a>
 800079c:	e1ee      	b.n	8000b7c <__aeabi_dadd+0x448>
 800079e:	2020      	movs	r0, #32
 80007a0:	0039      	movs	r1, r7
 80007a2:	4665      	mov	r5, ip
 80007a4:	1a80      	subs	r0, r0, r2
 80007a6:	4087      	lsls	r7, r0
 80007a8:	40d1      	lsrs	r1, r2
 80007aa:	4085      	lsls	r5, r0
 80007ac:	430d      	orrs	r5, r1
 80007ae:	0039      	movs	r1, r7
 80007b0:	1e4f      	subs	r7, r1, #1
 80007b2:	41b9      	sbcs	r1, r7
 80007b4:	4667      	mov	r7, ip
 80007b6:	40d7      	lsrs	r7, r2
 80007b8:	4329      	orrs	r1, r5
 80007ba:	1bdb      	subs	r3, r3, r7
 80007bc:	464a      	mov	r2, r9
 80007be:	1a55      	subs	r5, r2, r1
 80007c0:	45a9      	cmp	r9, r5
 80007c2:	4189      	sbcs	r1, r1
 80007c4:	4249      	negs	r1, r1
 80007c6:	1a5b      	subs	r3, r3, r1
 80007c8:	4698      	mov	r8, r3
 80007ca:	4643      	mov	r3, r8
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	d400      	bmi.n	80007d2 <__aeabi_dadd+0x9e>
 80007d0:	e0cc      	b.n	800096c <__aeabi_dadd+0x238>
 80007d2:	4643      	mov	r3, r8
 80007d4:	025b      	lsls	r3, r3, #9
 80007d6:	0a5b      	lsrs	r3, r3, #9
 80007d8:	4698      	mov	r8, r3
 80007da:	4643      	mov	r3, r8
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d100      	bne.n	80007e2 <__aeabi_dadd+0xae>
 80007e0:	e12c      	b.n	8000a3c <__aeabi_dadd+0x308>
 80007e2:	4640      	mov	r0, r8
 80007e4:	f001 fe8e 	bl	8002504 <__clzsi2>
 80007e8:	0001      	movs	r1, r0
 80007ea:	3908      	subs	r1, #8
 80007ec:	2220      	movs	r2, #32
 80007ee:	0028      	movs	r0, r5
 80007f0:	4643      	mov	r3, r8
 80007f2:	1a52      	subs	r2, r2, r1
 80007f4:	408b      	lsls	r3, r1
 80007f6:	40d0      	lsrs	r0, r2
 80007f8:	408d      	lsls	r5, r1
 80007fa:	4303      	orrs	r3, r0
 80007fc:	428e      	cmp	r6, r1
 80007fe:	dd00      	ble.n	8000802 <__aeabi_dadd+0xce>
 8000800:	e117      	b.n	8000a32 <__aeabi_dadd+0x2fe>
 8000802:	1b8e      	subs	r6, r1, r6
 8000804:	1c72      	adds	r2, r6, #1
 8000806:	2a1f      	cmp	r2, #31
 8000808:	dd00      	ble.n	800080c <__aeabi_dadd+0xd8>
 800080a:	e1a7      	b.n	8000b5c <__aeabi_dadd+0x428>
 800080c:	2120      	movs	r1, #32
 800080e:	0018      	movs	r0, r3
 8000810:	002e      	movs	r6, r5
 8000812:	1a89      	subs	r1, r1, r2
 8000814:	408d      	lsls	r5, r1
 8000816:	4088      	lsls	r0, r1
 8000818:	40d6      	lsrs	r6, r2
 800081a:	40d3      	lsrs	r3, r2
 800081c:	1e69      	subs	r1, r5, #1
 800081e:	418d      	sbcs	r5, r1
 8000820:	4330      	orrs	r0, r6
 8000822:	4698      	mov	r8, r3
 8000824:	2600      	movs	r6, #0
 8000826:	4305      	orrs	r5, r0
 8000828:	076b      	lsls	r3, r5, #29
 800082a:	d009      	beq.n	8000840 <__aeabi_dadd+0x10c>
 800082c:	230f      	movs	r3, #15
 800082e:	402b      	ands	r3, r5
 8000830:	2b04      	cmp	r3, #4
 8000832:	d005      	beq.n	8000840 <__aeabi_dadd+0x10c>
 8000834:	1d2b      	adds	r3, r5, #4
 8000836:	42ab      	cmp	r3, r5
 8000838:	41ad      	sbcs	r5, r5
 800083a:	426d      	negs	r5, r5
 800083c:	44a8      	add	r8, r5
 800083e:	001d      	movs	r5, r3
 8000840:	4643      	mov	r3, r8
 8000842:	021b      	lsls	r3, r3, #8
 8000844:	d400      	bmi.n	8000848 <__aeabi_dadd+0x114>
 8000846:	e094      	b.n	8000972 <__aeabi_dadd+0x23e>
 8000848:	4b97      	ldr	r3, [pc, #604]	; (8000aa8 <__aeabi_dadd+0x374>)
 800084a:	1c72      	adds	r2, r6, #1
 800084c:	429a      	cmp	r2, r3
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x11e>
 8000850:	e09d      	b.n	800098e <__aeabi_dadd+0x25a>
 8000852:	4641      	mov	r1, r8
 8000854:	4b95      	ldr	r3, [pc, #596]	; (8000aac <__aeabi_dadd+0x378>)
 8000856:	08ed      	lsrs	r5, r5, #3
 8000858:	4019      	ands	r1, r3
 800085a:	000b      	movs	r3, r1
 800085c:	0552      	lsls	r2, r2, #21
 800085e:	0749      	lsls	r1, r1, #29
 8000860:	025b      	lsls	r3, r3, #9
 8000862:	4329      	orrs	r1, r5
 8000864:	0b1b      	lsrs	r3, r3, #12
 8000866:	0d52      	lsrs	r2, r2, #21
 8000868:	0512      	lsls	r2, r2, #20
 800086a:	4313      	orrs	r3, r2
 800086c:	07e4      	lsls	r4, r4, #31
 800086e:	4323      	orrs	r3, r4
 8000870:	0008      	movs	r0, r1
 8000872:	0019      	movs	r1, r3
 8000874:	bce0      	pop	{r5, r6, r7}
 8000876:	46ba      	mov	sl, r7
 8000878:	46b1      	mov	r9, r6
 800087a:	46a8      	mov	r8, r5
 800087c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800087e:	2a00      	cmp	r2, #0
 8000880:	d043      	beq.n	800090a <__aeabi_dadd+0x1d6>
 8000882:	1b8a      	subs	r2, r1, r6
 8000884:	2e00      	cmp	r6, #0
 8000886:	d000      	beq.n	800088a <__aeabi_dadd+0x156>
 8000888:	e12a      	b.n	8000ae0 <__aeabi_dadd+0x3ac>
 800088a:	464c      	mov	r4, r9
 800088c:	431c      	orrs	r4, r3
 800088e:	d100      	bne.n	8000892 <__aeabi_dadd+0x15e>
 8000890:	e1d1      	b.n	8000c36 <__aeabi_dadd+0x502>
 8000892:	1e54      	subs	r4, r2, #1
 8000894:	2a01      	cmp	r2, #1
 8000896:	d100      	bne.n	800089a <__aeabi_dadd+0x166>
 8000898:	e21f      	b.n	8000cda <__aeabi_dadd+0x5a6>
 800089a:	4d83      	ldr	r5, [pc, #524]	; (8000aa8 <__aeabi_dadd+0x374>)
 800089c:	42aa      	cmp	r2, r5
 800089e:	d100      	bne.n	80008a2 <__aeabi_dadd+0x16e>
 80008a0:	e272      	b.n	8000d88 <__aeabi_dadd+0x654>
 80008a2:	0022      	movs	r2, r4
 80008a4:	e123      	b.n	8000aee <__aeabi_dadd+0x3ba>
 80008a6:	2a00      	cmp	r2, #0
 80008a8:	dc00      	bgt.n	80008ac <__aeabi_dadd+0x178>
 80008aa:	e098      	b.n	80009de <__aeabi_dadd+0x2aa>
 80008ac:	2900      	cmp	r1, #0
 80008ae:	d042      	beq.n	8000936 <__aeabi_dadd+0x202>
 80008b0:	497d      	ldr	r1, [pc, #500]	; (8000aa8 <__aeabi_dadd+0x374>)
 80008b2:	428e      	cmp	r6, r1
 80008b4:	d100      	bne.n	80008b8 <__aeabi_dadd+0x184>
 80008b6:	e0da      	b.n	8000a6e <__aeabi_dadd+0x33a>
 80008b8:	2180      	movs	r1, #128	; 0x80
 80008ba:	0028      	movs	r0, r5
 80008bc:	0409      	lsls	r1, r1, #16
 80008be:	4308      	orrs	r0, r1
 80008c0:	4684      	mov	ip, r0
 80008c2:	2a38      	cmp	r2, #56	; 0x38
 80008c4:	dd00      	ble.n	80008c8 <__aeabi_dadd+0x194>
 80008c6:	e129      	b.n	8000b1c <__aeabi_dadd+0x3e8>
 80008c8:	2a1f      	cmp	r2, #31
 80008ca:	dc00      	bgt.n	80008ce <__aeabi_dadd+0x19a>
 80008cc:	e187      	b.n	8000bde <__aeabi_dadd+0x4aa>
 80008ce:	0011      	movs	r1, r2
 80008d0:	4665      	mov	r5, ip
 80008d2:	3920      	subs	r1, #32
 80008d4:	40cd      	lsrs	r5, r1
 80008d6:	2a20      	cmp	r2, #32
 80008d8:	d004      	beq.n	80008e4 <__aeabi_dadd+0x1b0>
 80008da:	2040      	movs	r0, #64	; 0x40
 80008dc:	4661      	mov	r1, ip
 80008de:	1a82      	subs	r2, r0, r2
 80008e0:	4091      	lsls	r1, r2
 80008e2:	430f      	orrs	r7, r1
 80008e4:	0039      	movs	r1, r7
 80008e6:	1e4f      	subs	r7, r1, #1
 80008e8:	41b9      	sbcs	r1, r7
 80008ea:	430d      	orrs	r5, r1
 80008ec:	e11b      	b.n	8000b26 <__aeabi_dadd+0x3f2>
 80008ee:	0029      	movs	r1, r5
 80008f0:	4339      	orrs	r1, r7
 80008f2:	d100      	bne.n	80008f6 <__aeabi_dadd+0x1c2>
 80008f4:	e0b5      	b.n	8000a62 <__aeabi_dadd+0x32e>
 80008f6:	1e51      	subs	r1, r2, #1
 80008f8:	2a01      	cmp	r2, #1
 80008fa:	d100      	bne.n	80008fe <__aeabi_dadd+0x1ca>
 80008fc:	e1ab      	b.n	8000c56 <__aeabi_dadd+0x522>
 80008fe:	486a      	ldr	r0, [pc, #424]	; (8000aa8 <__aeabi_dadd+0x374>)
 8000900:	4282      	cmp	r2, r0
 8000902:	d100      	bne.n	8000906 <__aeabi_dadd+0x1d2>
 8000904:	e1b2      	b.n	8000c6c <__aeabi_dadd+0x538>
 8000906:	000a      	movs	r2, r1
 8000908:	e743      	b.n	8000792 <__aeabi_dadd+0x5e>
 800090a:	4969      	ldr	r1, [pc, #420]	; (8000ab0 <__aeabi_dadd+0x37c>)
 800090c:	1c75      	adds	r5, r6, #1
 800090e:	420d      	tst	r5, r1
 8000910:	d000      	beq.n	8000914 <__aeabi_dadd+0x1e0>
 8000912:	e0cf      	b.n	8000ab4 <__aeabi_dadd+0x380>
 8000914:	2e00      	cmp	r6, #0
 8000916:	d000      	beq.n	800091a <__aeabi_dadd+0x1e6>
 8000918:	e193      	b.n	8000c42 <__aeabi_dadd+0x50e>
 800091a:	4649      	mov	r1, r9
 800091c:	4319      	orrs	r1, r3
 800091e:	d100      	bne.n	8000922 <__aeabi_dadd+0x1ee>
 8000920:	e1d1      	b.n	8000cc6 <__aeabi_dadd+0x592>
 8000922:	4661      	mov	r1, ip
 8000924:	4339      	orrs	r1, r7
 8000926:	d000      	beq.n	800092a <__aeabi_dadd+0x1f6>
 8000928:	e1e3      	b.n	8000cf2 <__aeabi_dadd+0x5be>
 800092a:	4649      	mov	r1, r9
 800092c:	0758      	lsls	r0, r3, #29
 800092e:	08c9      	lsrs	r1, r1, #3
 8000930:	4301      	orrs	r1, r0
 8000932:	08db      	lsrs	r3, r3, #3
 8000934:	e026      	b.n	8000984 <__aeabi_dadd+0x250>
 8000936:	0029      	movs	r1, r5
 8000938:	4339      	orrs	r1, r7
 800093a:	d100      	bne.n	800093e <__aeabi_dadd+0x20a>
 800093c:	e091      	b.n	8000a62 <__aeabi_dadd+0x32e>
 800093e:	1e51      	subs	r1, r2, #1
 8000940:	2a01      	cmp	r2, #1
 8000942:	d005      	beq.n	8000950 <__aeabi_dadd+0x21c>
 8000944:	4858      	ldr	r0, [pc, #352]	; (8000aa8 <__aeabi_dadd+0x374>)
 8000946:	4282      	cmp	r2, r0
 8000948:	d100      	bne.n	800094c <__aeabi_dadd+0x218>
 800094a:	e18f      	b.n	8000c6c <__aeabi_dadd+0x538>
 800094c:	000a      	movs	r2, r1
 800094e:	e7b8      	b.n	80008c2 <__aeabi_dadd+0x18e>
 8000950:	003d      	movs	r5, r7
 8000952:	444d      	add	r5, r9
 8000954:	454d      	cmp	r5, r9
 8000956:	4189      	sbcs	r1, r1
 8000958:	4463      	add	r3, ip
 800095a:	4698      	mov	r8, r3
 800095c:	4249      	negs	r1, r1
 800095e:	4488      	add	r8, r1
 8000960:	4643      	mov	r3, r8
 8000962:	2602      	movs	r6, #2
 8000964:	021b      	lsls	r3, r3, #8
 8000966:	d500      	bpl.n	800096a <__aeabi_dadd+0x236>
 8000968:	e0eb      	b.n	8000b42 <__aeabi_dadd+0x40e>
 800096a:	3e01      	subs	r6, #1
 800096c:	076b      	lsls	r3, r5, #29
 800096e:	d000      	beq.n	8000972 <__aeabi_dadd+0x23e>
 8000970:	e75c      	b.n	800082c <__aeabi_dadd+0xf8>
 8000972:	4643      	mov	r3, r8
 8000974:	08e9      	lsrs	r1, r5, #3
 8000976:	075a      	lsls	r2, r3, #29
 8000978:	4311      	orrs	r1, r2
 800097a:	0032      	movs	r2, r6
 800097c:	08db      	lsrs	r3, r3, #3
 800097e:	484a      	ldr	r0, [pc, #296]	; (8000aa8 <__aeabi_dadd+0x374>)
 8000980:	4282      	cmp	r2, r0
 8000982:	d021      	beq.n	80009c8 <__aeabi_dadd+0x294>
 8000984:	031b      	lsls	r3, r3, #12
 8000986:	0552      	lsls	r2, r2, #21
 8000988:	0b1b      	lsrs	r3, r3, #12
 800098a:	0d52      	lsrs	r2, r2, #21
 800098c:	e76c      	b.n	8000868 <__aeabi_dadd+0x134>
 800098e:	2300      	movs	r3, #0
 8000990:	2100      	movs	r1, #0
 8000992:	e769      	b.n	8000868 <__aeabi_dadd+0x134>
 8000994:	002a      	movs	r2, r5
 8000996:	433a      	orrs	r2, r7
 8000998:	d069      	beq.n	8000a6e <__aeabi_dadd+0x33a>
 800099a:	464a      	mov	r2, r9
 800099c:	0758      	lsls	r0, r3, #29
 800099e:	08d1      	lsrs	r1, r2, #3
 80009a0:	08da      	lsrs	r2, r3, #3
 80009a2:	2380      	movs	r3, #128	; 0x80
 80009a4:	031b      	lsls	r3, r3, #12
 80009a6:	4308      	orrs	r0, r1
 80009a8:	421a      	tst	r2, r3
 80009aa:	d007      	beq.n	80009bc <__aeabi_dadd+0x288>
 80009ac:	0029      	movs	r1, r5
 80009ae:	08ed      	lsrs	r5, r5, #3
 80009b0:	421d      	tst	r5, r3
 80009b2:	d103      	bne.n	80009bc <__aeabi_dadd+0x288>
 80009b4:	002a      	movs	r2, r5
 80009b6:	08ff      	lsrs	r7, r7, #3
 80009b8:	0748      	lsls	r0, r1, #29
 80009ba:	4338      	orrs	r0, r7
 80009bc:	0f43      	lsrs	r3, r0, #29
 80009be:	00c1      	lsls	r1, r0, #3
 80009c0:	075b      	lsls	r3, r3, #29
 80009c2:	08c9      	lsrs	r1, r1, #3
 80009c4:	4319      	orrs	r1, r3
 80009c6:	0013      	movs	r3, r2
 80009c8:	000a      	movs	r2, r1
 80009ca:	431a      	orrs	r2, r3
 80009cc:	d100      	bne.n	80009d0 <__aeabi_dadd+0x29c>
 80009ce:	e213      	b.n	8000df8 <__aeabi_dadd+0x6c4>
 80009d0:	2280      	movs	r2, #128	; 0x80
 80009d2:	0312      	lsls	r2, r2, #12
 80009d4:	4313      	orrs	r3, r2
 80009d6:	031b      	lsls	r3, r3, #12
 80009d8:	4a33      	ldr	r2, [pc, #204]	; (8000aa8 <__aeabi_dadd+0x374>)
 80009da:	0b1b      	lsrs	r3, r3, #12
 80009dc:	e744      	b.n	8000868 <__aeabi_dadd+0x134>
 80009de:	2a00      	cmp	r2, #0
 80009e0:	d04b      	beq.n	8000a7a <__aeabi_dadd+0x346>
 80009e2:	1b8a      	subs	r2, r1, r6
 80009e4:	2e00      	cmp	r6, #0
 80009e6:	d100      	bne.n	80009ea <__aeabi_dadd+0x2b6>
 80009e8:	e0e7      	b.n	8000bba <__aeabi_dadd+0x486>
 80009ea:	482f      	ldr	r0, [pc, #188]	; (8000aa8 <__aeabi_dadd+0x374>)
 80009ec:	4281      	cmp	r1, r0
 80009ee:	d100      	bne.n	80009f2 <__aeabi_dadd+0x2be>
 80009f0:	e195      	b.n	8000d1e <__aeabi_dadd+0x5ea>
 80009f2:	2080      	movs	r0, #128	; 0x80
 80009f4:	0400      	lsls	r0, r0, #16
 80009f6:	4303      	orrs	r3, r0
 80009f8:	2a38      	cmp	r2, #56	; 0x38
 80009fa:	dd00      	ble.n	80009fe <__aeabi_dadd+0x2ca>
 80009fc:	e143      	b.n	8000c86 <__aeabi_dadd+0x552>
 80009fe:	2a1f      	cmp	r2, #31
 8000a00:	dd00      	ble.n	8000a04 <__aeabi_dadd+0x2d0>
 8000a02:	e1db      	b.n	8000dbc <__aeabi_dadd+0x688>
 8000a04:	2020      	movs	r0, #32
 8000a06:	001d      	movs	r5, r3
 8000a08:	464e      	mov	r6, r9
 8000a0a:	1a80      	subs	r0, r0, r2
 8000a0c:	4085      	lsls	r5, r0
 8000a0e:	40d6      	lsrs	r6, r2
 8000a10:	4335      	orrs	r5, r6
 8000a12:	464e      	mov	r6, r9
 8000a14:	4086      	lsls	r6, r0
 8000a16:	0030      	movs	r0, r6
 8000a18:	40d3      	lsrs	r3, r2
 8000a1a:	1e46      	subs	r6, r0, #1
 8000a1c:	41b0      	sbcs	r0, r6
 8000a1e:	449c      	add	ip, r3
 8000a20:	4305      	orrs	r5, r0
 8000a22:	19ed      	adds	r5, r5, r7
 8000a24:	42bd      	cmp	r5, r7
 8000a26:	419b      	sbcs	r3, r3
 8000a28:	425b      	negs	r3, r3
 8000a2a:	4463      	add	r3, ip
 8000a2c:	4698      	mov	r8, r3
 8000a2e:	000e      	movs	r6, r1
 8000a30:	e07f      	b.n	8000b32 <__aeabi_dadd+0x3fe>
 8000a32:	4a1e      	ldr	r2, [pc, #120]	; (8000aac <__aeabi_dadd+0x378>)
 8000a34:	1a76      	subs	r6, r6, r1
 8000a36:	4013      	ands	r3, r2
 8000a38:	4698      	mov	r8, r3
 8000a3a:	e6f5      	b.n	8000828 <__aeabi_dadd+0xf4>
 8000a3c:	0028      	movs	r0, r5
 8000a3e:	f001 fd61 	bl	8002504 <__clzsi2>
 8000a42:	0001      	movs	r1, r0
 8000a44:	3118      	adds	r1, #24
 8000a46:	291f      	cmp	r1, #31
 8000a48:	dc00      	bgt.n	8000a4c <__aeabi_dadd+0x318>
 8000a4a:	e6cf      	b.n	80007ec <__aeabi_dadd+0xb8>
 8000a4c:	002b      	movs	r3, r5
 8000a4e:	3808      	subs	r0, #8
 8000a50:	4083      	lsls	r3, r0
 8000a52:	2500      	movs	r5, #0
 8000a54:	e6d2      	b.n	80007fc <__aeabi_dadd+0xc8>
 8000a56:	4662      	mov	r2, ip
 8000a58:	433a      	orrs	r2, r7
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	1e4f      	subs	r7, r1, #1
 8000a5e:	41b9      	sbcs	r1, r7
 8000a60:	e6ac      	b.n	80007bc <__aeabi_dadd+0x88>
 8000a62:	4649      	mov	r1, r9
 8000a64:	0758      	lsls	r0, r3, #29
 8000a66:	08c9      	lsrs	r1, r1, #3
 8000a68:	4301      	orrs	r1, r0
 8000a6a:	08db      	lsrs	r3, r3, #3
 8000a6c:	e787      	b.n	800097e <__aeabi_dadd+0x24a>
 8000a6e:	4649      	mov	r1, r9
 8000a70:	075a      	lsls	r2, r3, #29
 8000a72:	08c9      	lsrs	r1, r1, #3
 8000a74:	4311      	orrs	r1, r2
 8000a76:	08db      	lsrs	r3, r3, #3
 8000a78:	e7a6      	b.n	80009c8 <__aeabi_dadd+0x294>
 8000a7a:	490d      	ldr	r1, [pc, #52]	; (8000ab0 <__aeabi_dadd+0x37c>)
 8000a7c:	1c70      	adds	r0, r6, #1
 8000a7e:	4208      	tst	r0, r1
 8000a80:	d000      	beq.n	8000a84 <__aeabi_dadd+0x350>
 8000a82:	e0bb      	b.n	8000bfc <__aeabi_dadd+0x4c8>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d000      	beq.n	8000a8a <__aeabi_dadd+0x356>
 8000a88:	e114      	b.n	8000cb4 <__aeabi_dadd+0x580>
 8000a8a:	4649      	mov	r1, r9
 8000a8c:	4319      	orrs	r1, r3
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_dadd+0x35e>
 8000a90:	e175      	b.n	8000d7e <__aeabi_dadd+0x64a>
 8000a92:	0029      	movs	r1, r5
 8000a94:	4339      	orrs	r1, r7
 8000a96:	d000      	beq.n	8000a9a <__aeabi_dadd+0x366>
 8000a98:	e17e      	b.n	8000d98 <__aeabi_dadd+0x664>
 8000a9a:	4649      	mov	r1, r9
 8000a9c:	0758      	lsls	r0, r3, #29
 8000a9e:	08c9      	lsrs	r1, r1, #3
 8000aa0:	4301      	orrs	r1, r0
 8000aa2:	08db      	lsrs	r3, r3, #3
 8000aa4:	e76e      	b.n	8000984 <__aeabi_dadd+0x250>
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	000007ff 	.word	0x000007ff
 8000aac:	ff7fffff 	.word	0xff7fffff
 8000ab0:	000007fe 	.word	0x000007fe
 8000ab4:	4649      	mov	r1, r9
 8000ab6:	1bcd      	subs	r5, r1, r7
 8000ab8:	4661      	mov	r1, ip
 8000aba:	1a58      	subs	r0, r3, r1
 8000abc:	45a9      	cmp	r9, r5
 8000abe:	4189      	sbcs	r1, r1
 8000ac0:	4249      	negs	r1, r1
 8000ac2:	4688      	mov	r8, r1
 8000ac4:	0001      	movs	r1, r0
 8000ac6:	4640      	mov	r0, r8
 8000ac8:	1a09      	subs	r1, r1, r0
 8000aca:	4688      	mov	r8, r1
 8000acc:	0209      	lsls	r1, r1, #8
 8000ace:	d500      	bpl.n	8000ad2 <__aeabi_dadd+0x39e>
 8000ad0:	e0a6      	b.n	8000c20 <__aeabi_dadd+0x4ec>
 8000ad2:	4641      	mov	r1, r8
 8000ad4:	4329      	orrs	r1, r5
 8000ad6:	d000      	beq.n	8000ada <__aeabi_dadd+0x3a6>
 8000ad8:	e67f      	b.n	80007da <__aeabi_dadd+0xa6>
 8000ada:	2300      	movs	r3, #0
 8000adc:	2400      	movs	r4, #0
 8000ade:	e751      	b.n	8000984 <__aeabi_dadd+0x250>
 8000ae0:	4cc7      	ldr	r4, [pc, #796]	; (8000e00 <__aeabi_dadd+0x6cc>)
 8000ae2:	42a1      	cmp	r1, r4
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_dadd+0x3b4>
 8000ae6:	e0c7      	b.n	8000c78 <__aeabi_dadd+0x544>
 8000ae8:	2480      	movs	r4, #128	; 0x80
 8000aea:	0424      	lsls	r4, r4, #16
 8000aec:	4323      	orrs	r3, r4
 8000aee:	2a38      	cmp	r2, #56	; 0x38
 8000af0:	dc54      	bgt.n	8000b9c <__aeabi_dadd+0x468>
 8000af2:	2a1f      	cmp	r2, #31
 8000af4:	dd00      	ble.n	8000af8 <__aeabi_dadd+0x3c4>
 8000af6:	e0cc      	b.n	8000c92 <__aeabi_dadd+0x55e>
 8000af8:	2420      	movs	r4, #32
 8000afa:	4648      	mov	r0, r9
 8000afc:	1aa4      	subs	r4, r4, r2
 8000afe:	001d      	movs	r5, r3
 8000b00:	464e      	mov	r6, r9
 8000b02:	40a0      	lsls	r0, r4
 8000b04:	40d6      	lsrs	r6, r2
 8000b06:	40a5      	lsls	r5, r4
 8000b08:	0004      	movs	r4, r0
 8000b0a:	40d3      	lsrs	r3, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	4335      	orrs	r5, r6
 8000b10:	1e66      	subs	r6, r4, #1
 8000b12:	41b4      	sbcs	r4, r6
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	469c      	mov	ip, r3
 8000b18:	4325      	orrs	r5, r4
 8000b1a:	e044      	b.n	8000ba6 <__aeabi_dadd+0x472>
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	433a      	orrs	r2, r7
 8000b20:	0015      	movs	r5, r2
 8000b22:	1e6f      	subs	r7, r5, #1
 8000b24:	41bd      	sbcs	r5, r7
 8000b26:	444d      	add	r5, r9
 8000b28:	454d      	cmp	r5, r9
 8000b2a:	4189      	sbcs	r1, r1
 8000b2c:	4249      	negs	r1, r1
 8000b2e:	4688      	mov	r8, r1
 8000b30:	4498      	add	r8, r3
 8000b32:	4643      	mov	r3, r8
 8000b34:	021b      	lsls	r3, r3, #8
 8000b36:	d400      	bmi.n	8000b3a <__aeabi_dadd+0x406>
 8000b38:	e718      	b.n	800096c <__aeabi_dadd+0x238>
 8000b3a:	4bb1      	ldr	r3, [pc, #708]	; (8000e00 <__aeabi_dadd+0x6cc>)
 8000b3c:	3601      	adds	r6, #1
 8000b3e:	429e      	cmp	r6, r3
 8000b40:	d049      	beq.n	8000bd6 <__aeabi_dadd+0x4a2>
 8000b42:	4642      	mov	r2, r8
 8000b44:	4baf      	ldr	r3, [pc, #700]	; (8000e04 <__aeabi_dadd+0x6d0>)
 8000b46:	2101      	movs	r1, #1
 8000b48:	401a      	ands	r2, r3
 8000b4a:	0013      	movs	r3, r2
 8000b4c:	086a      	lsrs	r2, r5, #1
 8000b4e:	400d      	ands	r5, r1
 8000b50:	4315      	orrs	r5, r2
 8000b52:	07d9      	lsls	r1, r3, #31
 8000b54:	085b      	lsrs	r3, r3, #1
 8000b56:	4698      	mov	r8, r3
 8000b58:	430d      	orrs	r5, r1
 8000b5a:	e665      	b.n	8000828 <__aeabi_dadd+0xf4>
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	3e1f      	subs	r6, #31
 8000b60:	40f0      	lsrs	r0, r6
 8000b62:	2a20      	cmp	r2, #32
 8000b64:	d003      	beq.n	8000b6e <__aeabi_dadd+0x43a>
 8000b66:	2140      	movs	r1, #64	; 0x40
 8000b68:	1a8a      	subs	r2, r1, r2
 8000b6a:	4093      	lsls	r3, r2
 8000b6c:	431d      	orrs	r5, r3
 8000b6e:	1e69      	subs	r1, r5, #1
 8000b70:	418d      	sbcs	r5, r1
 8000b72:	2300      	movs	r3, #0
 8000b74:	2600      	movs	r6, #0
 8000b76:	4698      	mov	r8, r3
 8000b78:	4305      	orrs	r5, r0
 8000b7a:	e6f7      	b.n	800096c <__aeabi_dadd+0x238>
 8000b7c:	0011      	movs	r1, r2
 8000b7e:	4665      	mov	r5, ip
 8000b80:	3920      	subs	r1, #32
 8000b82:	40cd      	lsrs	r5, r1
 8000b84:	2a20      	cmp	r2, #32
 8000b86:	d004      	beq.n	8000b92 <__aeabi_dadd+0x45e>
 8000b88:	2040      	movs	r0, #64	; 0x40
 8000b8a:	4661      	mov	r1, ip
 8000b8c:	1a82      	subs	r2, r0, r2
 8000b8e:	4091      	lsls	r1, r2
 8000b90:	430f      	orrs	r7, r1
 8000b92:	0039      	movs	r1, r7
 8000b94:	1e4f      	subs	r7, r1, #1
 8000b96:	41b9      	sbcs	r1, r7
 8000b98:	4329      	orrs	r1, r5
 8000b9a:	e60f      	b.n	80007bc <__aeabi_dadd+0x88>
 8000b9c:	464a      	mov	r2, r9
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	001d      	movs	r5, r3
 8000ba2:	1e6b      	subs	r3, r5, #1
 8000ba4:	419d      	sbcs	r5, r3
 8000ba6:	1b7d      	subs	r5, r7, r5
 8000ba8:	42af      	cmp	r7, r5
 8000baa:	419b      	sbcs	r3, r3
 8000bac:	4662      	mov	r2, ip
 8000bae:	425b      	negs	r3, r3
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	4698      	mov	r8, r3
 8000bb4:	4654      	mov	r4, sl
 8000bb6:	000e      	movs	r6, r1
 8000bb8:	e607      	b.n	80007ca <__aeabi_dadd+0x96>
 8000bba:	4648      	mov	r0, r9
 8000bbc:	4318      	orrs	r0, r3
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_dadd+0x48e>
 8000bc0:	e0b3      	b.n	8000d2a <__aeabi_dadd+0x5f6>
 8000bc2:	1e50      	subs	r0, r2, #1
 8000bc4:	2a01      	cmp	r2, #1
 8000bc6:	d100      	bne.n	8000bca <__aeabi_dadd+0x496>
 8000bc8:	e10d      	b.n	8000de6 <__aeabi_dadd+0x6b2>
 8000bca:	4d8d      	ldr	r5, [pc, #564]	; (8000e00 <__aeabi_dadd+0x6cc>)
 8000bcc:	42aa      	cmp	r2, r5
 8000bce:	d100      	bne.n	8000bd2 <__aeabi_dadd+0x49e>
 8000bd0:	e0a5      	b.n	8000d1e <__aeabi_dadd+0x5ea>
 8000bd2:	0002      	movs	r2, r0
 8000bd4:	e710      	b.n	80009f8 <__aeabi_dadd+0x2c4>
 8000bd6:	0032      	movs	r2, r6
 8000bd8:	2300      	movs	r3, #0
 8000bda:	2100      	movs	r1, #0
 8000bdc:	e644      	b.n	8000868 <__aeabi_dadd+0x134>
 8000bde:	2120      	movs	r1, #32
 8000be0:	0038      	movs	r0, r7
 8000be2:	1a89      	subs	r1, r1, r2
 8000be4:	4665      	mov	r5, ip
 8000be6:	408f      	lsls	r7, r1
 8000be8:	408d      	lsls	r5, r1
 8000bea:	40d0      	lsrs	r0, r2
 8000bec:	1e79      	subs	r1, r7, #1
 8000bee:	418f      	sbcs	r7, r1
 8000bf0:	4305      	orrs	r5, r0
 8000bf2:	433d      	orrs	r5, r7
 8000bf4:	4667      	mov	r7, ip
 8000bf6:	40d7      	lsrs	r7, r2
 8000bf8:	19db      	adds	r3, r3, r7
 8000bfa:	e794      	b.n	8000b26 <__aeabi_dadd+0x3f2>
 8000bfc:	4a80      	ldr	r2, [pc, #512]	; (8000e00 <__aeabi_dadd+0x6cc>)
 8000bfe:	4290      	cmp	r0, r2
 8000c00:	d100      	bne.n	8000c04 <__aeabi_dadd+0x4d0>
 8000c02:	e0ec      	b.n	8000dde <__aeabi_dadd+0x6aa>
 8000c04:	0039      	movs	r1, r7
 8000c06:	4449      	add	r1, r9
 8000c08:	4549      	cmp	r1, r9
 8000c0a:	4192      	sbcs	r2, r2
 8000c0c:	4463      	add	r3, ip
 8000c0e:	4252      	negs	r2, r2
 8000c10:	189b      	adds	r3, r3, r2
 8000c12:	07dd      	lsls	r5, r3, #31
 8000c14:	0849      	lsrs	r1, r1, #1
 8000c16:	085b      	lsrs	r3, r3, #1
 8000c18:	4698      	mov	r8, r3
 8000c1a:	0006      	movs	r6, r0
 8000c1c:	430d      	orrs	r5, r1
 8000c1e:	e6a5      	b.n	800096c <__aeabi_dadd+0x238>
 8000c20:	464a      	mov	r2, r9
 8000c22:	1abd      	subs	r5, r7, r2
 8000c24:	42af      	cmp	r7, r5
 8000c26:	4189      	sbcs	r1, r1
 8000c28:	4662      	mov	r2, ip
 8000c2a:	4249      	negs	r1, r1
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	1a5b      	subs	r3, r3, r1
 8000c30:	4698      	mov	r8, r3
 8000c32:	4654      	mov	r4, sl
 8000c34:	e5d1      	b.n	80007da <__aeabi_dadd+0xa6>
 8000c36:	076c      	lsls	r4, r5, #29
 8000c38:	08f9      	lsrs	r1, r7, #3
 8000c3a:	4321      	orrs	r1, r4
 8000c3c:	08eb      	lsrs	r3, r5, #3
 8000c3e:	0004      	movs	r4, r0
 8000c40:	e69d      	b.n	800097e <__aeabi_dadd+0x24a>
 8000c42:	464a      	mov	r2, r9
 8000c44:	431a      	orrs	r2, r3
 8000c46:	d175      	bne.n	8000d34 <__aeabi_dadd+0x600>
 8000c48:	4661      	mov	r1, ip
 8000c4a:	4339      	orrs	r1, r7
 8000c4c:	d114      	bne.n	8000c78 <__aeabi_dadd+0x544>
 8000c4e:	2380      	movs	r3, #128	; 0x80
 8000c50:	2400      	movs	r4, #0
 8000c52:	031b      	lsls	r3, r3, #12
 8000c54:	e6bc      	b.n	80009d0 <__aeabi_dadd+0x29c>
 8000c56:	464a      	mov	r2, r9
 8000c58:	1bd5      	subs	r5, r2, r7
 8000c5a:	45a9      	cmp	r9, r5
 8000c5c:	4189      	sbcs	r1, r1
 8000c5e:	4662      	mov	r2, ip
 8000c60:	4249      	negs	r1, r1
 8000c62:	1a9b      	subs	r3, r3, r2
 8000c64:	1a5b      	subs	r3, r3, r1
 8000c66:	4698      	mov	r8, r3
 8000c68:	2601      	movs	r6, #1
 8000c6a:	e5ae      	b.n	80007ca <__aeabi_dadd+0x96>
 8000c6c:	464a      	mov	r2, r9
 8000c6e:	08d1      	lsrs	r1, r2, #3
 8000c70:	075a      	lsls	r2, r3, #29
 8000c72:	4311      	orrs	r1, r2
 8000c74:	08db      	lsrs	r3, r3, #3
 8000c76:	e6a7      	b.n	80009c8 <__aeabi_dadd+0x294>
 8000c78:	4663      	mov	r3, ip
 8000c7a:	08f9      	lsrs	r1, r7, #3
 8000c7c:	075a      	lsls	r2, r3, #29
 8000c7e:	4654      	mov	r4, sl
 8000c80:	4311      	orrs	r1, r2
 8000c82:	08db      	lsrs	r3, r3, #3
 8000c84:	e6a0      	b.n	80009c8 <__aeabi_dadd+0x294>
 8000c86:	464a      	mov	r2, r9
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	001d      	movs	r5, r3
 8000c8c:	1e6b      	subs	r3, r5, #1
 8000c8e:	419d      	sbcs	r5, r3
 8000c90:	e6c7      	b.n	8000a22 <__aeabi_dadd+0x2ee>
 8000c92:	0014      	movs	r4, r2
 8000c94:	001e      	movs	r6, r3
 8000c96:	3c20      	subs	r4, #32
 8000c98:	40e6      	lsrs	r6, r4
 8000c9a:	2a20      	cmp	r2, #32
 8000c9c:	d005      	beq.n	8000caa <__aeabi_dadd+0x576>
 8000c9e:	2440      	movs	r4, #64	; 0x40
 8000ca0:	1aa2      	subs	r2, r4, r2
 8000ca2:	4093      	lsls	r3, r2
 8000ca4:	464a      	mov	r2, r9
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	4691      	mov	r9, r2
 8000caa:	464d      	mov	r5, r9
 8000cac:	1e6b      	subs	r3, r5, #1
 8000cae:	419d      	sbcs	r5, r3
 8000cb0:	4335      	orrs	r5, r6
 8000cb2:	e778      	b.n	8000ba6 <__aeabi_dadd+0x472>
 8000cb4:	464a      	mov	r2, r9
 8000cb6:	431a      	orrs	r2, r3
 8000cb8:	d000      	beq.n	8000cbc <__aeabi_dadd+0x588>
 8000cba:	e66b      	b.n	8000994 <__aeabi_dadd+0x260>
 8000cbc:	076b      	lsls	r3, r5, #29
 8000cbe:	08f9      	lsrs	r1, r7, #3
 8000cc0:	4319      	orrs	r1, r3
 8000cc2:	08eb      	lsrs	r3, r5, #3
 8000cc4:	e680      	b.n	80009c8 <__aeabi_dadd+0x294>
 8000cc6:	4661      	mov	r1, ip
 8000cc8:	4339      	orrs	r1, r7
 8000cca:	d054      	beq.n	8000d76 <__aeabi_dadd+0x642>
 8000ccc:	4663      	mov	r3, ip
 8000cce:	08f9      	lsrs	r1, r7, #3
 8000cd0:	075c      	lsls	r4, r3, #29
 8000cd2:	4321      	orrs	r1, r4
 8000cd4:	08db      	lsrs	r3, r3, #3
 8000cd6:	0004      	movs	r4, r0
 8000cd8:	e654      	b.n	8000984 <__aeabi_dadd+0x250>
 8000cda:	464a      	mov	r2, r9
 8000cdc:	1abd      	subs	r5, r7, r2
 8000cde:	42af      	cmp	r7, r5
 8000ce0:	4189      	sbcs	r1, r1
 8000ce2:	4662      	mov	r2, ip
 8000ce4:	4249      	negs	r1, r1
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	4698      	mov	r8, r3
 8000cec:	0004      	movs	r4, r0
 8000cee:	2601      	movs	r6, #1
 8000cf0:	e56b      	b.n	80007ca <__aeabi_dadd+0x96>
 8000cf2:	464a      	mov	r2, r9
 8000cf4:	1bd5      	subs	r5, r2, r7
 8000cf6:	45a9      	cmp	r9, r5
 8000cf8:	4189      	sbcs	r1, r1
 8000cfa:	4662      	mov	r2, ip
 8000cfc:	4249      	negs	r1, r1
 8000cfe:	1a9a      	subs	r2, r3, r2
 8000d00:	1a52      	subs	r2, r2, r1
 8000d02:	4690      	mov	r8, r2
 8000d04:	0212      	lsls	r2, r2, #8
 8000d06:	d532      	bpl.n	8000d6e <__aeabi_dadd+0x63a>
 8000d08:	464a      	mov	r2, r9
 8000d0a:	1abd      	subs	r5, r7, r2
 8000d0c:	42af      	cmp	r7, r5
 8000d0e:	4189      	sbcs	r1, r1
 8000d10:	4662      	mov	r2, ip
 8000d12:	4249      	negs	r1, r1
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	1a5b      	subs	r3, r3, r1
 8000d18:	4698      	mov	r8, r3
 8000d1a:	0004      	movs	r4, r0
 8000d1c:	e584      	b.n	8000828 <__aeabi_dadd+0xf4>
 8000d1e:	4663      	mov	r3, ip
 8000d20:	08f9      	lsrs	r1, r7, #3
 8000d22:	075a      	lsls	r2, r3, #29
 8000d24:	4311      	orrs	r1, r2
 8000d26:	08db      	lsrs	r3, r3, #3
 8000d28:	e64e      	b.n	80009c8 <__aeabi_dadd+0x294>
 8000d2a:	08f9      	lsrs	r1, r7, #3
 8000d2c:	0768      	lsls	r0, r5, #29
 8000d2e:	4301      	orrs	r1, r0
 8000d30:	08eb      	lsrs	r3, r5, #3
 8000d32:	e624      	b.n	800097e <__aeabi_dadd+0x24a>
 8000d34:	4662      	mov	r2, ip
 8000d36:	433a      	orrs	r2, r7
 8000d38:	d100      	bne.n	8000d3c <__aeabi_dadd+0x608>
 8000d3a:	e698      	b.n	8000a6e <__aeabi_dadd+0x33a>
 8000d3c:	464a      	mov	r2, r9
 8000d3e:	08d1      	lsrs	r1, r2, #3
 8000d40:	075a      	lsls	r2, r3, #29
 8000d42:	4311      	orrs	r1, r2
 8000d44:	08da      	lsrs	r2, r3, #3
 8000d46:	2380      	movs	r3, #128	; 0x80
 8000d48:	031b      	lsls	r3, r3, #12
 8000d4a:	421a      	tst	r2, r3
 8000d4c:	d008      	beq.n	8000d60 <__aeabi_dadd+0x62c>
 8000d4e:	4660      	mov	r0, ip
 8000d50:	08c5      	lsrs	r5, r0, #3
 8000d52:	421d      	tst	r5, r3
 8000d54:	d104      	bne.n	8000d60 <__aeabi_dadd+0x62c>
 8000d56:	4654      	mov	r4, sl
 8000d58:	002a      	movs	r2, r5
 8000d5a:	08f9      	lsrs	r1, r7, #3
 8000d5c:	0743      	lsls	r3, r0, #29
 8000d5e:	4319      	orrs	r1, r3
 8000d60:	0f4b      	lsrs	r3, r1, #29
 8000d62:	00c9      	lsls	r1, r1, #3
 8000d64:	075b      	lsls	r3, r3, #29
 8000d66:	08c9      	lsrs	r1, r1, #3
 8000d68:	4319      	orrs	r1, r3
 8000d6a:	0013      	movs	r3, r2
 8000d6c:	e62c      	b.n	80009c8 <__aeabi_dadd+0x294>
 8000d6e:	4641      	mov	r1, r8
 8000d70:	4329      	orrs	r1, r5
 8000d72:	d000      	beq.n	8000d76 <__aeabi_dadd+0x642>
 8000d74:	e5fa      	b.n	800096c <__aeabi_dadd+0x238>
 8000d76:	2300      	movs	r3, #0
 8000d78:	000a      	movs	r2, r1
 8000d7a:	2400      	movs	r4, #0
 8000d7c:	e602      	b.n	8000984 <__aeabi_dadd+0x250>
 8000d7e:	076b      	lsls	r3, r5, #29
 8000d80:	08f9      	lsrs	r1, r7, #3
 8000d82:	4319      	orrs	r1, r3
 8000d84:	08eb      	lsrs	r3, r5, #3
 8000d86:	e5fd      	b.n	8000984 <__aeabi_dadd+0x250>
 8000d88:	4663      	mov	r3, ip
 8000d8a:	08f9      	lsrs	r1, r7, #3
 8000d8c:	075b      	lsls	r3, r3, #29
 8000d8e:	4319      	orrs	r1, r3
 8000d90:	4663      	mov	r3, ip
 8000d92:	0004      	movs	r4, r0
 8000d94:	08db      	lsrs	r3, r3, #3
 8000d96:	e617      	b.n	80009c8 <__aeabi_dadd+0x294>
 8000d98:	003d      	movs	r5, r7
 8000d9a:	444d      	add	r5, r9
 8000d9c:	4463      	add	r3, ip
 8000d9e:	454d      	cmp	r5, r9
 8000da0:	4189      	sbcs	r1, r1
 8000da2:	4698      	mov	r8, r3
 8000da4:	4249      	negs	r1, r1
 8000da6:	4488      	add	r8, r1
 8000da8:	4643      	mov	r3, r8
 8000daa:	021b      	lsls	r3, r3, #8
 8000dac:	d400      	bmi.n	8000db0 <__aeabi_dadd+0x67c>
 8000dae:	e5dd      	b.n	800096c <__aeabi_dadd+0x238>
 8000db0:	4642      	mov	r2, r8
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <__aeabi_dadd+0x6d0>)
 8000db4:	2601      	movs	r6, #1
 8000db6:	401a      	ands	r2, r3
 8000db8:	4690      	mov	r8, r2
 8000dba:	e5d7      	b.n	800096c <__aeabi_dadd+0x238>
 8000dbc:	0010      	movs	r0, r2
 8000dbe:	001e      	movs	r6, r3
 8000dc0:	3820      	subs	r0, #32
 8000dc2:	40c6      	lsrs	r6, r0
 8000dc4:	2a20      	cmp	r2, #32
 8000dc6:	d005      	beq.n	8000dd4 <__aeabi_dadd+0x6a0>
 8000dc8:	2040      	movs	r0, #64	; 0x40
 8000dca:	1a82      	subs	r2, r0, r2
 8000dcc:	4093      	lsls	r3, r2
 8000dce:	464a      	mov	r2, r9
 8000dd0:	431a      	orrs	r2, r3
 8000dd2:	4691      	mov	r9, r2
 8000dd4:	464d      	mov	r5, r9
 8000dd6:	1e6b      	subs	r3, r5, #1
 8000dd8:	419d      	sbcs	r5, r3
 8000dda:	4335      	orrs	r5, r6
 8000ddc:	e621      	b.n	8000a22 <__aeabi_dadd+0x2ee>
 8000dde:	0002      	movs	r2, r0
 8000de0:	2300      	movs	r3, #0
 8000de2:	2100      	movs	r1, #0
 8000de4:	e540      	b.n	8000868 <__aeabi_dadd+0x134>
 8000de6:	464a      	mov	r2, r9
 8000de8:	19d5      	adds	r5, r2, r7
 8000dea:	42bd      	cmp	r5, r7
 8000dec:	4189      	sbcs	r1, r1
 8000dee:	4463      	add	r3, ip
 8000df0:	4698      	mov	r8, r3
 8000df2:	4249      	negs	r1, r1
 8000df4:	4488      	add	r8, r1
 8000df6:	e5b3      	b.n	8000960 <__aeabi_dadd+0x22c>
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4a01      	ldr	r2, [pc, #4]	; (8000e00 <__aeabi_dadd+0x6cc>)
 8000dfc:	000b      	movs	r3, r1
 8000dfe:	e533      	b.n	8000868 <__aeabi_dadd+0x134>
 8000e00:	000007ff 	.word	0x000007ff
 8000e04:	ff7fffff 	.word	0xff7fffff

08000e08 <__aeabi_ddiv>:
 8000e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e0a:	4657      	mov	r7, sl
 8000e0c:	464e      	mov	r6, r9
 8000e0e:	4645      	mov	r5, r8
 8000e10:	46de      	mov	lr, fp
 8000e12:	b5e0      	push	{r5, r6, r7, lr}
 8000e14:	4681      	mov	r9, r0
 8000e16:	0005      	movs	r5, r0
 8000e18:	030c      	lsls	r4, r1, #12
 8000e1a:	0048      	lsls	r0, r1, #1
 8000e1c:	4692      	mov	sl, r2
 8000e1e:	001f      	movs	r7, r3
 8000e20:	b085      	sub	sp, #20
 8000e22:	0b24      	lsrs	r4, r4, #12
 8000e24:	0d40      	lsrs	r0, r0, #21
 8000e26:	0fce      	lsrs	r6, r1, #31
 8000e28:	2800      	cmp	r0, #0
 8000e2a:	d059      	beq.n	8000ee0 <__aeabi_ddiv+0xd8>
 8000e2c:	4b87      	ldr	r3, [pc, #540]	; (800104c <__aeabi_ddiv+0x244>)
 8000e2e:	4298      	cmp	r0, r3
 8000e30:	d100      	bne.n	8000e34 <__aeabi_ddiv+0x2c>
 8000e32:	e098      	b.n	8000f66 <__aeabi_ddiv+0x15e>
 8000e34:	0f6b      	lsrs	r3, r5, #29
 8000e36:	00e4      	lsls	r4, r4, #3
 8000e38:	431c      	orrs	r4, r3
 8000e3a:	2380      	movs	r3, #128	; 0x80
 8000e3c:	041b      	lsls	r3, r3, #16
 8000e3e:	4323      	orrs	r3, r4
 8000e40:	4698      	mov	r8, r3
 8000e42:	4b83      	ldr	r3, [pc, #524]	; (8001050 <__aeabi_ddiv+0x248>)
 8000e44:	00ed      	lsls	r5, r5, #3
 8000e46:	469b      	mov	fp, r3
 8000e48:	2300      	movs	r3, #0
 8000e4a:	4699      	mov	r9, r3
 8000e4c:	4483      	add	fp, r0
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	033c      	lsls	r4, r7, #12
 8000e52:	007b      	lsls	r3, r7, #1
 8000e54:	4650      	mov	r0, sl
 8000e56:	0b24      	lsrs	r4, r4, #12
 8000e58:	0d5b      	lsrs	r3, r3, #21
 8000e5a:	0fff      	lsrs	r7, r7, #31
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d067      	beq.n	8000f30 <__aeabi_ddiv+0x128>
 8000e60:	4a7a      	ldr	r2, [pc, #488]	; (800104c <__aeabi_ddiv+0x244>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d018      	beq.n	8000e98 <__aeabi_ddiv+0x90>
 8000e66:	497a      	ldr	r1, [pc, #488]	; (8001050 <__aeabi_ddiv+0x248>)
 8000e68:	0f42      	lsrs	r2, r0, #29
 8000e6a:	468c      	mov	ip, r1
 8000e6c:	00e4      	lsls	r4, r4, #3
 8000e6e:	4659      	mov	r1, fp
 8000e70:	4314      	orrs	r4, r2
 8000e72:	2280      	movs	r2, #128	; 0x80
 8000e74:	4463      	add	r3, ip
 8000e76:	0412      	lsls	r2, r2, #16
 8000e78:	1acb      	subs	r3, r1, r3
 8000e7a:	4314      	orrs	r4, r2
 8000e7c:	469b      	mov	fp, r3
 8000e7e:	00c2      	lsls	r2, r0, #3
 8000e80:	2000      	movs	r0, #0
 8000e82:	0033      	movs	r3, r6
 8000e84:	407b      	eors	r3, r7
 8000e86:	469a      	mov	sl, r3
 8000e88:	464b      	mov	r3, r9
 8000e8a:	2b0f      	cmp	r3, #15
 8000e8c:	d900      	bls.n	8000e90 <__aeabi_ddiv+0x88>
 8000e8e:	e0ef      	b.n	8001070 <__aeabi_ddiv+0x268>
 8000e90:	4970      	ldr	r1, [pc, #448]	; (8001054 <__aeabi_ddiv+0x24c>)
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	58cb      	ldr	r3, [r1, r3]
 8000e96:	469f      	mov	pc, r3
 8000e98:	4b6f      	ldr	r3, [pc, #444]	; (8001058 <__aeabi_ddiv+0x250>)
 8000e9a:	4652      	mov	r2, sl
 8000e9c:	469c      	mov	ip, r3
 8000e9e:	4322      	orrs	r2, r4
 8000ea0:	44e3      	add	fp, ip
 8000ea2:	2a00      	cmp	r2, #0
 8000ea4:	d000      	beq.n	8000ea8 <__aeabi_ddiv+0xa0>
 8000ea6:	e095      	b.n	8000fd4 <__aeabi_ddiv+0x1cc>
 8000ea8:	4649      	mov	r1, r9
 8000eaa:	2302      	movs	r3, #2
 8000eac:	4319      	orrs	r1, r3
 8000eae:	4689      	mov	r9, r1
 8000eb0:	2400      	movs	r4, #0
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	e7e5      	b.n	8000e82 <__aeabi_ddiv+0x7a>
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	2400      	movs	r4, #0
 8000eba:	2500      	movs	r5, #0
 8000ebc:	4652      	mov	r2, sl
 8000ebe:	051b      	lsls	r3, r3, #20
 8000ec0:	4323      	orrs	r3, r4
 8000ec2:	07d2      	lsls	r2, r2, #31
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	0028      	movs	r0, r5
 8000ec8:	0019      	movs	r1, r3
 8000eca:	b005      	add	sp, #20
 8000ecc:	bcf0      	pop	{r4, r5, r6, r7}
 8000ece:	46bb      	mov	fp, r7
 8000ed0:	46b2      	mov	sl, r6
 8000ed2:	46a9      	mov	r9, r5
 8000ed4:	46a0      	mov	r8, r4
 8000ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ed8:	2400      	movs	r4, #0
 8000eda:	2500      	movs	r5, #0
 8000edc:	4b5b      	ldr	r3, [pc, #364]	; (800104c <__aeabi_ddiv+0x244>)
 8000ede:	e7ed      	b.n	8000ebc <__aeabi_ddiv+0xb4>
 8000ee0:	464b      	mov	r3, r9
 8000ee2:	4323      	orrs	r3, r4
 8000ee4:	4698      	mov	r8, r3
 8000ee6:	d100      	bne.n	8000eea <__aeabi_ddiv+0xe2>
 8000ee8:	e089      	b.n	8000ffe <__aeabi_ddiv+0x1f6>
 8000eea:	2c00      	cmp	r4, #0
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_ddiv+0xe8>
 8000eee:	e1e0      	b.n	80012b2 <__aeabi_ddiv+0x4aa>
 8000ef0:	0020      	movs	r0, r4
 8000ef2:	f001 fb07 	bl	8002504 <__clzsi2>
 8000ef6:	0001      	movs	r1, r0
 8000ef8:	0002      	movs	r2, r0
 8000efa:	390b      	subs	r1, #11
 8000efc:	231d      	movs	r3, #29
 8000efe:	1a5b      	subs	r3, r3, r1
 8000f00:	4649      	mov	r1, r9
 8000f02:	0010      	movs	r0, r2
 8000f04:	40d9      	lsrs	r1, r3
 8000f06:	3808      	subs	r0, #8
 8000f08:	4084      	lsls	r4, r0
 8000f0a:	000b      	movs	r3, r1
 8000f0c:	464d      	mov	r5, r9
 8000f0e:	4323      	orrs	r3, r4
 8000f10:	4698      	mov	r8, r3
 8000f12:	4085      	lsls	r5, r0
 8000f14:	4851      	ldr	r0, [pc, #324]	; (800105c <__aeabi_ddiv+0x254>)
 8000f16:	033c      	lsls	r4, r7, #12
 8000f18:	1a83      	subs	r3, r0, r2
 8000f1a:	469b      	mov	fp, r3
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	4699      	mov	r9, r3
 8000f20:	9300      	str	r3, [sp, #0]
 8000f22:	007b      	lsls	r3, r7, #1
 8000f24:	4650      	mov	r0, sl
 8000f26:	0b24      	lsrs	r4, r4, #12
 8000f28:	0d5b      	lsrs	r3, r3, #21
 8000f2a:	0fff      	lsrs	r7, r7, #31
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d197      	bne.n	8000e60 <__aeabi_ddiv+0x58>
 8000f30:	4652      	mov	r2, sl
 8000f32:	4322      	orrs	r2, r4
 8000f34:	d055      	beq.n	8000fe2 <__aeabi_ddiv+0x1da>
 8000f36:	2c00      	cmp	r4, #0
 8000f38:	d100      	bne.n	8000f3c <__aeabi_ddiv+0x134>
 8000f3a:	e1ca      	b.n	80012d2 <__aeabi_ddiv+0x4ca>
 8000f3c:	0020      	movs	r0, r4
 8000f3e:	f001 fae1 	bl	8002504 <__clzsi2>
 8000f42:	0002      	movs	r2, r0
 8000f44:	3a0b      	subs	r2, #11
 8000f46:	231d      	movs	r3, #29
 8000f48:	0001      	movs	r1, r0
 8000f4a:	1a9b      	subs	r3, r3, r2
 8000f4c:	4652      	mov	r2, sl
 8000f4e:	3908      	subs	r1, #8
 8000f50:	40da      	lsrs	r2, r3
 8000f52:	408c      	lsls	r4, r1
 8000f54:	4314      	orrs	r4, r2
 8000f56:	4652      	mov	r2, sl
 8000f58:	408a      	lsls	r2, r1
 8000f5a:	4b41      	ldr	r3, [pc, #260]	; (8001060 <__aeabi_ddiv+0x258>)
 8000f5c:	4458      	add	r0, fp
 8000f5e:	469b      	mov	fp, r3
 8000f60:	4483      	add	fp, r0
 8000f62:	2000      	movs	r0, #0
 8000f64:	e78d      	b.n	8000e82 <__aeabi_ddiv+0x7a>
 8000f66:	464b      	mov	r3, r9
 8000f68:	4323      	orrs	r3, r4
 8000f6a:	4698      	mov	r8, r3
 8000f6c:	d140      	bne.n	8000ff0 <__aeabi_ddiv+0x1e8>
 8000f6e:	2308      	movs	r3, #8
 8000f70:	4699      	mov	r9, r3
 8000f72:	3b06      	subs	r3, #6
 8000f74:	2500      	movs	r5, #0
 8000f76:	4683      	mov	fp, r0
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	e769      	b.n	8000e50 <__aeabi_ddiv+0x48>
 8000f7c:	46b2      	mov	sl, r6
 8000f7e:	9b00      	ldr	r3, [sp, #0]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d0a9      	beq.n	8000ed8 <__aeabi_ddiv+0xd0>
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d100      	bne.n	8000f8a <__aeabi_ddiv+0x182>
 8000f88:	e211      	b.n	80013ae <__aeabi_ddiv+0x5a6>
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d093      	beq.n	8000eb6 <__aeabi_ddiv+0xae>
 8000f8e:	4a35      	ldr	r2, [pc, #212]	; (8001064 <__aeabi_ddiv+0x25c>)
 8000f90:	445a      	add	r2, fp
 8000f92:	2a00      	cmp	r2, #0
 8000f94:	dc00      	bgt.n	8000f98 <__aeabi_ddiv+0x190>
 8000f96:	e13c      	b.n	8001212 <__aeabi_ddiv+0x40a>
 8000f98:	076b      	lsls	r3, r5, #29
 8000f9a:	d000      	beq.n	8000f9e <__aeabi_ddiv+0x196>
 8000f9c:	e1a7      	b.n	80012ee <__aeabi_ddiv+0x4e6>
 8000f9e:	08ed      	lsrs	r5, r5, #3
 8000fa0:	4643      	mov	r3, r8
 8000fa2:	01db      	lsls	r3, r3, #7
 8000fa4:	d506      	bpl.n	8000fb4 <__aeabi_ddiv+0x1ac>
 8000fa6:	4642      	mov	r2, r8
 8000fa8:	4b2f      	ldr	r3, [pc, #188]	; (8001068 <__aeabi_ddiv+0x260>)
 8000faa:	401a      	ands	r2, r3
 8000fac:	4690      	mov	r8, r2
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	00d2      	lsls	r2, r2, #3
 8000fb2:	445a      	add	r2, fp
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	; (800106c <__aeabi_ddiv+0x264>)
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	dc8e      	bgt.n	8000ed8 <__aeabi_ddiv+0xd0>
 8000fba:	4643      	mov	r3, r8
 8000fbc:	0552      	lsls	r2, r2, #21
 8000fbe:	0758      	lsls	r0, r3, #29
 8000fc0:	025c      	lsls	r4, r3, #9
 8000fc2:	4305      	orrs	r5, r0
 8000fc4:	0b24      	lsrs	r4, r4, #12
 8000fc6:	0d53      	lsrs	r3, r2, #21
 8000fc8:	e778      	b.n	8000ebc <__aeabi_ddiv+0xb4>
 8000fca:	46ba      	mov	sl, r7
 8000fcc:	46a0      	mov	r8, r4
 8000fce:	0015      	movs	r5, r2
 8000fd0:	9000      	str	r0, [sp, #0]
 8000fd2:	e7d4      	b.n	8000f7e <__aeabi_ddiv+0x176>
 8000fd4:	464a      	mov	r2, r9
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	4691      	mov	r9, r2
 8000fdc:	2003      	movs	r0, #3
 8000fde:	4652      	mov	r2, sl
 8000fe0:	e74f      	b.n	8000e82 <__aeabi_ddiv+0x7a>
 8000fe2:	4649      	mov	r1, r9
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	4319      	orrs	r1, r3
 8000fe8:	4689      	mov	r9, r1
 8000fea:	2400      	movs	r4, #0
 8000fec:	2001      	movs	r0, #1
 8000fee:	e748      	b.n	8000e82 <__aeabi_ddiv+0x7a>
 8000ff0:	230c      	movs	r3, #12
 8000ff2:	4699      	mov	r9, r3
 8000ff4:	3b09      	subs	r3, #9
 8000ff6:	46a0      	mov	r8, r4
 8000ff8:	4683      	mov	fp, r0
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	e728      	b.n	8000e50 <__aeabi_ddiv+0x48>
 8000ffe:	2304      	movs	r3, #4
 8001000:	4699      	mov	r9, r3
 8001002:	2300      	movs	r3, #0
 8001004:	469b      	mov	fp, r3
 8001006:	3301      	adds	r3, #1
 8001008:	2500      	movs	r5, #0
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	e720      	b.n	8000e50 <__aeabi_ddiv+0x48>
 800100e:	2300      	movs	r3, #0
 8001010:	2480      	movs	r4, #128	; 0x80
 8001012:	469a      	mov	sl, r3
 8001014:	2500      	movs	r5, #0
 8001016:	4b0d      	ldr	r3, [pc, #52]	; (800104c <__aeabi_ddiv+0x244>)
 8001018:	0324      	lsls	r4, r4, #12
 800101a:	e74f      	b.n	8000ebc <__aeabi_ddiv+0xb4>
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	4641      	mov	r1, r8
 8001020:	031b      	lsls	r3, r3, #12
 8001022:	4219      	tst	r1, r3
 8001024:	d008      	beq.n	8001038 <__aeabi_ddiv+0x230>
 8001026:	421c      	tst	r4, r3
 8001028:	d106      	bne.n	8001038 <__aeabi_ddiv+0x230>
 800102a:	431c      	orrs	r4, r3
 800102c:	0324      	lsls	r4, r4, #12
 800102e:	46ba      	mov	sl, r7
 8001030:	0015      	movs	r5, r2
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <__aeabi_ddiv+0x244>)
 8001034:	0b24      	lsrs	r4, r4, #12
 8001036:	e741      	b.n	8000ebc <__aeabi_ddiv+0xb4>
 8001038:	2480      	movs	r4, #128	; 0x80
 800103a:	4643      	mov	r3, r8
 800103c:	0324      	lsls	r4, r4, #12
 800103e:	431c      	orrs	r4, r3
 8001040:	0324      	lsls	r4, r4, #12
 8001042:	46b2      	mov	sl, r6
 8001044:	4b01      	ldr	r3, [pc, #4]	; (800104c <__aeabi_ddiv+0x244>)
 8001046:	0b24      	lsrs	r4, r4, #12
 8001048:	e738      	b.n	8000ebc <__aeabi_ddiv+0xb4>
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	000007ff 	.word	0x000007ff
 8001050:	fffffc01 	.word	0xfffffc01
 8001054:	080096a8 	.word	0x080096a8
 8001058:	fffff801 	.word	0xfffff801
 800105c:	fffffc0d 	.word	0xfffffc0d
 8001060:	000003f3 	.word	0x000003f3
 8001064:	000003ff 	.word	0x000003ff
 8001068:	feffffff 	.word	0xfeffffff
 800106c:	000007fe 	.word	0x000007fe
 8001070:	4544      	cmp	r4, r8
 8001072:	d200      	bcs.n	8001076 <__aeabi_ddiv+0x26e>
 8001074:	e116      	b.n	80012a4 <__aeabi_ddiv+0x49c>
 8001076:	d100      	bne.n	800107a <__aeabi_ddiv+0x272>
 8001078:	e111      	b.n	800129e <__aeabi_ddiv+0x496>
 800107a:	2301      	movs	r3, #1
 800107c:	425b      	negs	r3, r3
 800107e:	469c      	mov	ip, r3
 8001080:	002e      	movs	r6, r5
 8001082:	4640      	mov	r0, r8
 8001084:	2500      	movs	r5, #0
 8001086:	44e3      	add	fp, ip
 8001088:	0223      	lsls	r3, r4, #8
 800108a:	0e14      	lsrs	r4, r2, #24
 800108c:	431c      	orrs	r4, r3
 800108e:	0c1b      	lsrs	r3, r3, #16
 8001090:	4699      	mov	r9, r3
 8001092:	0423      	lsls	r3, r4, #16
 8001094:	0c1f      	lsrs	r7, r3, #16
 8001096:	0212      	lsls	r2, r2, #8
 8001098:	4649      	mov	r1, r9
 800109a:	9200      	str	r2, [sp, #0]
 800109c:	9701      	str	r7, [sp, #4]
 800109e:	f7ff f8d3 	bl	8000248 <__aeabi_uidivmod>
 80010a2:	0002      	movs	r2, r0
 80010a4:	437a      	muls	r2, r7
 80010a6:	040b      	lsls	r3, r1, #16
 80010a8:	0c31      	lsrs	r1, r6, #16
 80010aa:	4680      	mov	r8, r0
 80010ac:	4319      	orrs	r1, r3
 80010ae:	428a      	cmp	r2, r1
 80010b0:	d90b      	bls.n	80010ca <__aeabi_ddiv+0x2c2>
 80010b2:	2301      	movs	r3, #1
 80010b4:	425b      	negs	r3, r3
 80010b6:	469c      	mov	ip, r3
 80010b8:	1909      	adds	r1, r1, r4
 80010ba:	44e0      	add	r8, ip
 80010bc:	428c      	cmp	r4, r1
 80010be:	d804      	bhi.n	80010ca <__aeabi_ddiv+0x2c2>
 80010c0:	428a      	cmp	r2, r1
 80010c2:	d902      	bls.n	80010ca <__aeabi_ddiv+0x2c2>
 80010c4:	1e83      	subs	r3, r0, #2
 80010c6:	4698      	mov	r8, r3
 80010c8:	1909      	adds	r1, r1, r4
 80010ca:	1a88      	subs	r0, r1, r2
 80010cc:	4649      	mov	r1, r9
 80010ce:	f7ff f8bb 	bl	8000248 <__aeabi_uidivmod>
 80010d2:	0409      	lsls	r1, r1, #16
 80010d4:	468c      	mov	ip, r1
 80010d6:	0431      	lsls	r1, r6, #16
 80010d8:	4666      	mov	r6, ip
 80010da:	9a01      	ldr	r2, [sp, #4]
 80010dc:	0c09      	lsrs	r1, r1, #16
 80010de:	4342      	muls	r2, r0
 80010e0:	0003      	movs	r3, r0
 80010e2:	4331      	orrs	r1, r6
 80010e4:	428a      	cmp	r2, r1
 80010e6:	d904      	bls.n	80010f2 <__aeabi_ddiv+0x2ea>
 80010e8:	1909      	adds	r1, r1, r4
 80010ea:	3b01      	subs	r3, #1
 80010ec:	428c      	cmp	r4, r1
 80010ee:	d800      	bhi.n	80010f2 <__aeabi_ddiv+0x2ea>
 80010f0:	e111      	b.n	8001316 <__aeabi_ddiv+0x50e>
 80010f2:	1a89      	subs	r1, r1, r2
 80010f4:	4642      	mov	r2, r8
 80010f6:	9e00      	ldr	r6, [sp, #0]
 80010f8:	0412      	lsls	r2, r2, #16
 80010fa:	431a      	orrs	r2, r3
 80010fc:	0c33      	lsrs	r3, r6, #16
 80010fe:	001f      	movs	r7, r3
 8001100:	0c10      	lsrs	r0, r2, #16
 8001102:	4690      	mov	r8, r2
 8001104:	9302      	str	r3, [sp, #8]
 8001106:	0413      	lsls	r3, r2, #16
 8001108:	0432      	lsls	r2, r6, #16
 800110a:	0c16      	lsrs	r6, r2, #16
 800110c:	0032      	movs	r2, r6
 800110e:	0c1b      	lsrs	r3, r3, #16
 8001110:	435a      	muls	r2, r3
 8001112:	9603      	str	r6, [sp, #12]
 8001114:	437b      	muls	r3, r7
 8001116:	4346      	muls	r6, r0
 8001118:	4378      	muls	r0, r7
 800111a:	0c17      	lsrs	r7, r2, #16
 800111c:	46bc      	mov	ip, r7
 800111e:	199b      	adds	r3, r3, r6
 8001120:	4463      	add	r3, ip
 8001122:	429e      	cmp	r6, r3
 8001124:	d903      	bls.n	800112e <__aeabi_ddiv+0x326>
 8001126:	2680      	movs	r6, #128	; 0x80
 8001128:	0276      	lsls	r6, r6, #9
 800112a:	46b4      	mov	ip, r6
 800112c:	4460      	add	r0, ip
 800112e:	0c1e      	lsrs	r6, r3, #16
 8001130:	1830      	adds	r0, r6, r0
 8001132:	0416      	lsls	r6, r2, #16
 8001134:	041b      	lsls	r3, r3, #16
 8001136:	0c36      	lsrs	r6, r6, #16
 8001138:	199e      	adds	r6, r3, r6
 800113a:	4281      	cmp	r1, r0
 800113c:	d200      	bcs.n	8001140 <__aeabi_ddiv+0x338>
 800113e:	e09c      	b.n	800127a <__aeabi_ddiv+0x472>
 8001140:	d100      	bne.n	8001144 <__aeabi_ddiv+0x33c>
 8001142:	e097      	b.n	8001274 <__aeabi_ddiv+0x46c>
 8001144:	1bae      	subs	r6, r5, r6
 8001146:	1a09      	subs	r1, r1, r0
 8001148:	42b5      	cmp	r5, r6
 800114a:	4180      	sbcs	r0, r0
 800114c:	4240      	negs	r0, r0
 800114e:	1a08      	subs	r0, r1, r0
 8001150:	4284      	cmp	r4, r0
 8001152:	d100      	bne.n	8001156 <__aeabi_ddiv+0x34e>
 8001154:	e111      	b.n	800137a <__aeabi_ddiv+0x572>
 8001156:	4649      	mov	r1, r9
 8001158:	f7ff f876 	bl	8000248 <__aeabi_uidivmod>
 800115c:	9a01      	ldr	r2, [sp, #4]
 800115e:	040b      	lsls	r3, r1, #16
 8001160:	4342      	muls	r2, r0
 8001162:	0c31      	lsrs	r1, r6, #16
 8001164:	0005      	movs	r5, r0
 8001166:	4319      	orrs	r1, r3
 8001168:	428a      	cmp	r2, r1
 800116a:	d907      	bls.n	800117c <__aeabi_ddiv+0x374>
 800116c:	1909      	adds	r1, r1, r4
 800116e:	3d01      	subs	r5, #1
 8001170:	428c      	cmp	r4, r1
 8001172:	d803      	bhi.n	800117c <__aeabi_ddiv+0x374>
 8001174:	428a      	cmp	r2, r1
 8001176:	d901      	bls.n	800117c <__aeabi_ddiv+0x374>
 8001178:	1e85      	subs	r5, r0, #2
 800117a:	1909      	adds	r1, r1, r4
 800117c:	1a88      	subs	r0, r1, r2
 800117e:	4649      	mov	r1, r9
 8001180:	f7ff f862 	bl	8000248 <__aeabi_uidivmod>
 8001184:	0409      	lsls	r1, r1, #16
 8001186:	468c      	mov	ip, r1
 8001188:	0431      	lsls	r1, r6, #16
 800118a:	4666      	mov	r6, ip
 800118c:	9a01      	ldr	r2, [sp, #4]
 800118e:	0c09      	lsrs	r1, r1, #16
 8001190:	4342      	muls	r2, r0
 8001192:	0003      	movs	r3, r0
 8001194:	4331      	orrs	r1, r6
 8001196:	428a      	cmp	r2, r1
 8001198:	d907      	bls.n	80011aa <__aeabi_ddiv+0x3a2>
 800119a:	1909      	adds	r1, r1, r4
 800119c:	3b01      	subs	r3, #1
 800119e:	428c      	cmp	r4, r1
 80011a0:	d803      	bhi.n	80011aa <__aeabi_ddiv+0x3a2>
 80011a2:	428a      	cmp	r2, r1
 80011a4:	d901      	bls.n	80011aa <__aeabi_ddiv+0x3a2>
 80011a6:	1e83      	subs	r3, r0, #2
 80011a8:	1909      	adds	r1, r1, r4
 80011aa:	9e03      	ldr	r6, [sp, #12]
 80011ac:	1a89      	subs	r1, r1, r2
 80011ae:	0032      	movs	r2, r6
 80011b0:	042d      	lsls	r5, r5, #16
 80011b2:	431d      	orrs	r5, r3
 80011b4:	9f02      	ldr	r7, [sp, #8]
 80011b6:	042b      	lsls	r3, r5, #16
 80011b8:	0c1b      	lsrs	r3, r3, #16
 80011ba:	435a      	muls	r2, r3
 80011bc:	437b      	muls	r3, r7
 80011be:	469c      	mov	ip, r3
 80011c0:	0c28      	lsrs	r0, r5, #16
 80011c2:	4346      	muls	r6, r0
 80011c4:	0c13      	lsrs	r3, r2, #16
 80011c6:	44b4      	add	ip, r6
 80011c8:	4463      	add	r3, ip
 80011ca:	4378      	muls	r0, r7
 80011cc:	429e      	cmp	r6, r3
 80011ce:	d903      	bls.n	80011d8 <__aeabi_ddiv+0x3d0>
 80011d0:	2680      	movs	r6, #128	; 0x80
 80011d2:	0276      	lsls	r6, r6, #9
 80011d4:	46b4      	mov	ip, r6
 80011d6:	4460      	add	r0, ip
 80011d8:	0c1e      	lsrs	r6, r3, #16
 80011da:	0412      	lsls	r2, r2, #16
 80011dc:	041b      	lsls	r3, r3, #16
 80011de:	0c12      	lsrs	r2, r2, #16
 80011e0:	1830      	adds	r0, r6, r0
 80011e2:	189b      	adds	r3, r3, r2
 80011e4:	4281      	cmp	r1, r0
 80011e6:	d306      	bcc.n	80011f6 <__aeabi_ddiv+0x3ee>
 80011e8:	d002      	beq.n	80011f0 <__aeabi_ddiv+0x3e8>
 80011ea:	2301      	movs	r3, #1
 80011ec:	431d      	orrs	r5, r3
 80011ee:	e6ce      	b.n	8000f8e <__aeabi_ddiv+0x186>
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d100      	bne.n	80011f6 <__aeabi_ddiv+0x3ee>
 80011f4:	e6cb      	b.n	8000f8e <__aeabi_ddiv+0x186>
 80011f6:	1861      	adds	r1, r4, r1
 80011f8:	1e6e      	subs	r6, r5, #1
 80011fa:	42a1      	cmp	r1, r4
 80011fc:	d200      	bcs.n	8001200 <__aeabi_ddiv+0x3f8>
 80011fe:	e0a4      	b.n	800134a <__aeabi_ddiv+0x542>
 8001200:	4281      	cmp	r1, r0
 8001202:	d200      	bcs.n	8001206 <__aeabi_ddiv+0x3fe>
 8001204:	e0c9      	b.n	800139a <__aeabi_ddiv+0x592>
 8001206:	d100      	bne.n	800120a <__aeabi_ddiv+0x402>
 8001208:	e0d9      	b.n	80013be <__aeabi_ddiv+0x5b6>
 800120a:	0035      	movs	r5, r6
 800120c:	e7ed      	b.n	80011ea <__aeabi_ddiv+0x3e2>
 800120e:	2501      	movs	r5, #1
 8001210:	426d      	negs	r5, r5
 8001212:	2101      	movs	r1, #1
 8001214:	1a89      	subs	r1, r1, r2
 8001216:	2938      	cmp	r1, #56	; 0x38
 8001218:	dd00      	ble.n	800121c <__aeabi_ddiv+0x414>
 800121a:	e64c      	b.n	8000eb6 <__aeabi_ddiv+0xae>
 800121c:	291f      	cmp	r1, #31
 800121e:	dc00      	bgt.n	8001222 <__aeabi_ddiv+0x41a>
 8001220:	e07f      	b.n	8001322 <__aeabi_ddiv+0x51a>
 8001222:	231f      	movs	r3, #31
 8001224:	425b      	negs	r3, r3
 8001226:	1a9a      	subs	r2, r3, r2
 8001228:	4643      	mov	r3, r8
 800122a:	40d3      	lsrs	r3, r2
 800122c:	2920      	cmp	r1, #32
 800122e:	d004      	beq.n	800123a <__aeabi_ddiv+0x432>
 8001230:	4644      	mov	r4, r8
 8001232:	4a65      	ldr	r2, [pc, #404]	; (80013c8 <__aeabi_ddiv+0x5c0>)
 8001234:	445a      	add	r2, fp
 8001236:	4094      	lsls	r4, r2
 8001238:	4325      	orrs	r5, r4
 800123a:	1e6a      	subs	r2, r5, #1
 800123c:	4195      	sbcs	r5, r2
 800123e:	2207      	movs	r2, #7
 8001240:	432b      	orrs	r3, r5
 8001242:	0015      	movs	r5, r2
 8001244:	2400      	movs	r4, #0
 8001246:	401d      	ands	r5, r3
 8001248:	421a      	tst	r2, r3
 800124a:	d100      	bne.n	800124e <__aeabi_ddiv+0x446>
 800124c:	e0a1      	b.n	8001392 <__aeabi_ddiv+0x58a>
 800124e:	220f      	movs	r2, #15
 8001250:	2400      	movs	r4, #0
 8001252:	401a      	ands	r2, r3
 8001254:	2a04      	cmp	r2, #4
 8001256:	d100      	bne.n	800125a <__aeabi_ddiv+0x452>
 8001258:	e098      	b.n	800138c <__aeabi_ddiv+0x584>
 800125a:	1d1a      	adds	r2, r3, #4
 800125c:	429a      	cmp	r2, r3
 800125e:	419b      	sbcs	r3, r3
 8001260:	425b      	negs	r3, r3
 8001262:	18e4      	adds	r4, r4, r3
 8001264:	0013      	movs	r3, r2
 8001266:	0222      	lsls	r2, r4, #8
 8001268:	d400      	bmi.n	800126c <__aeabi_ddiv+0x464>
 800126a:	e08f      	b.n	800138c <__aeabi_ddiv+0x584>
 800126c:	2301      	movs	r3, #1
 800126e:	2400      	movs	r4, #0
 8001270:	2500      	movs	r5, #0
 8001272:	e623      	b.n	8000ebc <__aeabi_ddiv+0xb4>
 8001274:	42b5      	cmp	r5, r6
 8001276:	d300      	bcc.n	800127a <__aeabi_ddiv+0x472>
 8001278:	e764      	b.n	8001144 <__aeabi_ddiv+0x33c>
 800127a:	4643      	mov	r3, r8
 800127c:	1e5a      	subs	r2, r3, #1
 800127e:	9b00      	ldr	r3, [sp, #0]
 8001280:	469c      	mov	ip, r3
 8001282:	4465      	add	r5, ip
 8001284:	001f      	movs	r7, r3
 8001286:	429d      	cmp	r5, r3
 8001288:	419b      	sbcs	r3, r3
 800128a:	425b      	negs	r3, r3
 800128c:	191b      	adds	r3, r3, r4
 800128e:	18c9      	adds	r1, r1, r3
 8001290:	428c      	cmp	r4, r1
 8001292:	d23a      	bcs.n	800130a <__aeabi_ddiv+0x502>
 8001294:	4288      	cmp	r0, r1
 8001296:	d863      	bhi.n	8001360 <__aeabi_ddiv+0x558>
 8001298:	d060      	beq.n	800135c <__aeabi_ddiv+0x554>
 800129a:	4690      	mov	r8, r2
 800129c:	e752      	b.n	8001144 <__aeabi_ddiv+0x33c>
 800129e:	42aa      	cmp	r2, r5
 80012a0:	d900      	bls.n	80012a4 <__aeabi_ddiv+0x49c>
 80012a2:	e6ea      	b.n	800107a <__aeabi_ddiv+0x272>
 80012a4:	4643      	mov	r3, r8
 80012a6:	07de      	lsls	r6, r3, #31
 80012a8:	0858      	lsrs	r0, r3, #1
 80012aa:	086b      	lsrs	r3, r5, #1
 80012ac:	431e      	orrs	r6, r3
 80012ae:	07ed      	lsls	r5, r5, #31
 80012b0:	e6ea      	b.n	8001088 <__aeabi_ddiv+0x280>
 80012b2:	4648      	mov	r0, r9
 80012b4:	f001 f926 	bl	8002504 <__clzsi2>
 80012b8:	0001      	movs	r1, r0
 80012ba:	0002      	movs	r2, r0
 80012bc:	3115      	adds	r1, #21
 80012be:	3220      	adds	r2, #32
 80012c0:	291c      	cmp	r1, #28
 80012c2:	dc00      	bgt.n	80012c6 <__aeabi_ddiv+0x4be>
 80012c4:	e61a      	b.n	8000efc <__aeabi_ddiv+0xf4>
 80012c6:	464b      	mov	r3, r9
 80012c8:	3808      	subs	r0, #8
 80012ca:	4083      	lsls	r3, r0
 80012cc:	2500      	movs	r5, #0
 80012ce:	4698      	mov	r8, r3
 80012d0:	e620      	b.n	8000f14 <__aeabi_ddiv+0x10c>
 80012d2:	f001 f917 	bl	8002504 <__clzsi2>
 80012d6:	0003      	movs	r3, r0
 80012d8:	001a      	movs	r2, r3
 80012da:	3215      	adds	r2, #21
 80012dc:	3020      	adds	r0, #32
 80012de:	2a1c      	cmp	r2, #28
 80012e0:	dc00      	bgt.n	80012e4 <__aeabi_ddiv+0x4dc>
 80012e2:	e630      	b.n	8000f46 <__aeabi_ddiv+0x13e>
 80012e4:	4654      	mov	r4, sl
 80012e6:	3b08      	subs	r3, #8
 80012e8:	2200      	movs	r2, #0
 80012ea:	409c      	lsls	r4, r3
 80012ec:	e635      	b.n	8000f5a <__aeabi_ddiv+0x152>
 80012ee:	230f      	movs	r3, #15
 80012f0:	402b      	ands	r3, r5
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	d100      	bne.n	80012f8 <__aeabi_ddiv+0x4f0>
 80012f6:	e652      	b.n	8000f9e <__aeabi_ddiv+0x196>
 80012f8:	2305      	movs	r3, #5
 80012fa:	425b      	negs	r3, r3
 80012fc:	42ab      	cmp	r3, r5
 80012fe:	419b      	sbcs	r3, r3
 8001300:	3504      	adds	r5, #4
 8001302:	425b      	negs	r3, r3
 8001304:	08ed      	lsrs	r5, r5, #3
 8001306:	4498      	add	r8, r3
 8001308:	e64a      	b.n	8000fa0 <__aeabi_ddiv+0x198>
 800130a:	428c      	cmp	r4, r1
 800130c:	d1c5      	bne.n	800129a <__aeabi_ddiv+0x492>
 800130e:	42af      	cmp	r7, r5
 8001310:	d9c0      	bls.n	8001294 <__aeabi_ddiv+0x48c>
 8001312:	4690      	mov	r8, r2
 8001314:	e716      	b.n	8001144 <__aeabi_ddiv+0x33c>
 8001316:	428a      	cmp	r2, r1
 8001318:	d800      	bhi.n	800131c <__aeabi_ddiv+0x514>
 800131a:	e6ea      	b.n	80010f2 <__aeabi_ddiv+0x2ea>
 800131c:	1e83      	subs	r3, r0, #2
 800131e:	1909      	adds	r1, r1, r4
 8001320:	e6e7      	b.n	80010f2 <__aeabi_ddiv+0x2ea>
 8001322:	4a2a      	ldr	r2, [pc, #168]	; (80013cc <__aeabi_ddiv+0x5c4>)
 8001324:	0028      	movs	r0, r5
 8001326:	445a      	add	r2, fp
 8001328:	4643      	mov	r3, r8
 800132a:	4095      	lsls	r5, r2
 800132c:	4093      	lsls	r3, r2
 800132e:	40c8      	lsrs	r0, r1
 8001330:	1e6a      	subs	r2, r5, #1
 8001332:	4195      	sbcs	r5, r2
 8001334:	4644      	mov	r4, r8
 8001336:	4303      	orrs	r3, r0
 8001338:	432b      	orrs	r3, r5
 800133a:	40cc      	lsrs	r4, r1
 800133c:	075a      	lsls	r2, r3, #29
 800133e:	d092      	beq.n	8001266 <__aeabi_ddiv+0x45e>
 8001340:	220f      	movs	r2, #15
 8001342:	401a      	ands	r2, r3
 8001344:	2a04      	cmp	r2, #4
 8001346:	d188      	bne.n	800125a <__aeabi_ddiv+0x452>
 8001348:	e78d      	b.n	8001266 <__aeabi_ddiv+0x45e>
 800134a:	0035      	movs	r5, r6
 800134c:	4281      	cmp	r1, r0
 800134e:	d000      	beq.n	8001352 <__aeabi_ddiv+0x54a>
 8001350:	e74b      	b.n	80011ea <__aeabi_ddiv+0x3e2>
 8001352:	9a00      	ldr	r2, [sp, #0]
 8001354:	4293      	cmp	r3, r2
 8001356:	d000      	beq.n	800135a <__aeabi_ddiv+0x552>
 8001358:	e747      	b.n	80011ea <__aeabi_ddiv+0x3e2>
 800135a:	e618      	b.n	8000f8e <__aeabi_ddiv+0x186>
 800135c:	42ae      	cmp	r6, r5
 800135e:	d99c      	bls.n	800129a <__aeabi_ddiv+0x492>
 8001360:	2302      	movs	r3, #2
 8001362:	425b      	negs	r3, r3
 8001364:	469c      	mov	ip, r3
 8001366:	9b00      	ldr	r3, [sp, #0]
 8001368:	44e0      	add	r8, ip
 800136a:	469c      	mov	ip, r3
 800136c:	4465      	add	r5, ip
 800136e:	429d      	cmp	r5, r3
 8001370:	419b      	sbcs	r3, r3
 8001372:	425b      	negs	r3, r3
 8001374:	191b      	adds	r3, r3, r4
 8001376:	18c9      	adds	r1, r1, r3
 8001378:	e6e4      	b.n	8001144 <__aeabi_ddiv+0x33c>
 800137a:	4a15      	ldr	r2, [pc, #84]	; (80013d0 <__aeabi_ddiv+0x5c8>)
 800137c:	445a      	add	r2, fp
 800137e:	2a00      	cmp	r2, #0
 8001380:	dc00      	bgt.n	8001384 <__aeabi_ddiv+0x57c>
 8001382:	e744      	b.n	800120e <__aeabi_ddiv+0x406>
 8001384:	2301      	movs	r3, #1
 8001386:	2500      	movs	r5, #0
 8001388:	4498      	add	r8, r3
 800138a:	e609      	b.n	8000fa0 <__aeabi_ddiv+0x198>
 800138c:	0765      	lsls	r5, r4, #29
 800138e:	0264      	lsls	r4, r4, #9
 8001390:	0b24      	lsrs	r4, r4, #12
 8001392:	08db      	lsrs	r3, r3, #3
 8001394:	431d      	orrs	r5, r3
 8001396:	2300      	movs	r3, #0
 8001398:	e590      	b.n	8000ebc <__aeabi_ddiv+0xb4>
 800139a:	9e00      	ldr	r6, [sp, #0]
 800139c:	3d02      	subs	r5, #2
 800139e:	0072      	lsls	r2, r6, #1
 80013a0:	42b2      	cmp	r2, r6
 80013a2:	41bf      	sbcs	r7, r7
 80013a4:	427f      	negs	r7, r7
 80013a6:	193c      	adds	r4, r7, r4
 80013a8:	1909      	adds	r1, r1, r4
 80013aa:	9200      	str	r2, [sp, #0]
 80013ac:	e7ce      	b.n	800134c <__aeabi_ddiv+0x544>
 80013ae:	2480      	movs	r4, #128	; 0x80
 80013b0:	4643      	mov	r3, r8
 80013b2:	0324      	lsls	r4, r4, #12
 80013b4:	431c      	orrs	r4, r3
 80013b6:	0324      	lsls	r4, r4, #12
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <__aeabi_ddiv+0x5cc>)
 80013ba:	0b24      	lsrs	r4, r4, #12
 80013bc:	e57e      	b.n	8000ebc <__aeabi_ddiv+0xb4>
 80013be:	9a00      	ldr	r2, [sp, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d3ea      	bcc.n	800139a <__aeabi_ddiv+0x592>
 80013c4:	0035      	movs	r5, r6
 80013c6:	e7c4      	b.n	8001352 <__aeabi_ddiv+0x54a>
 80013c8:	0000043e 	.word	0x0000043e
 80013cc:	0000041e 	.word	0x0000041e
 80013d0:	000003ff 	.word	0x000003ff
 80013d4:	000007ff 	.word	0x000007ff

080013d8 <__eqdf2>:
 80013d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013da:	464f      	mov	r7, r9
 80013dc:	4646      	mov	r6, r8
 80013de:	46d6      	mov	lr, sl
 80013e0:	4694      	mov	ip, r2
 80013e2:	4691      	mov	r9, r2
 80013e4:	031a      	lsls	r2, r3, #12
 80013e6:	0b12      	lsrs	r2, r2, #12
 80013e8:	4d18      	ldr	r5, [pc, #96]	; (800144c <__eqdf2+0x74>)
 80013ea:	b5c0      	push	{r6, r7, lr}
 80013ec:	004c      	lsls	r4, r1, #1
 80013ee:	030f      	lsls	r7, r1, #12
 80013f0:	4692      	mov	sl, r2
 80013f2:	005a      	lsls	r2, r3, #1
 80013f4:	0006      	movs	r6, r0
 80013f6:	4680      	mov	r8, r0
 80013f8:	0b3f      	lsrs	r7, r7, #12
 80013fa:	2001      	movs	r0, #1
 80013fc:	0d64      	lsrs	r4, r4, #21
 80013fe:	0fc9      	lsrs	r1, r1, #31
 8001400:	0d52      	lsrs	r2, r2, #21
 8001402:	0fdb      	lsrs	r3, r3, #31
 8001404:	42ac      	cmp	r4, r5
 8001406:	d00a      	beq.n	800141e <__eqdf2+0x46>
 8001408:	42aa      	cmp	r2, r5
 800140a:	d003      	beq.n	8001414 <__eqdf2+0x3c>
 800140c:	4294      	cmp	r4, r2
 800140e:	d101      	bne.n	8001414 <__eqdf2+0x3c>
 8001410:	4557      	cmp	r7, sl
 8001412:	d00d      	beq.n	8001430 <__eqdf2+0x58>
 8001414:	bce0      	pop	{r5, r6, r7}
 8001416:	46ba      	mov	sl, r7
 8001418:	46b1      	mov	r9, r6
 800141a:	46a8      	mov	r8, r5
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141e:	003d      	movs	r5, r7
 8001420:	4335      	orrs	r5, r6
 8001422:	d1f7      	bne.n	8001414 <__eqdf2+0x3c>
 8001424:	42a2      	cmp	r2, r4
 8001426:	d1f5      	bne.n	8001414 <__eqdf2+0x3c>
 8001428:	4652      	mov	r2, sl
 800142a:	4665      	mov	r5, ip
 800142c:	432a      	orrs	r2, r5
 800142e:	d1f1      	bne.n	8001414 <__eqdf2+0x3c>
 8001430:	2001      	movs	r0, #1
 8001432:	45c8      	cmp	r8, r9
 8001434:	d1ee      	bne.n	8001414 <__eqdf2+0x3c>
 8001436:	4299      	cmp	r1, r3
 8001438:	d006      	beq.n	8001448 <__eqdf2+0x70>
 800143a:	2c00      	cmp	r4, #0
 800143c:	d1ea      	bne.n	8001414 <__eqdf2+0x3c>
 800143e:	433e      	orrs	r6, r7
 8001440:	0030      	movs	r0, r6
 8001442:	1e46      	subs	r6, r0, #1
 8001444:	41b0      	sbcs	r0, r6
 8001446:	e7e5      	b.n	8001414 <__eqdf2+0x3c>
 8001448:	2000      	movs	r0, #0
 800144a:	e7e3      	b.n	8001414 <__eqdf2+0x3c>
 800144c:	000007ff 	.word	0x000007ff

08001450 <__gedf2>:
 8001450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001452:	464e      	mov	r6, r9
 8001454:	4645      	mov	r5, r8
 8001456:	4657      	mov	r7, sl
 8001458:	46de      	mov	lr, fp
 800145a:	0004      	movs	r4, r0
 800145c:	0018      	movs	r0, r3
 800145e:	b5e0      	push	{r5, r6, r7, lr}
 8001460:	0016      	movs	r6, r2
 8001462:	031b      	lsls	r3, r3, #12
 8001464:	0b1b      	lsrs	r3, r3, #12
 8001466:	4d32      	ldr	r5, [pc, #200]	; (8001530 <__gedf2+0xe0>)
 8001468:	030f      	lsls	r7, r1, #12
 800146a:	004a      	lsls	r2, r1, #1
 800146c:	4699      	mov	r9, r3
 800146e:	0043      	lsls	r3, r0, #1
 8001470:	46a4      	mov	ip, r4
 8001472:	46b0      	mov	r8, r6
 8001474:	0b3f      	lsrs	r7, r7, #12
 8001476:	0d52      	lsrs	r2, r2, #21
 8001478:	0fc9      	lsrs	r1, r1, #31
 800147a:	0d5b      	lsrs	r3, r3, #21
 800147c:	0fc0      	lsrs	r0, r0, #31
 800147e:	42aa      	cmp	r2, r5
 8001480:	d029      	beq.n	80014d6 <__gedf2+0x86>
 8001482:	42ab      	cmp	r3, r5
 8001484:	d018      	beq.n	80014b8 <__gedf2+0x68>
 8001486:	2a00      	cmp	r2, #0
 8001488:	d12a      	bne.n	80014e0 <__gedf2+0x90>
 800148a:	433c      	orrs	r4, r7
 800148c:	46a3      	mov	fp, r4
 800148e:	4265      	negs	r5, r4
 8001490:	4165      	adcs	r5, r4
 8001492:	2b00      	cmp	r3, #0
 8001494:	d102      	bne.n	800149c <__gedf2+0x4c>
 8001496:	464c      	mov	r4, r9
 8001498:	4326      	orrs	r6, r4
 800149a:	d027      	beq.n	80014ec <__gedf2+0x9c>
 800149c:	2d00      	cmp	r5, #0
 800149e:	d115      	bne.n	80014cc <__gedf2+0x7c>
 80014a0:	4281      	cmp	r1, r0
 80014a2:	d028      	beq.n	80014f6 <__gedf2+0xa6>
 80014a4:	2002      	movs	r0, #2
 80014a6:	3901      	subs	r1, #1
 80014a8:	4008      	ands	r0, r1
 80014aa:	3801      	subs	r0, #1
 80014ac:	bcf0      	pop	{r4, r5, r6, r7}
 80014ae:	46bb      	mov	fp, r7
 80014b0:	46b2      	mov	sl, r6
 80014b2:	46a9      	mov	r9, r5
 80014b4:	46a0      	mov	r8, r4
 80014b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b8:	464d      	mov	r5, r9
 80014ba:	432e      	orrs	r6, r5
 80014bc:	d12f      	bne.n	800151e <__gedf2+0xce>
 80014be:	2a00      	cmp	r2, #0
 80014c0:	d1ee      	bne.n	80014a0 <__gedf2+0x50>
 80014c2:	433c      	orrs	r4, r7
 80014c4:	4265      	negs	r5, r4
 80014c6:	4165      	adcs	r5, r4
 80014c8:	2d00      	cmp	r5, #0
 80014ca:	d0e9      	beq.n	80014a0 <__gedf2+0x50>
 80014cc:	2800      	cmp	r0, #0
 80014ce:	d1ed      	bne.n	80014ac <__gedf2+0x5c>
 80014d0:	2001      	movs	r0, #1
 80014d2:	4240      	negs	r0, r0
 80014d4:	e7ea      	b.n	80014ac <__gedf2+0x5c>
 80014d6:	003d      	movs	r5, r7
 80014d8:	4325      	orrs	r5, r4
 80014da:	d120      	bne.n	800151e <__gedf2+0xce>
 80014dc:	4293      	cmp	r3, r2
 80014de:	d0eb      	beq.n	80014b8 <__gedf2+0x68>
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1dd      	bne.n	80014a0 <__gedf2+0x50>
 80014e4:	464c      	mov	r4, r9
 80014e6:	4326      	orrs	r6, r4
 80014e8:	d1da      	bne.n	80014a0 <__gedf2+0x50>
 80014ea:	e7db      	b.n	80014a4 <__gedf2+0x54>
 80014ec:	465b      	mov	r3, fp
 80014ee:	2000      	movs	r0, #0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0db      	beq.n	80014ac <__gedf2+0x5c>
 80014f4:	e7d6      	b.n	80014a4 <__gedf2+0x54>
 80014f6:	429a      	cmp	r2, r3
 80014f8:	dc0a      	bgt.n	8001510 <__gedf2+0xc0>
 80014fa:	dbe7      	blt.n	80014cc <__gedf2+0x7c>
 80014fc:	454f      	cmp	r7, r9
 80014fe:	d8d1      	bhi.n	80014a4 <__gedf2+0x54>
 8001500:	d010      	beq.n	8001524 <__gedf2+0xd4>
 8001502:	2000      	movs	r0, #0
 8001504:	454f      	cmp	r7, r9
 8001506:	d2d1      	bcs.n	80014ac <__gedf2+0x5c>
 8001508:	2900      	cmp	r1, #0
 800150a:	d0e1      	beq.n	80014d0 <__gedf2+0x80>
 800150c:	0008      	movs	r0, r1
 800150e:	e7cd      	b.n	80014ac <__gedf2+0x5c>
 8001510:	4243      	negs	r3, r0
 8001512:	4158      	adcs	r0, r3
 8001514:	2302      	movs	r3, #2
 8001516:	4240      	negs	r0, r0
 8001518:	4018      	ands	r0, r3
 800151a:	3801      	subs	r0, #1
 800151c:	e7c6      	b.n	80014ac <__gedf2+0x5c>
 800151e:	2002      	movs	r0, #2
 8001520:	4240      	negs	r0, r0
 8001522:	e7c3      	b.n	80014ac <__gedf2+0x5c>
 8001524:	45c4      	cmp	ip, r8
 8001526:	d8bd      	bhi.n	80014a4 <__gedf2+0x54>
 8001528:	2000      	movs	r0, #0
 800152a:	45c4      	cmp	ip, r8
 800152c:	d2be      	bcs.n	80014ac <__gedf2+0x5c>
 800152e:	e7eb      	b.n	8001508 <__gedf2+0xb8>
 8001530:	000007ff 	.word	0x000007ff

08001534 <__ledf2>:
 8001534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001536:	464e      	mov	r6, r9
 8001538:	4645      	mov	r5, r8
 800153a:	4657      	mov	r7, sl
 800153c:	46de      	mov	lr, fp
 800153e:	0004      	movs	r4, r0
 8001540:	0018      	movs	r0, r3
 8001542:	b5e0      	push	{r5, r6, r7, lr}
 8001544:	0016      	movs	r6, r2
 8001546:	031b      	lsls	r3, r3, #12
 8001548:	0b1b      	lsrs	r3, r3, #12
 800154a:	4d31      	ldr	r5, [pc, #196]	; (8001610 <__ledf2+0xdc>)
 800154c:	030f      	lsls	r7, r1, #12
 800154e:	004a      	lsls	r2, r1, #1
 8001550:	4699      	mov	r9, r3
 8001552:	0043      	lsls	r3, r0, #1
 8001554:	46a4      	mov	ip, r4
 8001556:	46b0      	mov	r8, r6
 8001558:	0b3f      	lsrs	r7, r7, #12
 800155a:	0d52      	lsrs	r2, r2, #21
 800155c:	0fc9      	lsrs	r1, r1, #31
 800155e:	0d5b      	lsrs	r3, r3, #21
 8001560:	0fc0      	lsrs	r0, r0, #31
 8001562:	42aa      	cmp	r2, r5
 8001564:	d011      	beq.n	800158a <__ledf2+0x56>
 8001566:	42ab      	cmp	r3, r5
 8001568:	d014      	beq.n	8001594 <__ledf2+0x60>
 800156a:	2a00      	cmp	r2, #0
 800156c:	d12f      	bne.n	80015ce <__ledf2+0x9a>
 800156e:	433c      	orrs	r4, r7
 8001570:	46a3      	mov	fp, r4
 8001572:	4265      	negs	r5, r4
 8001574:	4165      	adcs	r5, r4
 8001576:	2b00      	cmp	r3, #0
 8001578:	d114      	bne.n	80015a4 <__ledf2+0x70>
 800157a:	464c      	mov	r4, r9
 800157c:	4326      	orrs	r6, r4
 800157e:	d111      	bne.n	80015a4 <__ledf2+0x70>
 8001580:	465b      	mov	r3, fp
 8001582:	2000      	movs	r0, #0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d017      	beq.n	80015b8 <__ledf2+0x84>
 8001588:	e010      	b.n	80015ac <__ledf2+0x78>
 800158a:	003d      	movs	r5, r7
 800158c:	4325      	orrs	r5, r4
 800158e:	d112      	bne.n	80015b6 <__ledf2+0x82>
 8001590:	4293      	cmp	r3, r2
 8001592:	d11c      	bne.n	80015ce <__ledf2+0x9a>
 8001594:	464d      	mov	r5, r9
 8001596:	432e      	orrs	r6, r5
 8001598:	d10d      	bne.n	80015b6 <__ledf2+0x82>
 800159a:	2a00      	cmp	r2, #0
 800159c:	d104      	bne.n	80015a8 <__ledf2+0x74>
 800159e:	433c      	orrs	r4, r7
 80015a0:	4265      	negs	r5, r4
 80015a2:	4165      	adcs	r5, r4
 80015a4:	2d00      	cmp	r5, #0
 80015a6:	d10d      	bne.n	80015c4 <__ledf2+0x90>
 80015a8:	4281      	cmp	r1, r0
 80015aa:	d016      	beq.n	80015da <__ledf2+0xa6>
 80015ac:	2002      	movs	r0, #2
 80015ae:	3901      	subs	r1, #1
 80015b0:	4008      	ands	r0, r1
 80015b2:	3801      	subs	r0, #1
 80015b4:	e000      	b.n	80015b8 <__ledf2+0x84>
 80015b6:	2002      	movs	r0, #2
 80015b8:	bcf0      	pop	{r4, r5, r6, r7}
 80015ba:	46bb      	mov	fp, r7
 80015bc:	46b2      	mov	sl, r6
 80015be:	46a9      	mov	r9, r5
 80015c0:	46a0      	mov	r8, r4
 80015c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d1f7      	bne.n	80015b8 <__ledf2+0x84>
 80015c8:	2001      	movs	r0, #1
 80015ca:	4240      	negs	r0, r0
 80015cc:	e7f4      	b.n	80015b8 <__ledf2+0x84>
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1ea      	bne.n	80015a8 <__ledf2+0x74>
 80015d2:	464c      	mov	r4, r9
 80015d4:	4326      	orrs	r6, r4
 80015d6:	d1e7      	bne.n	80015a8 <__ledf2+0x74>
 80015d8:	e7e8      	b.n	80015ac <__ledf2+0x78>
 80015da:	429a      	cmp	r2, r3
 80015dc:	dd06      	ble.n	80015ec <__ledf2+0xb8>
 80015de:	4243      	negs	r3, r0
 80015e0:	4158      	adcs	r0, r3
 80015e2:	2302      	movs	r3, #2
 80015e4:	4240      	negs	r0, r0
 80015e6:	4018      	ands	r0, r3
 80015e8:	3801      	subs	r0, #1
 80015ea:	e7e5      	b.n	80015b8 <__ledf2+0x84>
 80015ec:	429a      	cmp	r2, r3
 80015ee:	dbe9      	blt.n	80015c4 <__ledf2+0x90>
 80015f0:	454f      	cmp	r7, r9
 80015f2:	d8db      	bhi.n	80015ac <__ledf2+0x78>
 80015f4:	d006      	beq.n	8001604 <__ledf2+0xd0>
 80015f6:	2000      	movs	r0, #0
 80015f8:	454f      	cmp	r7, r9
 80015fa:	d2dd      	bcs.n	80015b8 <__ledf2+0x84>
 80015fc:	2900      	cmp	r1, #0
 80015fe:	d0e3      	beq.n	80015c8 <__ledf2+0x94>
 8001600:	0008      	movs	r0, r1
 8001602:	e7d9      	b.n	80015b8 <__ledf2+0x84>
 8001604:	45c4      	cmp	ip, r8
 8001606:	d8d1      	bhi.n	80015ac <__ledf2+0x78>
 8001608:	2000      	movs	r0, #0
 800160a:	45c4      	cmp	ip, r8
 800160c:	d2d4      	bcs.n	80015b8 <__ledf2+0x84>
 800160e:	e7f5      	b.n	80015fc <__ledf2+0xc8>
 8001610:	000007ff 	.word	0x000007ff

08001614 <__aeabi_dmul>:
 8001614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001616:	4657      	mov	r7, sl
 8001618:	464e      	mov	r6, r9
 800161a:	4645      	mov	r5, r8
 800161c:	46de      	mov	lr, fp
 800161e:	b5e0      	push	{r5, r6, r7, lr}
 8001620:	4698      	mov	r8, r3
 8001622:	030c      	lsls	r4, r1, #12
 8001624:	004b      	lsls	r3, r1, #1
 8001626:	0006      	movs	r6, r0
 8001628:	4692      	mov	sl, r2
 800162a:	b087      	sub	sp, #28
 800162c:	0b24      	lsrs	r4, r4, #12
 800162e:	0d5b      	lsrs	r3, r3, #21
 8001630:	0fcf      	lsrs	r7, r1, #31
 8001632:	2b00      	cmp	r3, #0
 8001634:	d06c      	beq.n	8001710 <__aeabi_dmul+0xfc>
 8001636:	4add      	ldr	r2, [pc, #884]	; (80019ac <__aeabi_dmul+0x398>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d100      	bne.n	800163e <__aeabi_dmul+0x2a>
 800163c:	e086      	b.n	800174c <__aeabi_dmul+0x138>
 800163e:	0f42      	lsrs	r2, r0, #29
 8001640:	00e4      	lsls	r4, r4, #3
 8001642:	4314      	orrs	r4, r2
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	0412      	lsls	r2, r2, #16
 8001648:	4314      	orrs	r4, r2
 800164a:	4ad9      	ldr	r2, [pc, #868]	; (80019b0 <__aeabi_dmul+0x39c>)
 800164c:	00c5      	lsls	r5, r0, #3
 800164e:	4694      	mov	ip, r2
 8001650:	4463      	add	r3, ip
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2300      	movs	r3, #0
 8001656:	4699      	mov	r9, r3
 8001658:	469b      	mov	fp, r3
 800165a:	4643      	mov	r3, r8
 800165c:	4642      	mov	r2, r8
 800165e:	031e      	lsls	r6, r3, #12
 8001660:	0fd2      	lsrs	r2, r2, #31
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4650      	mov	r0, sl
 8001666:	4690      	mov	r8, r2
 8001668:	0b36      	lsrs	r6, r6, #12
 800166a:	0d5b      	lsrs	r3, r3, #21
 800166c:	d100      	bne.n	8001670 <__aeabi_dmul+0x5c>
 800166e:	e078      	b.n	8001762 <__aeabi_dmul+0x14e>
 8001670:	4ace      	ldr	r2, [pc, #824]	; (80019ac <__aeabi_dmul+0x398>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d01d      	beq.n	80016b2 <__aeabi_dmul+0x9e>
 8001676:	49ce      	ldr	r1, [pc, #824]	; (80019b0 <__aeabi_dmul+0x39c>)
 8001678:	0f42      	lsrs	r2, r0, #29
 800167a:	468c      	mov	ip, r1
 800167c:	9900      	ldr	r1, [sp, #0]
 800167e:	4463      	add	r3, ip
 8001680:	00f6      	lsls	r6, r6, #3
 8001682:	468c      	mov	ip, r1
 8001684:	4316      	orrs	r6, r2
 8001686:	2280      	movs	r2, #128	; 0x80
 8001688:	449c      	add	ip, r3
 800168a:	0412      	lsls	r2, r2, #16
 800168c:	4663      	mov	r3, ip
 800168e:	4316      	orrs	r6, r2
 8001690:	00c2      	lsls	r2, r0, #3
 8001692:	2000      	movs	r0, #0
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	9900      	ldr	r1, [sp, #0]
 8001698:	4643      	mov	r3, r8
 800169a:	3101      	adds	r1, #1
 800169c:	468c      	mov	ip, r1
 800169e:	4649      	mov	r1, r9
 80016a0:	407b      	eors	r3, r7
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	290f      	cmp	r1, #15
 80016a6:	d900      	bls.n	80016aa <__aeabi_dmul+0x96>
 80016a8:	e07e      	b.n	80017a8 <__aeabi_dmul+0x194>
 80016aa:	4bc2      	ldr	r3, [pc, #776]	; (80019b4 <__aeabi_dmul+0x3a0>)
 80016ac:	0089      	lsls	r1, r1, #2
 80016ae:	5859      	ldr	r1, [r3, r1]
 80016b0:	468f      	mov	pc, r1
 80016b2:	4652      	mov	r2, sl
 80016b4:	9b00      	ldr	r3, [sp, #0]
 80016b6:	4332      	orrs	r2, r6
 80016b8:	d000      	beq.n	80016bc <__aeabi_dmul+0xa8>
 80016ba:	e156      	b.n	800196a <__aeabi_dmul+0x356>
 80016bc:	49bb      	ldr	r1, [pc, #748]	; (80019ac <__aeabi_dmul+0x398>)
 80016be:	2600      	movs	r6, #0
 80016c0:	468c      	mov	ip, r1
 80016c2:	4463      	add	r3, ip
 80016c4:	4649      	mov	r1, r9
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2302      	movs	r3, #2
 80016ca:	4319      	orrs	r1, r3
 80016cc:	4689      	mov	r9, r1
 80016ce:	2002      	movs	r0, #2
 80016d0:	e7e1      	b.n	8001696 <__aeabi_dmul+0x82>
 80016d2:	4643      	mov	r3, r8
 80016d4:	9301      	str	r3, [sp, #4]
 80016d6:	0034      	movs	r4, r6
 80016d8:	0015      	movs	r5, r2
 80016da:	4683      	mov	fp, r0
 80016dc:	465b      	mov	r3, fp
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d05e      	beq.n	80017a0 <__aeabi_dmul+0x18c>
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d100      	bne.n	80016e8 <__aeabi_dmul+0xd4>
 80016e6:	e1f3      	b.n	8001ad0 <__aeabi_dmul+0x4bc>
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d000      	beq.n	80016ee <__aeabi_dmul+0xda>
 80016ec:	e118      	b.n	8001920 <__aeabi_dmul+0x30c>
 80016ee:	2200      	movs	r2, #0
 80016f0:	2400      	movs	r4, #0
 80016f2:	2500      	movs	r5, #0
 80016f4:	9b01      	ldr	r3, [sp, #4]
 80016f6:	0512      	lsls	r2, r2, #20
 80016f8:	4322      	orrs	r2, r4
 80016fa:	07db      	lsls	r3, r3, #31
 80016fc:	431a      	orrs	r2, r3
 80016fe:	0028      	movs	r0, r5
 8001700:	0011      	movs	r1, r2
 8001702:	b007      	add	sp, #28
 8001704:	bcf0      	pop	{r4, r5, r6, r7}
 8001706:	46bb      	mov	fp, r7
 8001708:	46b2      	mov	sl, r6
 800170a:	46a9      	mov	r9, r5
 800170c:	46a0      	mov	r8, r4
 800170e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001710:	0025      	movs	r5, r4
 8001712:	4305      	orrs	r5, r0
 8001714:	d100      	bne.n	8001718 <__aeabi_dmul+0x104>
 8001716:	e141      	b.n	800199c <__aeabi_dmul+0x388>
 8001718:	2c00      	cmp	r4, #0
 800171a:	d100      	bne.n	800171e <__aeabi_dmul+0x10a>
 800171c:	e1ad      	b.n	8001a7a <__aeabi_dmul+0x466>
 800171e:	0020      	movs	r0, r4
 8001720:	f000 fef0 	bl	8002504 <__clzsi2>
 8001724:	0001      	movs	r1, r0
 8001726:	0002      	movs	r2, r0
 8001728:	390b      	subs	r1, #11
 800172a:	231d      	movs	r3, #29
 800172c:	0010      	movs	r0, r2
 800172e:	1a5b      	subs	r3, r3, r1
 8001730:	0031      	movs	r1, r6
 8001732:	0035      	movs	r5, r6
 8001734:	3808      	subs	r0, #8
 8001736:	4084      	lsls	r4, r0
 8001738:	40d9      	lsrs	r1, r3
 800173a:	4085      	lsls	r5, r0
 800173c:	430c      	orrs	r4, r1
 800173e:	489e      	ldr	r0, [pc, #632]	; (80019b8 <__aeabi_dmul+0x3a4>)
 8001740:	1a83      	subs	r3, r0, r2
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	2300      	movs	r3, #0
 8001746:	4699      	mov	r9, r3
 8001748:	469b      	mov	fp, r3
 800174a:	e786      	b.n	800165a <__aeabi_dmul+0x46>
 800174c:	0005      	movs	r5, r0
 800174e:	4325      	orrs	r5, r4
 8001750:	d000      	beq.n	8001754 <__aeabi_dmul+0x140>
 8001752:	e11c      	b.n	800198e <__aeabi_dmul+0x37a>
 8001754:	2208      	movs	r2, #8
 8001756:	9300      	str	r3, [sp, #0]
 8001758:	2302      	movs	r3, #2
 800175a:	2400      	movs	r4, #0
 800175c:	4691      	mov	r9, r2
 800175e:	469b      	mov	fp, r3
 8001760:	e77b      	b.n	800165a <__aeabi_dmul+0x46>
 8001762:	4652      	mov	r2, sl
 8001764:	4332      	orrs	r2, r6
 8001766:	d100      	bne.n	800176a <__aeabi_dmul+0x156>
 8001768:	e10a      	b.n	8001980 <__aeabi_dmul+0x36c>
 800176a:	2e00      	cmp	r6, #0
 800176c:	d100      	bne.n	8001770 <__aeabi_dmul+0x15c>
 800176e:	e176      	b.n	8001a5e <__aeabi_dmul+0x44a>
 8001770:	0030      	movs	r0, r6
 8001772:	f000 fec7 	bl	8002504 <__clzsi2>
 8001776:	0002      	movs	r2, r0
 8001778:	3a0b      	subs	r2, #11
 800177a:	231d      	movs	r3, #29
 800177c:	0001      	movs	r1, r0
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	4652      	mov	r2, sl
 8001782:	3908      	subs	r1, #8
 8001784:	40da      	lsrs	r2, r3
 8001786:	408e      	lsls	r6, r1
 8001788:	4316      	orrs	r6, r2
 800178a:	4652      	mov	r2, sl
 800178c:	408a      	lsls	r2, r1
 800178e:	9b00      	ldr	r3, [sp, #0]
 8001790:	4989      	ldr	r1, [pc, #548]	; (80019b8 <__aeabi_dmul+0x3a4>)
 8001792:	1a18      	subs	r0, r3, r0
 8001794:	0003      	movs	r3, r0
 8001796:	468c      	mov	ip, r1
 8001798:	4463      	add	r3, ip
 800179a:	2000      	movs	r0, #0
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	e77a      	b.n	8001696 <__aeabi_dmul+0x82>
 80017a0:	2400      	movs	r4, #0
 80017a2:	2500      	movs	r5, #0
 80017a4:	4a81      	ldr	r2, [pc, #516]	; (80019ac <__aeabi_dmul+0x398>)
 80017a6:	e7a5      	b.n	80016f4 <__aeabi_dmul+0xe0>
 80017a8:	0c2f      	lsrs	r7, r5, #16
 80017aa:	042d      	lsls	r5, r5, #16
 80017ac:	0c2d      	lsrs	r5, r5, #16
 80017ae:	002b      	movs	r3, r5
 80017b0:	0c11      	lsrs	r1, r2, #16
 80017b2:	0412      	lsls	r2, r2, #16
 80017b4:	0c12      	lsrs	r2, r2, #16
 80017b6:	4353      	muls	r3, r2
 80017b8:	4698      	mov	r8, r3
 80017ba:	0013      	movs	r3, r2
 80017bc:	0028      	movs	r0, r5
 80017be:	437b      	muls	r3, r7
 80017c0:	4699      	mov	r9, r3
 80017c2:	4348      	muls	r0, r1
 80017c4:	4448      	add	r0, r9
 80017c6:	4683      	mov	fp, r0
 80017c8:	4640      	mov	r0, r8
 80017ca:	000b      	movs	r3, r1
 80017cc:	0c00      	lsrs	r0, r0, #16
 80017ce:	4682      	mov	sl, r0
 80017d0:	4658      	mov	r0, fp
 80017d2:	437b      	muls	r3, r7
 80017d4:	4450      	add	r0, sl
 80017d6:	9302      	str	r3, [sp, #8]
 80017d8:	4581      	cmp	r9, r0
 80017da:	d906      	bls.n	80017ea <__aeabi_dmul+0x1d6>
 80017dc:	469a      	mov	sl, r3
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	025b      	lsls	r3, r3, #9
 80017e2:	4699      	mov	r9, r3
 80017e4:	44ca      	add	sl, r9
 80017e6:	4653      	mov	r3, sl
 80017e8:	9302      	str	r3, [sp, #8]
 80017ea:	0c03      	lsrs	r3, r0, #16
 80017ec:	469b      	mov	fp, r3
 80017ee:	4643      	mov	r3, r8
 80017f0:	041b      	lsls	r3, r3, #16
 80017f2:	0400      	lsls	r0, r0, #16
 80017f4:	0c1b      	lsrs	r3, r3, #16
 80017f6:	4698      	mov	r8, r3
 80017f8:	0003      	movs	r3, r0
 80017fa:	4443      	add	r3, r8
 80017fc:	9304      	str	r3, [sp, #16]
 80017fe:	0c33      	lsrs	r3, r6, #16
 8001800:	4699      	mov	r9, r3
 8001802:	002b      	movs	r3, r5
 8001804:	0436      	lsls	r6, r6, #16
 8001806:	0c36      	lsrs	r6, r6, #16
 8001808:	4373      	muls	r3, r6
 800180a:	4698      	mov	r8, r3
 800180c:	0033      	movs	r3, r6
 800180e:	437b      	muls	r3, r7
 8001810:	469a      	mov	sl, r3
 8001812:	464b      	mov	r3, r9
 8001814:	435d      	muls	r5, r3
 8001816:	435f      	muls	r7, r3
 8001818:	4643      	mov	r3, r8
 800181a:	4455      	add	r5, sl
 800181c:	0c18      	lsrs	r0, r3, #16
 800181e:	1940      	adds	r0, r0, r5
 8001820:	4582      	cmp	sl, r0
 8001822:	d903      	bls.n	800182c <__aeabi_dmul+0x218>
 8001824:	2380      	movs	r3, #128	; 0x80
 8001826:	025b      	lsls	r3, r3, #9
 8001828:	469a      	mov	sl, r3
 800182a:	4457      	add	r7, sl
 800182c:	0c05      	lsrs	r5, r0, #16
 800182e:	19eb      	adds	r3, r5, r7
 8001830:	9305      	str	r3, [sp, #20]
 8001832:	4643      	mov	r3, r8
 8001834:	041d      	lsls	r5, r3, #16
 8001836:	0c2d      	lsrs	r5, r5, #16
 8001838:	0400      	lsls	r0, r0, #16
 800183a:	1940      	adds	r0, r0, r5
 800183c:	0c25      	lsrs	r5, r4, #16
 800183e:	0424      	lsls	r4, r4, #16
 8001840:	0c24      	lsrs	r4, r4, #16
 8001842:	0027      	movs	r7, r4
 8001844:	4357      	muls	r7, r2
 8001846:	436a      	muls	r2, r5
 8001848:	4690      	mov	r8, r2
 800184a:	002a      	movs	r2, r5
 800184c:	0c3b      	lsrs	r3, r7, #16
 800184e:	469a      	mov	sl, r3
 8001850:	434a      	muls	r2, r1
 8001852:	4361      	muls	r1, r4
 8001854:	4441      	add	r1, r8
 8001856:	4451      	add	r1, sl
 8001858:	4483      	add	fp, r0
 800185a:	4588      	cmp	r8, r1
 800185c:	d903      	bls.n	8001866 <__aeabi_dmul+0x252>
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	025b      	lsls	r3, r3, #9
 8001862:	4698      	mov	r8, r3
 8001864:	4442      	add	r2, r8
 8001866:	043f      	lsls	r7, r7, #16
 8001868:	0c0b      	lsrs	r3, r1, #16
 800186a:	0c3f      	lsrs	r7, r7, #16
 800186c:	0409      	lsls	r1, r1, #16
 800186e:	19c9      	adds	r1, r1, r7
 8001870:	0027      	movs	r7, r4
 8001872:	4698      	mov	r8, r3
 8001874:	464b      	mov	r3, r9
 8001876:	4377      	muls	r7, r6
 8001878:	435c      	muls	r4, r3
 800187a:	436e      	muls	r6, r5
 800187c:	435d      	muls	r5, r3
 800187e:	0c3b      	lsrs	r3, r7, #16
 8001880:	4699      	mov	r9, r3
 8001882:	19a4      	adds	r4, r4, r6
 8001884:	444c      	add	r4, r9
 8001886:	4442      	add	r2, r8
 8001888:	9503      	str	r5, [sp, #12]
 800188a:	42a6      	cmp	r6, r4
 800188c:	d904      	bls.n	8001898 <__aeabi_dmul+0x284>
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	025b      	lsls	r3, r3, #9
 8001892:	4698      	mov	r8, r3
 8001894:	4445      	add	r5, r8
 8001896:	9503      	str	r5, [sp, #12]
 8001898:	9b02      	ldr	r3, [sp, #8]
 800189a:	043f      	lsls	r7, r7, #16
 800189c:	445b      	add	r3, fp
 800189e:	001e      	movs	r6, r3
 80018a0:	4283      	cmp	r3, r0
 80018a2:	4180      	sbcs	r0, r0
 80018a4:	0423      	lsls	r3, r4, #16
 80018a6:	4698      	mov	r8, r3
 80018a8:	9b05      	ldr	r3, [sp, #20]
 80018aa:	0c3f      	lsrs	r7, r7, #16
 80018ac:	4447      	add	r7, r8
 80018ae:	4698      	mov	r8, r3
 80018b0:	1876      	adds	r6, r6, r1
 80018b2:	428e      	cmp	r6, r1
 80018b4:	4189      	sbcs	r1, r1
 80018b6:	4447      	add	r7, r8
 80018b8:	4240      	negs	r0, r0
 80018ba:	183d      	adds	r5, r7, r0
 80018bc:	46a8      	mov	r8, r5
 80018be:	4693      	mov	fp, r2
 80018c0:	4249      	negs	r1, r1
 80018c2:	468a      	mov	sl, r1
 80018c4:	44c3      	add	fp, r8
 80018c6:	429f      	cmp	r7, r3
 80018c8:	41bf      	sbcs	r7, r7
 80018ca:	4580      	cmp	r8, r0
 80018cc:	4180      	sbcs	r0, r0
 80018ce:	9b03      	ldr	r3, [sp, #12]
 80018d0:	44da      	add	sl, fp
 80018d2:	4698      	mov	r8, r3
 80018d4:	4653      	mov	r3, sl
 80018d6:	4240      	negs	r0, r0
 80018d8:	427f      	negs	r7, r7
 80018da:	4307      	orrs	r7, r0
 80018dc:	0c24      	lsrs	r4, r4, #16
 80018de:	4593      	cmp	fp, r2
 80018e0:	4192      	sbcs	r2, r2
 80018e2:	458a      	cmp	sl, r1
 80018e4:	4189      	sbcs	r1, r1
 80018e6:	193f      	adds	r7, r7, r4
 80018e8:	0ddc      	lsrs	r4, r3, #23
 80018ea:	9b04      	ldr	r3, [sp, #16]
 80018ec:	0275      	lsls	r5, r6, #9
 80018ee:	431d      	orrs	r5, r3
 80018f0:	1e68      	subs	r0, r5, #1
 80018f2:	4185      	sbcs	r5, r0
 80018f4:	4653      	mov	r3, sl
 80018f6:	4252      	negs	r2, r2
 80018f8:	4249      	negs	r1, r1
 80018fa:	430a      	orrs	r2, r1
 80018fc:	18bf      	adds	r7, r7, r2
 80018fe:	4447      	add	r7, r8
 8001900:	0df6      	lsrs	r6, r6, #23
 8001902:	027f      	lsls	r7, r7, #9
 8001904:	4335      	orrs	r5, r6
 8001906:	025a      	lsls	r2, r3, #9
 8001908:	433c      	orrs	r4, r7
 800190a:	4315      	orrs	r5, r2
 800190c:	01fb      	lsls	r3, r7, #7
 800190e:	d400      	bmi.n	8001912 <__aeabi_dmul+0x2fe>
 8001910:	e0c1      	b.n	8001a96 <__aeabi_dmul+0x482>
 8001912:	2101      	movs	r1, #1
 8001914:	086a      	lsrs	r2, r5, #1
 8001916:	400d      	ands	r5, r1
 8001918:	4315      	orrs	r5, r2
 800191a:	07e2      	lsls	r2, r4, #31
 800191c:	4315      	orrs	r5, r2
 800191e:	0864      	lsrs	r4, r4, #1
 8001920:	4926      	ldr	r1, [pc, #152]	; (80019bc <__aeabi_dmul+0x3a8>)
 8001922:	4461      	add	r1, ip
 8001924:	2900      	cmp	r1, #0
 8001926:	dd56      	ble.n	80019d6 <__aeabi_dmul+0x3c2>
 8001928:	076b      	lsls	r3, r5, #29
 800192a:	d009      	beq.n	8001940 <__aeabi_dmul+0x32c>
 800192c:	220f      	movs	r2, #15
 800192e:	402a      	ands	r2, r5
 8001930:	2a04      	cmp	r2, #4
 8001932:	d005      	beq.n	8001940 <__aeabi_dmul+0x32c>
 8001934:	1d2a      	adds	r2, r5, #4
 8001936:	42aa      	cmp	r2, r5
 8001938:	41ad      	sbcs	r5, r5
 800193a:	426d      	negs	r5, r5
 800193c:	1964      	adds	r4, r4, r5
 800193e:	0015      	movs	r5, r2
 8001940:	01e3      	lsls	r3, r4, #7
 8001942:	d504      	bpl.n	800194e <__aeabi_dmul+0x33a>
 8001944:	2180      	movs	r1, #128	; 0x80
 8001946:	4a1e      	ldr	r2, [pc, #120]	; (80019c0 <__aeabi_dmul+0x3ac>)
 8001948:	00c9      	lsls	r1, r1, #3
 800194a:	4014      	ands	r4, r2
 800194c:	4461      	add	r1, ip
 800194e:	4a1d      	ldr	r2, [pc, #116]	; (80019c4 <__aeabi_dmul+0x3b0>)
 8001950:	4291      	cmp	r1, r2
 8001952:	dd00      	ble.n	8001956 <__aeabi_dmul+0x342>
 8001954:	e724      	b.n	80017a0 <__aeabi_dmul+0x18c>
 8001956:	0762      	lsls	r2, r4, #29
 8001958:	08ed      	lsrs	r5, r5, #3
 800195a:	0264      	lsls	r4, r4, #9
 800195c:	0549      	lsls	r1, r1, #21
 800195e:	4315      	orrs	r5, r2
 8001960:	0b24      	lsrs	r4, r4, #12
 8001962:	0d4a      	lsrs	r2, r1, #21
 8001964:	e6c6      	b.n	80016f4 <__aeabi_dmul+0xe0>
 8001966:	9701      	str	r7, [sp, #4]
 8001968:	e6b8      	b.n	80016dc <__aeabi_dmul+0xc8>
 800196a:	4a10      	ldr	r2, [pc, #64]	; (80019ac <__aeabi_dmul+0x398>)
 800196c:	2003      	movs	r0, #3
 800196e:	4694      	mov	ip, r2
 8001970:	4463      	add	r3, ip
 8001972:	464a      	mov	r2, r9
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	2303      	movs	r3, #3
 8001978:	431a      	orrs	r2, r3
 800197a:	4691      	mov	r9, r2
 800197c:	4652      	mov	r2, sl
 800197e:	e68a      	b.n	8001696 <__aeabi_dmul+0x82>
 8001980:	4649      	mov	r1, r9
 8001982:	2301      	movs	r3, #1
 8001984:	4319      	orrs	r1, r3
 8001986:	4689      	mov	r9, r1
 8001988:	2600      	movs	r6, #0
 800198a:	2001      	movs	r0, #1
 800198c:	e683      	b.n	8001696 <__aeabi_dmul+0x82>
 800198e:	220c      	movs	r2, #12
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	2303      	movs	r3, #3
 8001994:	0005      	movs	r5, r0
 8001996:	4691      	mov	r9, r2
 8001998:	469b      	mov	fp, r3
 800199a:	e65e      	b.n	800165a <__aeabi_dmul+0x46>
 800199c:	2304      	movs	r3, #4
 800199e:	4699      	mov	r9, r3
 80019a0:	2300      	movs	r3, #0
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	3301      	adds	r3, #1
 80019a6:	2400      	movs	r4, #0
 80019a8:	469b      	mov	fp, r3
 80019aa:	e656      	b.n	800165a <__aeabi_dmul+0x46>
 80019ac:	000007ff 	.word	0x000007ff
 80019b0:	fffffc01 	.word	0xfffffc01
 80019b4:	080096e8 	.word	0x080096e8
 80019b8:	fffffc0d 	.word	0xfffffc0d
 80019bc:	000003ff 	.word	0x000003ff
 80019c0:	feffffff 	.word	0xfeffffff
 80019c4:	000007fe 	.word	0x000007fe
 80019c8:	2300      	movs	r3, #0
 80019ca:	2480      	movs	r4, #128	; 0x80
 80019cc:	2500      	movs	r5, #0
 80019ce:	4a44      	ldr	r2, [pc, #272]	; (8001ae0 <__aeabi_dmul+0x4cc>)
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	0324      	lsls	r4, r4, #12
 80019d4:	e68e      	b.n	80016f4 <__aeabi_dmul+0xe0>
 80019d6:	2001      	movs	r0, #1
 80019d8:	1a40      	subs	r0, r0, r1
 80019da:	2838      	cmp	r0, #56	; 0x38
 80019dc:	dd00      	ble.n	80019e0 <__aeabi_dmul+0x3cc>
 80019de:	e686      	b.n	80016ee <__aeabi_dmul+0xda>
 80019e0:	281f      	cmp	r0, #31
 80019e2:	dd5b      	ble.n	8001a9c <__aeabi_dmul+0x488>
 80019e4:	221f      	movs	r2, #31
 80019e6:	0023      	movs	r3, r4
 80019e8:	4252      	negs	r2, r2
 80019ea:	1a51      	subs	r1, r2, r1
 80019ec:	40cb      	lsrs	r3, r1
 80019ee:	0019      	movs	r1, r3
 80019f0:	2820      	cmp	r0, #32
 80019f2:	d003      	beq.n	80019fc <__aeabi_dmul+0x3e8>
 80019f4:	4a3b      	ldr	r2, [pc, #236]	; (8001ae4 <__aeabi_dmul+0x4d0>)
 80019f6:	4462      	add	r2, ip
 80019f8:	4094      	lsls	r4, r2
 80019fa:	4325      	orrs	r5, r4
 80019fc:	1e6a      	subs	r2, r5, #1
 80019fe:	4195      	sbcs	r5, r2
 8001a00:	002a      	movs	r2, r5
 8001a02:	430a      	orrs	r2, r1
 8001a04:	2107      	movs	r1, #7
 8001a06:	000d      	movs	r5, r1
 8001a08:	2400      	movs	r4, #0
 8001a0a:	4015      	ands	r5, r2
 8001a0c:	4211      	tst	r1, r2
 8001a0e:	d05b      	beq.n	8001ac8 <__aeabi_dmul+0x4b4>
 8001a10:	210f      	movs	r1, #15
 8001a12:	2400      	movs	r4, #0
 8001a14:	4011      	ands	r1, r2
 8001a16:	2904      	cmp	r1, #4
 8001a18:	d053      	beq.n	8001ac2 <__aeabi_dmul+0x4ae>
 8001a1a:	1d11      	adds	r1, r2, #4
 8001a1c:	4291      	cmp	r1, r2
 8001a1e:	4192      	sbcs	r2, r2
 8001a20:	4252      	negs	r2, r2
 8001a22:	18a4      	adds	r4, r4, r2
 8001a24:	000a      	movs	r2, r1
 8001a26:	0223      	lsls	r3, r4, #8
 8001a28:	d54b      	bpl.n	8001ac2 <__aeabi_dmul+0x4ae>
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	2400      	movs	r4, #0
 8001a2e:	2500      	movs	r5, #0
 8001a30:	e660      	b.n	80016f4 <__aeabi_dmul+0xe0>
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	031b      	lsls	r3, r3, #12
 8001a36:	421c      	tst	r4, r3
 8001a38:	d009      	beq.n	8001a4e <__aeabi_dmul+0x43a>
 8001a3a:	421e      	tst	r6, r3
 8001a3c:	d107      	bne.n	8001a4e <__aeabi_dmul+0x43a>
 8001a3e:	4333      	orrs	r3, r6
 8001a40:	031c      	lsls	r4, r3, #12
 8001a42:	4643      	mov	r3, r8
 8001a44:	0015      	movs	r5, r2
 8001a46:	0b24      	lsrs	r4, r4, #12
 8001a48:	4a25      	ldr	r2, [pc, #148]	; (8001ae0 <__aeabi_dmul+0x4cc>)
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	e652      	b.n	80016f4 <__aeabi_dmul+0xe0>
 8001a4e:	2280      	movs	r2, #128	; 0x80
 8001a50:	0312      	lsls	r2, r2, #12
 8001a52:	4314      	orrs	r4, r2
 8001a54:	0324      	lsls	r4, r4, #12
 8001a56:	4a22      	ldr	r2, [pc, #136]	; (8001ae0 <__aeabi_dmul+0x4cc>)
 8001a58:	0b24      	lsrs	r4, r4, #12
 8001a5a:	9701      	str	r7, [sp, #4]
 8001a5c:	e64a      	b.n	80016f4 <__aeabi_dmul+0xe0>
 8001a5e:	f000 fd51 	bl	8002504 <__clzsi2>
 8001a62:	0003      	movs	r3, r0
 8001a64:	001a      	movs	r2, r3
 8001a66:	3215      	adds	r2, #21
 8001a68:	3020      	adds	r0, #32
 8001a6a:	2a1c      	cmp	r2, #28
 8001a6c:	dc00      	bgt.n	8001a70 <__aeabi_dmul+0x45c>
 8001a6e:	e684      	b.n	800177a <__aeabi_dmul+0x166>
 8001a70:	4656      	mov	r6, sl
 8001a72:	3b08      	subs	r3, #8
 8001a74:	2200      	movs	r2, #0
 8001a76:	409e      	lsls	r6, r3
 8001a78:	e689      	b.n	800178e <__aeabi_dmul+0x17a>
 8001a7a:	f000 fd43 	bl	8002504 <__clzsi2>
 8001a7e:	0001      	movs	r1, r0
 8001a80:	0002      	movs	r2, r0
 8001a82:	3115      	adds	r1, #21
 8001a84:	3220      	adds	r2, #32
 8001a86:	291c      	cmp	r1, #28
 8001a88:	dc00      	bgt.n	8001a8c <__aeabi_dmul+0x478>
 8001a8a:	e64e      	b.n	800172a <__aeabi_dmul+0x116>
 8001a8c:	0034      	movs	r4, r6
 8001a8e:	3808      	subs	r0, #8
 8001a90:	2500      	movs	r5, #0
 8001a92:	4084      	lsls	r4, r0
 8001a94:	e653      	b.n	800173e <__aeabi_dmul+0x12a>
 8001a96:	9b00      	ldr	r3, [sp, #0]
 8001a98:	469c      	mov	ip, r3
 8001a9a:	e741      	b.n	8001920 <__aeabi_dmul+0x30c>
 8001a9c:	4912      	ldr	r1, [pc, #72]	; (8001ae8 <__aeabi_dmul+0x4d4>)
 8001a9e:	0022      	movs	r2, r4
 8001aa0:	4461      	add	r1, ip
 8001aa2:	002e      	movs	r6, r5
 8001aa4:	408d      	lsls	r5, r1
 8001aa6:	408a      	lsls	r2, r1
 8001aa8:	40c6      	lsrs	r6, r0
 8001aaa:	1e69      	subs	r1, r5, #1
 8001aac:	418d      	sbcs	r5, r1
 8001aae:	4332      	orrs	r2, r6
 8001ab0:	432a      	orrs	r2, r5
 8001ab2:	40c4      	lsrs	r4, r0
 8001ab4:	0753      	lsls	r3, r2, #29
 8001ab6:	d0b6      	beq.n	8001a26 <__aeabi_dmul+0x412>
 8001ab8:	210f      	movs	r1, #15
 8001aba:	4011      	ands	r1, r2
 8001abc:	2904      	cmp	r1, #4
 8001abe:	d1ac      	bne.n	8001a1a <__aeabi_dmul+0x406>
 8001ac0:	e7b1      	b.n	8001a26 <__aeabi_dmul+0x412>
 8001ac2:	0765      	lsls	r5, r4, #29
 8001ac4:	0264      	lsls	r4, r4, #9
 8001ac6:	0b24      	lsrs	r4, r4, #12
 8001ac8:	08d2      	lsrs	r2, r2, #3
 8001aca:	4315      	orrs	r5, r2
 8001acc:	2200      	movs	r2, #0
 8001ace:	e611      	b.n	80016f4 <__aeabi_dmul+0xe0>
 8001ad0:	2280      	movs	r2, #128	; 0x80
 8001ad2:	0312      	lsls	r2, r2, #12
 8001ad4:	4314      	orrs	r4, r2
 8001ad6:	0324      	lsls	r4, r4, #12
 8001ad8:	4a01      	ldr	r2, [pc, #4]	; (8001ae0 <__aeabi_dmul+0x4cc>)
 8001ada:	0b24      	lsrs	r4, r4, #12
 8001adc:	e60a      	b.n	80016f4 <__aeabi_dmul+0xe0>
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	000007ff 	.word	0x000007ff
 8001ae4:	0000043e 	.word	0x0000043e
 8001ae8:	0000041e 	.word	0x0000041e

08001aec <__aeabi_dsub>:
 8001aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aee:	4657      	mov	r7, sl
 8001af0:	464e      	mov	r6, r9
 8001af2:	4645      	mov	r5, r8
 8001af4:	46de      	mov	lr, fp
 8001af6:	0004      	movs	r4, r0
 8001af8:	b5e0      	push	{r5, r6, r7, lr}
 8001afa:	001f      	movs	r7, r3
 8001afc:	0010      	movs	r0, r2
 8001afe:	030b      	lsls	r3, r1, #12
 8001b00:	0f62      	lsrs	r2, r4, #29
 8001b02:	004e      	lsls	r6, r1, #1
 8001b04:	0fcd      	lsrs	r5, r1, #31
 8001b06:	0a5b      	lsrs	r3, r3, #9
 8001b08:	0339      	lsls	r1, r7, #12
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	0a49      	lsrs	r1, r1, #9
 8001b0e:	00e2      	lsls	r2, r4, #3
 8001b10:	0f44      	lsrs	r4, r0, #29
 8001b12:	4321      	orrs	r1, r4
 8001b14:	4cc2      	ldr	r4, [pc, #776]	; (8001e20 <__aeabi_dsub+0x334>)
 8001b16:	4691      	mov	r9, r2
 8001b18:	4692      	mov	sl, r2
 8001b1a:	00c0      	lsls	r0, r0, #3
 8001b1c:	007a      	lsls	r2, r7, #1
 8001b1e:	4680      	mov	r8, r0
 8001b20:	0d76      	lsrs	r6, r6, #21
 8001b22:	0d52      	lsrs	r2, r2, #21
 8001b24:	0fff      	lsrs	r7, r7, #31
 8001b26:	42a2      	cmp	r2, r4
 8001b28:	d100      	bne.n	8001b2c <__aeabi_dsub+0x40>
 8001b2a:	e0b4      	b.n	8001c96 <__aeabi_dsub+0x1aa>
 8001b2c:	2401      	movs	r4, #1
 8001b2e:	4067      	eors	r7, r4
 8001b30:	46bb      	mov	fp, r7
 8001b32:	42bd      	cmp	r5, r7
 8001b34:	d100      	bne.n	8001b38 <__aeabi_dsub+0x4c>
 8001b36:	e088      	b.n	8001c4a <__aeabi_dsub+0x15e>
 8001b38:	1ab4      	subs	r4, r6, r2
 8001b3a:	46a4      	mov	ip, r4
 8001b3c:	2c00      	cmp	r4, #0
 8001b3e:	dc00      	bgt.n	8001b42 <__aeabi_dsub+0x56>
 8001b40:	e0b2      	b.n	8001ca8 <__aeabi_dsub+0x1bc>
 8001b42:	2a00      	cmp	r2, #0
 8001b44:	d100      	bne.n	8001b48 <__aeabi_dsub+0x5c>
 8001b46:	e0c5      	b.n	8001cd4 <__aeabi_dsub+0x1e8>
 8001b48:	4ab5      	ldr	r2, [pc, #724]	; (8001e20 <__aeabi_dsub+0x334>)
 8001b4a:	4296      	cmp	r6, r2
 8001b4c:	d100      	bne.n	8001b50 <__aeabi_dsub+0x64>
 8001b4e:	e28b      	b.n	8002068 <__aeabi_dsub+0x57c>
 8001b50:	2280      	movs	r2, #128	; 0x80
 8001b52:	0412      	lsls	r2, r2, #16
 8001b54:	4311      	orrs	r1, r2
 8001b56:	4662      	mov	r2, ip
 8001b58:	2a38      	cmp	r2, #56	; 0x38
 8001b5a:	dd00      	ble.n	8001b5e <__aeabi_dsub+0x72>
 8001b5c:	e1a1      	b.n	8001ea2 <__aeabi_dsub+0x3b6>
 8001b5e:	2a1f      	cmp	r2, #31
 8001b60:	dd00      	ble.n	8001b64 <__aeabi_dsub+0x78>
 8001b62:	e216      	b.n	8001f92 <__aeabi_dsub+0x4a6>
 8001b64:	2720      	movs	r7, #32
 8001b66:	000c      	movs	r4, r1
 8001b68:	1abf      	subs	r7, r7, r2
 8001b6a:	40bc      	lsls	r4, r7
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	46a0      	mov	r8, r4
 8001b70:	4664      	mov	r4, ip
 8001b72:	40b8      	lsls	r0, r7
 8001b74:	40e2      	lsrs	r2, r4
 8001b76:	4644      	mov	r4, r8
 8001b78:	4314      	orrs	r4, r2
 8001b7a:	0002      	movs	r2, r0
 8001b7c:	1e50      	subs	r0, r2, #1
 8001b7e:	4182      	sbcs	r2, r0
 8001b80:	4660      	mov	r0, ip
 8001b82:	40c1      	lsrs	r1, r0
 8001b84:	4322      	orrs	r2, r4
 8001b86:	1a5b      	subs	r3, r3, r1
 8001b88:	4649      	mov	r1, r9
 8001b8a:	1a8c      	subs	r4, r1, r2
 8001b8c:	45a1      	cmp	r9, r4
 8001b8e:	4192      	sbcs	r2, r2
 8001b90:	4252      	negs	r2, r2
 8001b92:	1a9b      	subs	r3, r3, r2
 8001b94:	4698      	mov	r8, r3
 8001b96:	4643      	mov	r3, r8
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	d400      	bmi.n	8001b9e <__aeabi_dsub+0xb2>
 8001b9c:	e117      	b.n	8001dce <__aeabi_dsub+0x2e2>
 8001b9e:	4643      	mov	r3, r8
 8001ba0:	025b      	lsls	r3, r3, #9
 8001ba2:	0a5b      	lsrs	r3, r3, #9
 8001ba4:	4698      	mov	r8, r3
 8001ba6:	4643      	mov	r3, r8
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d100      	bne.n	8001bae <__aeabi_dsub+0xc2>
 8001bac:	e16c      	b.n	8001e88 <__aeabi_dsub+0x39c>
 8001bae:	4640      	mov	r0, r8
 8001bb0:	f000 fca8 	bl	8002504 <__clzsi2>
 8001bb4:	0002      	movs	r2, r0
 8001bb6:	3a08      	subs	r2, #8
 8001bb8:	2120      	movs	r1, #32
 8001bba:	0020      	movs	r0, r4
 8001bbc:	4643      	mov	r3, r8
 8001bbe:	1a89      	subs	r1, r1, r2
 8001bc0:	4093      	lsls	r3, r2
 8001bc2:	40c8      	lsrs	r0, r1
 8001bc4:	4094      	lsls	r4, r2
 8001bc6:	4303      	orrs	r3, r0
 8001bc8:	4296      	cmp	r6, r2
 8001bca:	dd00      	ble.n	8001bce <__aeabi_dsub+0xe2>
 8001bcc:	e157      	b.n	8001e7e <__aeabi_dsub+0x392>
 8001bce:	1b96      	subs	r6, r2, r6
 8001bd0:	1c71      	adds	r1, r6, #1
 8001bd2:	291f      	cmp	r1, #31
 8001bd4:	dd00      	ble.n	8001bd8 <__aeabi_dsub+0xec>
 8001bd6:	e1cb      	b.n	8001f70 <__aeabi_dsub+0x484>
 8001bd8:	2220      	movs	r2, #32
 8001bda:	0018      	movs	r0, r3
 8001bdc:	0026      	movs	r6, r4
 8001bde:	1a52      	subs	r2, r2, r1
 8001be0:	4094      	lsls	r4, r2
 8001be2:	4090      	lsls	r0, r2
 8001be4:	40ce      	lsrs	r6, r1
 8001be6:	40cb      	lsrs	r3, r1
 8001be8:	1e62      	subs	r2, r4, #1
 8001bea:	4194      	sbcs	r4, r2
 8001bec:	4330      	orrs	r0, r6
 8001bee:	4698      	mov	r8, r3
 8001bf0:	2600      	movs	r6, #0
 8001bf2:	4304      	orrs	r4, r0
 8001bf4:	0763      	lsls	r3, r4, #29
 8001bf6:	d009      	beq.n	8001c0c <__aeabi_dsub+0x120>
 8001bf8:	230f      	movs	r3, #15
 8001bfa:	4023      	ands	r3, r4
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d005      	beq.n	8001c0c <__aeabi_dsub+0x120>
 8001c00:	1d23      	adds	r3, r4, #4
 8001c02:	42a3      	cmp	r3, r4
 8001c04:	41a4      	sbcs	r4, r4
 8001c06:	4264      	negs	r4, r4
 8001c08:	44a0      	add	r8, r4
 8001c0a:	001c      	movs	r4, r3
 8001c0c:	4643      	mov	r3, r8
 8001c0e:	021b      	lsls	r3, r3, #8
 8001c10:	d400      	bmi.n	8001c14 <__aeabi_dsub+0x128>
 8001c12:	e0df      	b.n	8001dd4 <__aeabi_dsub+0x2e8>
 8001c14:	4b82      	ldr	r3, [pc, #520]	; (8001e20 <__aeabi_dsub+0x334>)
 8001c16:	3601      	adds	r6, #1
 8001c18:	429e      	cmp	r6, r3
 8001c1a:	d100      	bne.n	8001c1e <__aeabi_dsub+0x132>
 8001c1c:	e0fb      	b.n	8001e16 <__aeabi_dsub+0x32a>
 8001c1e:	4642      	mov	r2, r8
 8001c20:	4b80      	ldr	r3, [pc, #512]	; (8001e24 <__aeabi_dsub+0x338>)
 8001c22:	08e4      	lsrs	r4, r4, #3
 8001c24:	401a      	ands	r2, r3
 8001c26:	0013      	movs	r3, r2
 8001c28:	0571      	lsls	r1, r6, #21
 8001c2a:	0752      	lsls	r2, r2, #29
 8001c2c:	025b      	lsls	r3, r3, #9
 8001c2e:	4322      	orrs	r2, r4
 8001c30:	0b1b      	lsrs	r3, r3, #12
 8001c32:	0d49      	lsrs	r1, r1, #21
 8001c34:	0509      	lsls	r1, r1, #20
 8001c36:	07ed      	lsls	r5, r5, #31
 8001c38:	4319      	orrs	r1, r3
 8001c3a:	4329      	orrs	r1, r5
 8001c3c:	0010      	movs	r0, r2
 8001c3e:	bcf0      	pop	{r4, r5, r6, r7}
 8001c40:	46bb      	mov	fp, r7
 8001c42:	46b2      	mov	sl, r6
 8001c44:	46a9      	mov	r9, r5
 8001c46:	46a0      	mov	r8, r4
 8001c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c4a:	1ab4      	subs	r4, r6, r2
 8001c4c:	46a4      	mov	ip, r4
 8001c4e:	2c00      	cmp	r4, #0
 8001c50:	dd58      	ble.n	8001d04 <__aeabi_dsub+0x218>
 8001c52:	2a00      	cmp	r2, #0
 8001c54:	d100      	bne.n	8001c58 <__aeabi_dsub+0x16c>
 8001c56:	e09e      	b.n	8001d96 <__aeabi_dsub+0x2aa>
 8001c58:	4a71      	ldr	r2, [pc, #452]	; (8001e20 <__aeabi_dsub+0x334>)
 8001c5a:	4296      	cmp	r6, r2
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x174>
 8001c5e:	e13b      	b.n	8001ed8 <__aeabi_dsub+0x3ec>
 8001c60:	2280      	movs	r2, #128	; 0x80
 8001c62:	0412      	lsls	r2, r2, #16
 8001c64:	4311      	orrs	r1, r2
 8001c66:	4662      	mov	r2, ip
 8001c68:	2a38      	cmp	r2, #56	; 0x38
 8001c6a:	dd00      	ble.n	8001c6e <__aeabi_dsub+0x182>
 8001c6c:	e0c1      	b.n	8001df2 <__aeabi_dsub+0x306>
 8001c6e:	2a1f      	cmp	r2, #31
 8001c70:	dc00      	bgt.n	8001c74 <__aeabi_dsub+0x188>
 8001c72:	e1bb      	b.n	8001fec <__aeabi_dsub+0x500>
 8001c74:	000c      	movs	r4, r1
 8001c76:	3a20      	subs	r2, #32
 8001c78:	40d4      	lsrs	r4, r2
 8001c7a:	0022      	movs	r2, r4
 8001c7c:	4664      	mov	r4, ip
 8001c7e:	2c20      	cmp	r4, #32
 8001c80:	d004      	beq.n	8001c8c <__aeabi_dsub+0x1a0>
 8001c82:	2740      	movs	r7, #64	; 0x40
 8001c84:	1b3f      	subs	r7, r7, r4
 8001c86:	40b9      	lsls	r1, r7
 8001c88:	4308      	orrs	r0, r1
 8001c8a:	4680      	mov	r8, r0
 8001c8c:	4644      	mov	r4, r8
 8001c8e:	1e61      	subs	r1, r4, #1
 8001c90:	418c      	sbcs	r4, r1
 8001c92:	4314      	orrs	r4, r2
 8001c94:	e0b1      	b.n	8001dfa <__aeabi_dsub+0x30e>
 8001c96:	000c      	movs	r4, r1
 8001c98:	4304      	orrs	r4, r0
 8001c9a:	d02a      	beq.n	8001cf2 <__aeabi_dsub+0x206>
 8001c9c:	46bb      	mov	fp, r7
 8001c9e:	42bd      	cmp	r5, r7
 8001ca0:	d02d      	beq.n	8001cfe <__aeabi_dsub+0x212>
 8001ca2:	4c61      	ldr	r4, [pc, #388]	; (8001e28 <__aeabi_dsub+0x33c>)
 8001ca4:	46a4      	mov	ip, r4
 8001ca6:	44b4      	add	ip, r6
 8001ca8:	4664      	mov	r4, ip
 8001caa:	2c00      	cmp	r4, #0
 8001cac:	d05c      	beq.n	8001d68 <__aeabi_dsub+0x27c>
 8001cae:	1b94      	subs	r4, r2, r6
 8001cb0:	46a4      	mov	ip, r4
 8001cb2:	2e00      	cmp	r6, #0
 8001cb4:	d000      	beq.n	8001cb8 <__aeabi_dsub+0x1cc>
 8001cb6:	e115      	b.n	8001ee4 <__aeabi_dsub+0x3f8>
 8001cb8:	464d      	mov	r5, r9
 8001cba:	431d      	orrs	r5, r3
 8001cbc:	d100      	bne.n	8001cc0 <__aeabi_dsub+0x1d4>
 8001cbe:	e1c3      	b.n	8002048 <__aeabi_dsub+0x55c>
 8001cc0:	1e65      	subs	r5, r4, #1
 8001cc2:	2c01      	cmp	r4, #1
 8001cc4:	d100      	bne.n	8001cc8 <__aeabi_dsub+0x1dc>
 8001cc6:	e20c      	b.n	80020e2 <__aeabi_dsub+0x5f6>
 8001cc8:	4e55      	ldr	r6, [pc, #340]	; (8001e20 <__aeabi_dsub+0x334>)
 8001cca:	42b4      	cmp	r4, r6
 8001ccc:	d100      	bne.n	8001cd0 <__aeabi_dsub+0x1e4>
 8001cce:	e1f8      	b.n	80020c2 <__aeabi_dsub+0x5d6>
 8001cd0:	46ac      	mov	ip, r5
 8001cd2:	e10e      	b.n	8001ef2 <__aeabi_dsub+0x406>
 8001cd4:	000a      	movs	r2, r1
 8001cd6:	4302      	orrs	r2, r0
 8001cd8:	d100      	bne.n	8001cdc <__aeabi_dsub+0x1f0>
 8001cda:	e136      	b.n	8001f4a <__aeabi_dsub+0x45e>
 8001cdc:	0022      	movs	r2, r4
 8001cde:	3a01      	subs	r2, #1
 8001ce0:	2c01      	cmp	r4, #1
 8001ce2:	d100      	bne.n	8001ce6 <__aeabi_dsub+0x1fa>
 8001ce4:	e1c6      	b.n	8002074 <__aeabi_dsub+0x588>
 8001ce6:	4c4e      	ldr	r4, [pc, #312]	; (8001e20 <__aeabi_dsub+0x334>)
 8001ce8:	45a4      	cmp	ip, r4
 8001cea:	d100      	bne.n	8001cee <__aeabi_dsub+0x202>
 8001cec:	e0f4      	b.n	8001ed8 <__aeabi_dsub+0x3ec>
 8001cee:	4694      	mov	ip, r2
 8001cf0:	e731      	b.n	8001b56 <__aeabi_dsub+0x6a>
 8001cf2:	2401      	movs	r4, #1
 8001cf4:	4067      	eors	r7, r4
 8001cf6:	46bb      	mov	fp, r7
 8001cf8:	42bd      	cmp	r5, r7
 8001cfa:	d000      	beq.n	8001cfe <__aeabi_dsub+0x212>
 8001cfc:	e71c      	b.n	8001b38 <__aeabi_dsub+0x4c>
 8001cfe:	4c4a      	ldr	r4, [pc, #296]	; (8001e28 <__aeabi_dsub+0x33c>)
 8001d00:	46a4      	mov	ip, r4
 8001d02:	44b4      	add	ip, r6
 8001d04:	4664      	mov	r4, ip
 8001d06:	2c00      	cmp	r4, #0
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dsub+0x220>
 8001d0a:	e0cf      	b.n	8001eac <__aeabi_dsub+0x3c0>
 8001d0c:	1b94      	subs	r4, r2, r6
 8001d0e:	46a4      	mov	ip, r4
 8001d10:	2e00      	cmp	r6, #0
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0x22a>
 8001d14:	e15c      	b.n	8001fd0 <__aeabi_dsub+0x4e4>
 8001d16:	4e42      	ldr	r6, [pc, #264]	; (8001e20 <__aeabi_dsub+0x334>)
 8001d18:	42b2      	cmp	r2, r6
 8001d1a:	d100      	bne.n	8001d1e <__aeabi_dsub+0x232>
 8001d1c:	e1ec      	b.n	80020f8 <__aeabi_dsub+0x60c>
 8001d1e:	2680      	movs	r6, #128	; 0x80
 8001d20:	0436      	lsls	r6, r6, #16
 8001d22:	4333      	orrs	r3, r6
 8001d24:	4664      	mov	r4, ip
 8001d26:	2c38      	cmp	r4, #56	; 0x38
 8001d28:	dd00      	ble.n	8001d2c <__aeabi_dsub+0x240>
 8001d2a:	e1b3      	b.n	8002094 <__aeabi_dsub+0x5a8>
 8001d2c:	2c1f      	cmp	r4, #31
 8001d2e:	dd00      	ble.n	8001d32 <__aeabi_dsub+0x246>
 8001d30:	e238      	b.n	80021a4 <__aeabi_dsub+0x6b8>
 8001d32:	2620      	movs	r6, #32
 8001d34:	1b36      	subs	r6, r6, r4
 8001d36:	001c      	movs	r4, r3
 8001d38:	40b4      	lsls	r4, r6
 8001d3a:	464f      	mov	r7, r9
 8001d3c:	46a0      	mov	r8, r4
 8001d3e:	4664      	mov	r4, ip
 8001d40:	40e7      	lsrs	r7, r4
 8001d42:	4644      	mov	r4, r8
 8001d44:	433c      	orrs	r4, r7
 8001d46:	464f      	mov	r7, r9
 8001d48:	40b7      	lsls	r7, r6
 8001d4a:	003e      	movs	r6, r7
 8001d4c:	1e77      	subs	r7, r6, #1
 8001d4e:	41be      	sbcs	r6, r7
 8001d50:	4334      	orrs	r4, r6
 8001d52:	4666      	mov	r6, ip
 8001d54:	40f3      	lsrs	r3, r6
 8001d56:	18c9      	adds	r1, r1, r3
 8001d58:	1824      	adds	r4, r4, r0
 8001d5a:	4284      	cmp	r4, r0
 8001d5c:	419b      	sbcs	r3, r3
 8001d5e:	425b      	negs	r3, r3
 8001d60:	4698      	mov	r8, r3
 8001d62:	0016      	movs	r6, r2
 8001d64:	4488      	add	r8, r1
 8001d66:	e04e      	b.n	8001e06 <__aeabi_dsub+0x31a>
 8001d68:	4a30      	ldr	r2, [pc, #192]	; (8001e2c <__aeabi_dsub+0x340>)
 8001d6a:	1c74      	adds	r4, r6, #1
 8001d6c:	4214      	tst	r4, r2
 8001d6e:	d000      	beq.n	8001d72 <__aeabi_dsub+0x286>
 8001d70:	e0d6      	b.n	8001f20 <__aeabi_dsub+0x434>
 8001d72:	464a      	mov	r2, r9
 8001d74:	431a      	orrs	r2, r3
 8001d76:	2e00      	cmp	r6, #0
 8001d78:	d000      	beq.n	8001d7c <__aeabi_dsub+0x290>
 8001d7a:	e15b      	b.n	8002034 <__aeabi_dsub+0x548>
 8001d7c:	2a00      	cmp	r2, #0
 8001d7e:	d100      	bne.n	8001d82 <__aeabi_dsub+0x296>
 8001d80:	e1a5      	b.n	80020ce <__aeabi_dsub+0x5e2>
 8001d82:	000a      	movs	r2, r1
 8001d84:	4302      	orrs	r2, r0
 8001d86:	d000      	beq.n	8001d8a <__aeabi_dsub+0x29e>
 8001d88:	e1bb      	b.n	8002102 <__aeabi_dsub+0x616>
 8001d8a:	464a      	mov	r2, r9
 8001d8c:	0759      	lsls	r1, r3, #29
 8001d8e:	08d2      	lsrs	r2, r2, #3
 8001d90:	430a      	orrs	r2, r1
 8001d92:	08db      	lsrs	r3, r3, #3
 8001d94:	e027      	b.n	8001de6 <__aeabi_dsub+0x2fa>
 8001d96:	000a      	movs	r2, r1
 8001d98:	4302      	orrs	r2, r0
 8001d9a:	d100      	bne.n	8001d9e <__aeabi_dsub+0x2b2>
 8001d9c:	e174      	b.n	8002088 <__aeabi_dsub+0x59c>
 8001d9e:	0022      	movs	r2, r4
 8001da0:	3a01      	subs	r2, #1
 8001da2:	2c01      	cmp	r4, #1
 8001da4:	d005      	beq.n	8001db2 <__aeabi_dsub+0x2c6>
 8001da6:	4c1e      	ldr	r4, [pc, #120]	; (8001e20 <__aeabi_dsub+0x334>)
 8001da8:	45a4      	cmp	ip, r4
 8001daa:	d100      	bne.n	8001dae <__aeabi_dsub+0x2c2>
 8001dac:	e094      	b.n	8001ed8 <__aeabi_dsub+0x3ec>
 8001dae:	4694      	mov	ip, r2
 8001db0:	e759      	b.n	8001c66 <__aeabi_dsub+0x17a>
 8001db2:	4448      	add	r0, r9
 8001db4:	4548      	cmp	r0, r9
 8001db6:	4192      	sbcs	r2, r2
 8001db8:	185b      	adds	r3, r3, r1
 8001dba:	4698      	mov	r8, r3
 8001dbc:	0004      	movs	r4, r0
 8001dbe:	4252      	negs	r2, r2
 8001dc0:	4490      	add	r8, r2
 8001dc2:	4643      	mov	r3, r8
 8001dc4:	2602      	movs	r6, #2
 8001dc6:	021b      	lsls	r3, r3, #8
 8001dc8:	d500      	bpl.n	8001dcc <__aeabi_dsub+0x2e0>
 8001dca:	e0c4      	b.n	8001f56 <__aeabi_dsub+0x46a>
 8001dcc:	3e01      	subs	r6, #1
 8001dce:	0763      	lsls	r3, r4, #29
 8001dd0:	d000      	beq.n	8001dd4 <__aeabi_dsub+0x2e8>
 8001dd2:	e711      	b.n	8001bf8 <__aeabi_dsub+0x10c>
 8001dd4:	4643      	mov	r3, r8
 8001dd6:	46b4      	mov	ip, r6
 8001dd8:	0759      	lsls	r1, r3, #29
 8001dda:	08e2      	lsrs	r2, r4, #3
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	08db      	lsrs	r3, r3, #3
 8001de0:	490f      	ldr	r1, [pc, #60]	; (8001e20 <__aeabi_dsub+0x334>)
 8001de2:	458c      	cmp	ip, r1
 8001de4:	d040      	beq.n	8001e68 <__aeabi_dsub+0x37c>
 8001de6:	4661      	mov	r1, ip
 8001de8:	031b      	lsls	r3, r3, #12
 8001dea:	0549      	lsls	r1, r1, #21
 8001dec:	0b1b      	lsrs	r3, r3, #12
 8001dee:	0d49      	lsrs	r1, r1, #21
 8001df0:	e720      	b.n	8001c34 <__aeabi_dsub+0x148>
 8001df2:	4301      	orrs	r1, r0
 8001df4:	000c      	movs	r4, r1
 8001df6:	1e61      	subs	r1, r4, #1
 8001df8:	418c      	sbcs	r4, r1
 8001dfa:	444c      	add	r4, r9
 8001dfc:	454c      	cmp	r4, r9
 8001dfe:	4192      	sbcs	r2, r2
 8001e00:	4252      	negs	r2, r2
 8001e02:	4690      	mov	r8, r2
 8001e04:	4498      	add	r8, r3
 8001e06:	4643      	mov	r3, r8
 8001e08:	021b      	lsls	r3, r3, #8
 8001e0a:	d5e0      	bpl.n	8001dce <__aeabi_dsub+0x2e2>
 8001e0c:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <__aeabi_dsub+0x334>)
 8001e0e:	3601      	adds	r6, #1
 8001e10:	429e      	cmp	r6, r3
 8001e12:	d000      	beq.n	8001e16 <__aeabi_dsub+0x32a>
 8001e14:	e09f      	b.n	8001f56 <__aeabi_dsub+0x46a>
 8001e16:	0031      	movs	r1, r6
 8001e18:	2300      	movs	r3, #0
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	e70a      	b.n	8001c34 <__aeabi_dsub+0x148>
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	000007ff 	.word	0x000007ff
 8001e24:	ff7fffff 	.word	0xff7fffff
 8001e28:	fffff801 	.word	0xfffff801
 8001e2c:	000007fe 	.word	0x000007fe
 8001e30:	2a00      	cmp	r2, #0
 8001e32:	d100      	bne.n	8001e36 <__aeabi_dsub+0x34a>
 8001e34:	e160      	b.n	80020f8 <__aeabi_dsub+0x60c>
 8001e36:	000a      	movs	r2, r1
 8001e38:	4302      	orrs	r2, r0
 8001e3a:	d04d      	beq.n	8001ed8 <__aeabi_dsub+0x3ec>
 8001e3c:	464a      	mov	r2, r9
 8001e3e:	075c      	lsls	r4, r3, #29
 8001e40:	08d2      	lsrs	r2, r2, #3
 8001e42:	4322      	orrs	r2, r4
 8001e44:	2480      	movs	r4, #128	; 0x80
 8001e46:	08db      	lsrs	r3, r3, #3
 8001e48:	0324      	lsls	r4, r4, #12
 8001e4a:	4223      	tst	r3, r4
 8001e4c:	d007      	beq.n	8001e5e <__aeabi_dsub+0x372>
 8001e4e:	08ce      	lsrs	r6, r1, #3
 8001e50:	4226      	tst	r6, r4
 8001e52:	d104      	bne.n	8001e5e <__aeabi_dsub+0x372>
 8001e54:	465d      	mov	r5, fp
 8001e56:	0033      	movs	r3, r6
 8001e58:	08c2      	lsrs	r2, r0, #3
 8001e5a:	0749      	lsls	r1, r1, #29
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	0f51      	lsrs	r1, r2, #29
 8001e60:	00d2      	lsls	r2, r2, #3
 8001e62:	08d2      	lsrs	r2, r2, #3
 8001e64:	0749      	lsls	r1, r1, #29
 8001e66:	430a      	orrs	r2, r1
 8001e68:	0011      	movs	r1, r2
 8001e6a:	4319      	orrs	r1, r3
 8001e6c:	d100      	bne.n	8001e70 <__aeabi_dsub+0x384>
 8001e6e:	e1c8      	b.n	8002202 <__aeabi_dsub+0x716>
 8001e70:	2180      	movs	r1, #128	; 0x80
 8001e72:	0309      	lsls	r1, r1, #12
 8001e74:	430b      	orrs	r3, r1
 8001e76:	031b      	lsls	r3, r3, #12
 8001e78:	49d5      	ldr	r1, [pc, #852]	; (80021d0 <__aeabi_dsub+0x6e4>)
 8001e7a:	0b1b      	lsrs	r3, r3, #12
 8001e7c:	e6da      	b.n	8001c34 <__aeabi_dsub+0x148>
 8001e7e:	49d5      	ldr	r1, [pc, #852]	; (80021d4 <__aeabi_dsub+0x6e8>)
 8001e80:	1ab6      	subs	r6, r6, r2
 8001e82:	400b      	ands	r3, r1
 8001e84:	4698      	mov	r8, r3
 8001e86:	e6b5      	b.n	8001bf4 <__aeabi_dsub+0x108>
 8001e88:	0020      	movs	r0, r4
 8001e8a:	f000 fb3b 	bl	8002504 <__clzsi2>
 8001e8e:	0002      	movs	r2, r0
 8001e90:	3218      	adds	r2, #24
 8001e92:	2a1f      	cmp	r2, #31
 8001e94:	dc00      	bgt.n	8001e98 <__aeabi_dsub+0x3ac>
 8001e96:	e68f      	b.n	8001bb8 <__aeabi_dsub+0xcc>
 8001e98:	0023      	movs	r3, r4
 8001e9a:	3808      	subs	r0, #8
 8001e9c:	4083      	lsls	r3, r0
 8001e9e:	2400      	movs	r4, #0
 8001ea0:	e692      	b.n	8001bc8 <__aeabi_dsub+0xdc>
 8001ea2:	4308      	orrs	r0, r1
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	1e50      	subs	r0, r2, #1
 8001ea8:	4182      	sbcs	r2, r0
 8001eaa:	e66d      	b.n	8001b88 <__aeabi_dsub+0x9c>
 8001eac:	4cca      	ldr	r4, [pc, #808]	; (80021d8 <__aeabi_dsub+0x6ec>)
 8001eae:	1c72      	adds	r2, r6, #1
 8001eb0:	4222      	tst	r2, r4
 8001eb2:	d000      	beq.n	8001eb6 <__aeabi_dsub+0x3ca>
 8001eb4:	e0ad      	b.n	8002012 <__aeabi_dsub+0x526>
 8001eb6:	464a      	mov	r2, r9
 8001eb8:	431a      	orrs	r2, r3
 8001eba:	2e00      	cmp	r6, #0
 8001ebc:	d1b8      	bne.n	8001e30 <__aeabi_dsub+0x344>
 8001ebe:	2a00      	cmp	r2, #0
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_dsub+0x3d8>
 8001ec2:	e158      	b.n	8002176 <__aeabi_dsub+0x68a>
 8001ec4:	000a      	movs	r2, r1
 8001ec6:	4302      	orrs	r2, r0
 8001ec8:	d000      	beq.n	8001ecc <__aeabi_dsub+0x3e0>
 8001eca:	e159      	b.n	8002180 <__aeabi_dsub+0x694>
 8001ecc:	464a      	mov	r2, r9
 8001ece:	0759      	lsls	r1, r3, #29
 8001ed0:	08d2      	lsrs	r2, r2, #3
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	08db      	lsrs	r3, r3, #3
 8001ed6:	e786      	b.n	8001de6 <__aeabi_dsub+0x2fa>
 8001ed8:	464a      	mov	r2, r9
 8001eda:	0759      	lsls	r1, r3, #29
 8001edc:	08d2      	lsrs	r2, r2, #3
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	08db      	lsrs	r3, r3, #3
 8001ee2:	e7c1      	b.n	8001e68 <__aeabi_dsub+0x37c>
 8001ee4:	4dba      	ldr	r5, [pc, #744]	; (80021d0 <__aeabi_dsub+0x6e4>)
 8001ee6:	42aa      	cmp	r2, r5
 8001ee8:	d100      	bne.n	8001eec <__aeabi_dsub+0x400>
 8001eea:	e11e      	b.n	800212a <__aeabi_dsub+0x63e>
 8001eec:	2580      	movs	r5, #128	; 0x80
 8001eee:	042d      	lsls	r5, r5, #16
 8001ef0:	432b      	orrs	r3, r5
 8001ef2:	4664      	mov	r4, ip
 8001ef4:	2c38      	cmp	r4, #56	; 0x38
 8001ef6:	dc5d      	bgt.n	8001fb4 <__aeabi_dsub+0x4c8>
 8001ef8:	2c1f      	cmp	r4, #31
 8001efa:	dd00      	ble.n	8001efe <__aeabi_dsub+0x412>
 8001efc:	e0d0      	b.n	80020a0 <__aeabi_dsub+0x5b4>
 8001efe:	2520      	movs	r5, #32
 8001f00:	4667      	mov	r7, ip
 8001f02:	1b2d      	subs	r5, r5, r4
 8001f04:	464e      	mov	r6, r9
 8001f06:	001c      	movs	r4, r3
 8001f08:	40fe      	lsrs	r6, r7
 8001f0a:	40ac      	lsls	r4, r5
 8001f0c:	4334      	orrs	r4, r6
 8001f0e:	464e      	mov	r6, r9
 8001f10:	40ae      	lsls	r6, r5
 8001f12:	0035      	movs	r5, r6
 8001f14:	40fb      	lsrs	r3, r7
 8001f16:	1e6e      	subs	r6, r5, #1
 8001f18:	41b5      	sbcs	r5, r6
 8001f1a:	1ac9      	subs	r1, r1, r3
 8001f1c:	432c      	orrs	r4, r5
 8001f1e:	e04e      	b.n	8001fbe <__aeabi_dsub+0x4d2>
 8001f20:	464a      	mov	r2, r9
 8001f22:	1a14      	subs	r4, r2, r0
 8001f24:	45a1      	cmp	r9, r4
 8001f26:	4192      	sbcs	r2, r2
 8001f28:	4252      	negs	r2, r2
 8001f2a:	4690      	mov	r8, r2
 8001f2c:	1a5f      	subs	r7, r3, r1
 8001f2e:	003a      	movs	r2, r7
 8001f30:	4647      	mov	r7, r8
 8001f32:	1bd2      	subs	r2, r2, r7
 8001f34:	4690      	mov	r8, r2
 8001f36:	0212      	lsls	r2, r2, #8
 8001f38:	d500      	bpl.n	8001f3c <__aeabi_dsub+0x450>
 8001f3a:	e08b      	b.n	8002054 <__aeabi_dsub+0x568>
 8001f3c:	4642      	mov	r2, r8
 8001f3e:	4322      	orrs	r2, r4
 8001f40:	d000      	beq.n	8001f44 <__aeabi_dsub+0x458>
 8001f42:	e630      	b.n	8001ba6 <__aeabi_dsub+0xba>
 8001f44:	2300      	movs	r3, #0
 8001f46:	2500      	movs	r5, #0
 8001f48:	e74d      	b.n	8001de6 <__aeabi_dsub+0x2fa>
 8001f4a:	464a      	mov	r2, r9
 8001f4c:	0759      	lsls	r1, r3, #29
 8001f4e:	08d2      	lsrs	r2, r2, #3
 8001f50:	430a      	orrs	r2, r1
 8001f52:	08db      	lsrs	r3, r3, #3
 8001f54:	e744      	b.n	8001de0 <__aeabi_dsub+0x2f4>
 8001f56:	4642      	mov	r2, r8
 8001f58:	4b9e      	ldr	r3, [pc, #632]	; (80021d4 <__aeabi_dsub+0x6e8>)
 8001f5a:	0861      	lsrs	r1, r4, #1
 8001f5c:	401a      	ands	r2, r3
 8001f5e:	0013      	movs	r3, r2
 8001f60:	2201      	movs	r2, #1
 8001f62:	4014      	ands	r4, r2
 8001f64:	430c      	orrs	r4, r1
 8001f66:	07da      	lsls	r2, r3, #31
 8001f68:	085b      	lsrs	r3, r3, #1
 8001f6a:	4698      	mov	r8, r3
 8001f6c:	4314      	orrs	r4, r2
 8001f6e:	e641      	b.n	8001bf4 <__aeabi_dsub+0x108>
 8001f70:	001a      	movs	r2, r3
 8001f72:	3e1f      	subs	r6, #31
 8001f74:	40f2      	lsrs	r2, r6
 8001f76:	0016      	movs	r6, r2
 8001f78:	2920      	cmp	r1, #32
 8001f7a:	d003      	beq.n	8001f84 <__aeabi_dsub+0x498>
 8001f7c:	2240      	movs	r2, #64	; 0x40
 8001f7e:	1a51      	subs	r1, r2, r1
 8001f80:	408b      	lsls	r3, r1
 8001f82:	431c      	orrs	r4, r3
 8001f84:	1e62      	subs	r2, r4, #1
 8001f86:	4194      	sbcs	r4, r2
 8001f88:	2300      	movs	r3, #0
 8001f8a:	4334      	orrs	r4, r6
 8001f8c:	4698      	mov	r8, r3
 8001f8e:	2600      	movs	r6, #0
 8001f90:	e71d      	b.n	8001dce <__aeabi_dsub+0x2e2>
 8001f92:	000c      	movs	r4, r1
 8001f94:	3a20      	subs	r2, #32
 8001f96:	40d4      	lsrs	r4, r2
 8001f98:	0022      	movs	r2, r4
 8001f9a:	4664      	mov	r4, ip
 8001f9c:	2c20      	cmp	r4, #32
 8001f9e:	d004      	beq.n	8001faa <__aeabi_dsub+0x4be>
 8001fa0:	2740      	movs	r7, #64	; 0x40
 8001fa2:	1b3f      	subs	r7, r7, r4
 8001fa4:	40b9      	lsls	r1, r7
 8001fa6:	4308      	orrs	r0, r1
 8001fa8:	4680      	mov	r8, r0
 8001faa:	4644      	mov	r4, r8
 8001fac:	1e61      	subs	r1, r4, #1
 8001fae:	418c      	sbcs	r4, r1
 8001fb0:	4322      	orrs	r2, r4
 8001fb2:	e5e9      	b.n	8001b88 <__aeabi_dsub+0x9c>
 8001fb4:	464c      	mov	r4, r9
 8001fb6:	4323      	orrs	r3, r4
 8001fb8:	001c      	movs	r4, r3
 8001fba:	1e63      	subs	r3, r4, #1
 8001fbc:	419c      	sbcs	r4, r3
 8001fbe:	1b04      	subs	r4, r0, r4
 8001fc0:	42a0      	cmp	r0, r4
 8001fc2:	419b      	sbcs	r3, r3
 8001fc4:	425b      	negs	r3, r3
 8001fc6:	1acb      	subs	r3, r1, r3
 8001fc8:	4698      	mov	r8, r3
 8001fca:	465d      	mov	r5, fp
 8001fcc:	0016      	movs	r6, r2
 8001fce:	e5e2      	b.n	8001b96 <__aeabi_dsub+0xaa>
 8001fd0:	464e      	mov	r6, r9
 8001fd2:	431e      	orrs	r6, r3
 8001fd4:	d100      	bne.n	8001fd8 <__aeabi_dsub+0x4ec>
 8001fd6:	e0ae      	b.n	8002136 <__aeabi_dsub+0x64a>
 8001fd8:	1e66      	subs	r6, r4, #1
 8001fda:	2c01      	cmp	r4, #1
 8001fdc:	d100      	bne.n	8001fe0 <__aeabi_dsub+0x4f4>
 8001fde:	e0fd      	b.n	80021dc <__aeabi_dsub+0x6f0>
 8001fe0:	4f7b      	ldr	r7, [pc, #492]	; (80021d0 <__aeabi_dsub+0x6e4>)
 8001fe2:	42bc      	cmp	r4, r7
 8001fe4:	d100      	bne.n	8001fe8 <__aeabi_dsub+0x4fc>
 8001fe6:	e107      	b.n	80021f8 <__aeabi_dsub+0x70c>
 8001fe8:	46b4      	mov	ip, r6
 8001fea:	e69b      	b.n	8001d24 <__aeabi_dsub+0x238>
 8001fec:	4664      	mov	r4, ip
 8001fee:	2220      	movs	r2, #32
 8001ff0:	1b12      	subs	r2, r2, r4
 8001ff2:	000c      	movs	r4, r1
 8001ff4:	4094      	lsls	r4, r2
 8001ff6:	0007      	movs	r7, r0
 8001ff8:	4090      	lsls	r0, r2
 8001ffa:	46a0      	mov	r8, r4
 8001ffc:	4664      	mov	r4, ip
 8001ffe:	1e42      	subs	r2, r0, #1
 8002000:	4190      	sbcs	r0, r2
 8002002:	4662      	mov	r2, ip
 8002004:	40e7      	lsrs	r7, r4
 8002006:	4644      	mov	r4, r8
 8002008:	40d1      	lsrs	r1, r2
 800200a:	433c      	orrs	r4, r7
 800200c:	4304      	orrs	r4, r0
 800200e:	185b      	adds	r3, r3, r1
 8002010:	e6f3      	b.n	8001dfa <__aeabi_dsub+0x30e>
 8002012:	4c6f      	ldr	r4, [pc, #444]	; (80021d0 <__aeabi_dsub+0x6e4>)
 8002014:	42a2      	cmp	r2, r4
 8002016:	d100      	bne.n	800201a <__aeabi_dsub+0x52e>
 8002018:	e0d5      	b.n	80021c6 <__aeabi_dsub+0x6da>
 800201a:	4448      	add	r0, r9
 800201c:	185b      	adds	r3, r3, r1
 800201e:	4548      	cmp	r0, r9
 8002020:	4189      	sbcs	r1, r1
 8002022:	4249      	negs	r1, r1
 8002024:	185b      	adds	r3, r3, r1
 8002026:	07dc      	lsls	r4, r3, #31
 8002028:	0840      	lsrs	r0, r0, #1
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	4698      	mov	r8, r3
 800202e:	0016      	movs	r6, r2
 8002030:	4304      	orrs	r4, r0
 8002032:	e6cc      	b.n	8001dce <__aeabi_dsub+0x2e2>
 8002034:	2a00      	cmp	r2, #0
 8002036:	d000      	beq.n	800203a <__aeabi_dsub+0x54e>
 8002038:	e082      	b.n	8002140 <__aeabi_dsub+0x654>
 800203a:	000a      	movs	r2, r1
 800203c:	4302      	orrs	r2, r0
 800203e:	d140      	bne.n	80020c2 <__aeabi_dsub+0x5d6>
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	2500      	movs	r5, #0
 8002044:	031b      	lsls	r3, r3, #12
 8002046:	e713      	b.n	8001e70 <__aeabi_dsub+0x384>
 8002048:	074b      	lsls	r3, r1, #29
 800204a:	08c2      	lsrs	r2, r0, #3
 800204c:	431a      	orrs	r2, r3
 800204e:	465d      	mov	r5, fp
 8002050:	08cb      	lsrs	r3, r1, #3
 8002052:	e6c5      	b.n	8001de0 <__aeabi_dsub+0x2f4>
 8002054:	464a      	mov	r2, r9
 8002056:	1a84      	subs	r4, r0, r2
 8002058:	42a0      	cmp	r0, r4
 800205a:	4192      	sbcs	r2, r2
 800205c:	1acb      	subs	r3, r1, r3
 800205e:	4252      	negs	r2, r2
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	4698      	mov	r8, r3
 8002064:	465d      	mov	r5, fp
 8002066:	e59e      	b.n	8001ba6 <__aeabi_dsub+0xba>
 8002068:	464a      	mov	r2, r9
 800206a:	0759      	lsls	r1, r3, #29
 800206c:	08d2      	lsrs	r2, r2, #3
 800206e:	430a      	orrs	r2, r1
 8002070:	08db      	lsrs	r3, r3, #3
 8002072:	e6f9      	b.n	8001e68 <__aeabi_dsub+0x37c>
 8002074:	464a      	mov	r2, r9
 8002076:	1a14      	subs	r4, r2, r0
 8002078:	45a1      	cmp	r9, r4
 800207a:	4192      	sbcs	r2, r2
 800207c:	1a5b      	subs	r3, r3, r1
 800207e:	4252      	negs	r2, r2
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	4698      	mov	r8, r3
 8002084:	2601      	movs	r6, #1
 8002086:	e586      	b.n	8001b96 <__aeabi_dsub+0xaa>
 8002088:	464a      	mov	r2, r9
 800208a:	0759      	lsls	r1, r3, #29
 800208c:	08d2      	lsrs	r2, r2, #3
 800208e:	430a      	orrs	r2, r1
 8002090:	08db      	lsrs	r3, r3, #3
 8002092:	e6a5      	b.n	8001de0 <__aeabi_dsub+0x2f4>
 8002094:	464c      	mov	r4, r9
 8002096:	4323      	orrs	r3, r4
 8002098:	001c      	movs	r4, r3
 800209a:	1e63      	subs	r3, r4, #1
 800209c:	419c      	sbcs	r4, r3
 800209e:	e65b      	b.n	8001d58 <__aeabi_dsub+0x26c>
 80020a0:	4665      	mov	r5, ip
 80020a2:	001e      	movs	r6, r3
 80020a4:	3d20      	subs	r5, #32
 80020a6:	40ee      	lsrs	r6, r5
 80020a8:	2c20      	cmp	r4, #32
 80020aa:	d005      	beq.n	80020b8 <__aeabi_dsub+0x5cc>
 80020ac:	2540      	movs	r5, #64	; 0x40
 80020ae:	1b2d      	subs	r5, r5, r4
 80020b0:	40ab      	lsls	r3, r5
 80020b2:	464c      	mov	r4, r9
 80020b4:	431c      	orrs	r4, r3
 80020b6:	46a2      	mov	sl, r4
 80020b8:	4654      	mov	r4, sl
 80020ba:	1e63      	subs	r3, r4, #1
 80020bc:	419c      	sbcs	r4, r3
 80020be:	4334      	orrs	r4, r6
 80020c0:	e77d      	b.n	8001fbe <__aeabi_dsub+0x4d2>
 80020c2:	074b      	lsls	r3, r1, #29
 80020c4:	08c2      	lsrs	r2, r0, #3
 80020c6:	431a      	orrs	r2, r3
 80020c8:	465d      	mov	r5, fp
 80020ca:	08cb      	lsrs	r3, r1, #3
 80020cc:	e6cc      	b.n	8001e68 <__aeabi_dsub+0x37c>
 80020ce:	000a      	movs	r2, r1
 80020d0:	4302      	orrs	r2, r0
 80020d2:	d100      	bne.n	80020d6 <__aeabi_dsub+0x5ea>
 80020d4:	e736      	b.n	8001f44 <__aeabi_dsub+0x458>
 80020d6:	074b      	lsls	r3, r1, #29
 80020d8:	08c2      	lsrs	r2, r0, #3
 80020da:	431a      	orrs	r2, r3
 80020dc:	465d      	mov	r5, fp
 80020de:	08cb      	lsrs	r3, r1, #3
 80020e0:	e681      	b.n	8001de6 <__aeabi_dsub+0x2fa>
 80020e2:	464a      	mov	r2, r9
 80020e4:	1a84      	subs	r4, r0, r2
 80020e6:	42a0      	cmp	r0, r4
 80020e8:	4192      	sbcs	r2, r2
 80020ea:	1acb      	subs	r3, r1, r3
 80020ec:	4252      	negs	r2, r2
 80020ee:	1a9b      	subs	r3, r3, r2
 80020f0:	4698      	mov	r8, r3
 80020f2:	465d      	mov	r5, fp
 80020f4:	2601      	movs	r6, #1
 80020f6:	e54e      	b.n	8001b96 <__aeabi_dsub+0xaa>
 80020f8:	074b      	lsls	r3, r1, #29
 80020fa:	08c2      	lsrs	r2, r0, #3
 80020fc:	431a      	orrs	r2, r3
 80020fe:	08cb      	lsrs	r3, r1, #3
 8002100:	e6b2      	b.n	8001e68 <__aeabi_dsub+0x37c>
 8002102:	464a      	mov	r2, r9
 8002104:	1a14      	subs	r4, r2, r0
 8002106:	45a1      	cmp	r9, r4
 8002108:	4192      	sbcs	r2, r2
 800210a:	1a5f      	subs	r7, r3, r1
 800210c:	4252      	negs	r2, r2
 800210e:	1aba      	subs	r2, r7, r2
 8002110:	4690      	mov	r8, r2
 8002112:	0212      	lsls	r2, r2, #8
 8002114:	d56b      	bpl.n	80021ee <__aeabi_dsub+0x702>
 8002116:	464a      	mov	r2, r9
 8002118:	1a84      	subs	r4, r0, r2
 800211a:	42a0      	cmp	r0, r4
 800211c:	4192      	sbcs	r2, r2
 800211e:	1acb      	subs	r3, r1, r3
 8002120:	4252      	negs	r2, r2
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	4698      	mov	r8, r3
 8002126:	465d      	mov	r5, fp
 8002128:	e564      	b.n	8001bf4 <__aeabi_dsub+0x108>
 800212a:	074b      	lsls	r3, r1, #29
 800212c:	08c2      	lsrs	r2, r0, #3
 800212e:	431a      	orrs	r2, r3
 8002130:	465d      	mov	r5, fp
 8002132:	08cb      	lsrs	r3, r1, #3
 8002134:	e698      	b.n	8001e68 <__aeabi_dsub+0x37c>
 8002136:	074b      	lsls	r3, r1, #29
 8002138:	08c2      	lsrs	r2, r0, #3
 800213a:	431a      	orrs	r2, r3
 800213c:	08cb      	lsrs	r3, r1, #3
 800213e:	e64f      	b.n	8001de0 <__aeabi_dsub+0x2f4>
 8002140:	000a      	movs	r2, r1
 8002142:	4302      	orrs	r2, r0
 8002144:	d090      	beq.n	8002068 <__aeabi_dsub+0x57c>
 8002146:	464a      	mov	r2, r9
 8002148:	075c      	lsls	r4, r3, #29
 800214a:	08d2      	lsrs	r2, r2, #3
 800214c:	4314      	orrs	r4, r2
 800214e:	2280      	movs	r2, #128	; 0x80
 8002150:	08db      	lsrs	r3, r3, #3
 8002152:	0312      	lsls	r2, r2, #12
 8002154:	4213      	tst	r3, r2
 8002156:	d008      	beq.n	800216a <__aeabi_dsub+0x67e>
 8002158:	08ce      	lsrs	r6, r1, #3
 800215a:	4216      	tst	r6, r2
 800215c:	d105      	bne.n	800216a <__aeabi_dsub+0x67e>
 800215e:	08c0      	lsrs	r0, r0, #3
 8002160:	0749      	lsls	r1, r1, #29
 8002162:	4308      	orrs	r0, r1
 8002164:	0004      	movs	r4, r0
 8002166:	465d      	mov	r5, fp
 8002168:	0033      	movs	r3, r6
 800216a:	0f61      	lsrs	r1, r4, #29
 800216c:	00e2      	lsls	r2, r4, #3
 800216e:	0749      	lsls	r1, r1, #29
 8002170:	08d2      	lsrs	r2, r2, #3
 8002172:	430a      	orrs	r2, r1
 8002174:	e678      	b.n	8001e68 <__aeabi_dsub+0x37c>
 8002176:	074b      	lsls	r3, r1, #29
 8002178:	08c2      	lsrs	r2, r0, #3
 800217a:	431a      	orrs	r2, r3
 800217c:	08cb      	lsrs	r3, r1, #3
 800217e:	e632      	b.n	8001de6 <__aeabi_dsub+0x2fa>
 8002180:	4448      	add	r0, r9
 8002182:	185b      	adds	r3, r3, r1
 8002184:	4548      	cmp	r0, r9
 8002186:	4192      	sbcs	r2, r2
 8002188:	4698      	mov	r8, r3
 800218a:	4252      	negs	r2, r2
 800218c:	4490      	add	r8, r2
 800218e:	4643      	mov	r3, r8
 8002190:	0004      	movs	r4, r0
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	d400      	bmi.n	8002198 <__aeabi_dsub+0x6ac>
 8002196:	e61a      	b.n	8001dce <__aeabi_dsub+0x2e2>
 8002198:	4642      	mov	r2, r8
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <__aeabi_dsub+0x6e8>)
 800219c:	2601      	movs	r6, #1
 800219e:	401a      	ands	r2, r3
 80021a0:	4690      	mov	r8, r2
 80021a2:	e614      	b.n	8001dce <__aeabi_dsub+0x2e2>
 80021a4:	4666      	mov	r6, ip
 80021a6:	001f      	movs	r7, r3
 80021a8:	3e20      	subs	r6, #32
 80021aa:	40f7      	lsrs	r7, r6
 80021ac:	2c20      	cmp	r4, #32
 80021ae:	d005      	beq.n	80021bc <__aeabi_dsub+0x6d0>
 80021b0:	2640      	movs	r6, #64	; 0x40
 80021b2:	1b36      	subs	r6, r6, r4
 80021b4:	40b3      	lsls	r3, r6
 80021b6:	464c      	mov	r4, r9
 80021b8:	431c      	orrs	r4, r3
 80021ba:	46a2      	mov	sl, r4
 80021bc:	4654      	mov	r4, sl
 80021be:	1e63      	subs	r3, r4, #1
 80021c0:	419c      	sbcs	r4, r3
 80021c2:	433c      	orrs	r4, r7
 80021c4:	e5c8      	b.n	8001d58 <__aeabi_dsub+0x26c>
 80021c6:	0011      	movs	r1, r2
 80021c8:	2300      	movs	r3, #0
 80021ca:	2200      	movs	r2, #0
 80021cc:	e532      	b.n	8001c34 <__aeabi_dsub+0x148>
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	000007ff 	.word	0x000007ff
 80021d4:	ff7fffff 	.word	0xff7fffff
 80021d8:	000007fe 	.word	0x000007fe
 80021dc:	464a      	mov	r2, r9
 80021de:	1814      	adds	r4, r2, r0
 80021e0:	4284      	cmp	r4, r0
 80021e2:	4192      	sbcs	r2, r2
 80021e4:	185b      	adds	r3, r3, r1
 80021e6:	4698      	mov	r8, r3
 80021e8:	4252      	negs	r2, r2
 80021ea:	4490      	add	r8, r2
 80021ec:	e5e9      	b.n	8001dc2 <__aeabi_dsub+0x2d6>
 80021ee:	4642      	mov	r2, r8
 80021f0:	4322      	orrs	r2, r4
 80021f2:	d100      	bne.n	80021f6 <__aeabi_dsub+0x70a>
 80021f4:	e6a6      	b.n	8001f44 <__aeabi_dsub+0x458>
 80021f6:	e5ea      	b.n	8001dce <__aeabi_dsub+0x2e2>
 80021f8:	074b      	lsls	r3, r1, #29
 80021fa:	08c2      	lsrs	r2, r0, #3
 80021fc:	431a      	orrs	r2, r3
 80021fe:	08cb      	lsrs	r3, r1, #3
 8002200:	e632      	b.n	8001e68 <__aeabi_dsub+0x37c>
 8002202:	2200      	movs	r2, #0
 8002204:	4901      	ldr	r1, [pc, #4]	; (800220c <__aeabi_dsub+0x720>)
 8002206:	0013      	movs	r3, r2
 8002208:	e514      	b.n	8001c34 <__aeabi_dsub+0x148>
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	000007ff 	.word	0x000007ff

08002210 <__aeabi_dcmpun>:
 8002210:	b570      	push	{r4, r5, r6, lr}
 8002212:	0005      	movs	r5, r0
 8002214:	480c      	ldr	r0, [pc, #48]	; (8002248 <__aeabi_dcmpun+0x38>)
 8002216:	030c      	lsls	r4, r1, #12
 8002218:	0016      	movs	r6, r2
 800221a:	0049      	lsls	r1, r1, #1
 800221c:	031a      	lsls	r2, r3, #12
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	0d49      	lsrs	r1, r1, #21
 8002224:	0b12      	lsrs	r2, r2, #12
 8002226:	0d5b      	lsrs	r3, r3, #21
 8002228:	4281      	cmp	r1, r0
 800222a:	d008      	beq.n	800223e <__aeabi_dcmpun+0x2e>
 800222c:	4906      	ldr	r1, [pc, #24]	; (8002248 <__aeabi_dcmpun+0x38>)
 800222e:	2000      	movs	r0, #0
 8002230:	428b      	cmp	r3, r1
 8002232:	d103      	bne.n	800223c <__aeabi_dcmpun+0x2c>
 8002234:	4332      	orrs	r2, r6
 8002236:	0010      	movs	r0, r2
 8002238:	1e42      	subs	r2, r0, #1
 800223a:	4190      	sbcs	r0, r2
 800223c:	bd70      	pop	{r4, r5, r6, pc}
 800223e:	2001      	movs	r0, #1
 8002240:	432c      	orrs	r4, r5
 8002242:	d1fb      	bne.n	800223c <__aeabi_dcmpun+0x2c>
 8002244:	e7f2      	b.n	800222c <__aeabi_dcmpun+0x1c>
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	000007ff 	.word	0x000007ff

0800224c <__aeabi_d2iz>:
 800224c:	000a      	movs	r2, r1
 800224e:	b530      	push	{r4, r5, lr}
 8002250:	4c13      	ldr	r4, [pc, #76]	; (80022a0 <__aeabi_d2iz+0x54>)
 8002252:	0053      	lsls	r3, r2, #1
 8002254:	0309      	lsls	r1, r1, #12
 8002256:	0005      	movs	r5, r0
 8002258:	0b09      	lsrs	r1, r1, #12
 800225a:	2000      	movs	r0, #0
 800225c:	0d5b      	lsrs	r3, r3, #21
 800225e:	0fd2      	lsrs	r2, r2, #31
 8002260:	42a3      	cmp	r3, r4
 8002262:	dd04      	ble.n	800226e <__aeabi_d2iz+0x22>
 8002264:	480f      	ldr	r0, [pc, #60]	; (80022a4 <__aeabi_d2iz+0x58>)
 8002266:	4283      	cmp	r3, r0
 8002268:	dd02      	ble.n	8002270 <__aeabi_d2iz+0x24>
 800226a:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <__aeabi_d2iz+0x5c>)
 800226c:	18d0      	adds	r0, r2, r3
 800226e:	bd30      	pop	{r4, r5, pc}
 8002270:	2080      	movs	r0, #128	; 0x80
 8002272:	0340      	lsls	r0, r0, #13
 8002274:	4301      	orrs	r1, r0
 8002276:	480d      	ldr	r0, [pc, #52]	; (80022ac <__aeabi_d2iz+0x60>)
 8002278:	1ac0      	subs	r0, r0, r3
 800227a:	281f      	cmp	r0, #31
 800227c:	dd08      	ble.n	8002290 <__aeabi_d2iz+0x44>
 800227e:	480c      	ldr	r0, [pc, #48]	; (80022b0 <__aeabi_d2iz+0x64>)
 8002280:	1ac3      	subs	r3, r0, r3
 8002282:	40d9      	lsrs	r1, r3
 8002284:	000b      	movs	r3, r1
 8002286:	4258      	negs	r0, r3
 8002288:	2a00      	cmp	r2, #0
 800228a:	d1f0      	bne.n	800226e <__aeabi_d2iz+0x22>
 800228c:	0018      	movs	r0, r3
 800228e:	e7ee      	b.n	800226e <__aeabi_d2iz+0x22>
 8002290:	4c08      	ldr	r4, [pc, #32]	; (80022b4 <__aeabi_d2iz+0x68>)
 8002292:	40c5      	lsrs	r5, r0
 8002294:	46a4      	mov	ip, r4
 8002296:	4463      	add	r3, ip
 8002298:	4099      	lsls	r1, r3
 800229a:	000b      	movs	r3, r1
 800229c:	432b      	orrs	r3, r5
 800229e:	e7f2      	b.n	8002286 <__aeabi_d2iz+0x3a>
 80022a0:	000003fe 	.word	0x000003fe
 80022a4:	0000041d 	.word	0x0000041d
 80022a8:	7fffffff 	.word	0x7fffffff
 80022ac:	00000433 	.word	0x00000433
 80022b0:	00000413 	.word	0x00000413
 80022b4:	fffffbed 	.word	0xfffffbed

080022b8 <__aeabi_i2d>:
 80022b8:	b570      	push	{r4, r5, r6, lr}
 80022ba:	2800      	cmp	r0, #0
 80022bc:	d016      	beq.n	80022ec <__aeabi_i2d+0x34>
 80022be:	17c3      	asrs	r3, r0, #31
 80022c0:	18c5      	adds	r5, r0, r3
 80022c2:	405d      	eors	r5, r3
 80022c4:	0fc4      	lsrs	r4, r0, #31
 80022c6:	0028      	movs	r0, r5
 80022c8:	f000 f91c 	bl	8002504 <__clzsi2>
 80022cc:	4a11      	ldr	r2, [pc, #68]	; (8002314 <__aeabi_i2d+0x5c>)
 80022ce:	1a12      	subs	r2, r2, r0
 80022d0:	280a      	cmp	r0, #10
 80022d2:	dc16      	bgt.n	8002302 <__aeabi_i2d+0x4a>
 80022d4:	0003      	movs	r3, r0
 80022d6:	002e      	movs	r6, r5
 80022d8:	3315      	adds	r3, #21
 80022da:	409e      	lsls	r6, r3
 80022dc:	230b      	movs	r3, #11
 80022de:	1a18      	subs	r0, r3, r0
 80022e0:	40c5      	lsrs	r5, r0
 80022e2:	0553      	lsls	r3, r2, #21
 80022e4:	032d      	lsls	r5, r5, #12
 80022e6:	0b2d      	lsrs	r5, r5, #12
 80022e8:	0d5b      	lsrs	r3, r3, #21
 80022ea:	e003      	b.n	80022f4 <__aeabi_i2d+0x3c>
 80022ec:	2400      	movs	r4, #0
 80022ee:	2300      	movs	r3, #0
 80022f0:	2500      	movs	r5, #0
 80022f2:	2600      	movs	r6, #0
 80022f4:	051b      	lsls	r3, r3, #20
 80022f6:	432b      	orrs	r3, r5
 80022f8:	07e4      	lsls	r4, r4, #31
 80022fa:	4323      	orrs	r3, r4
 80022fc:	0030      	movs	r0, r6
 80022fe:	0019      	movs	r1, r3
 8002300:	bd70      	pop	{r4, r5, r6, pc}
 8002302:	380b      	subs	r0, #11
 8002304:	4085      	lsls	r5, r0
 8002306:	0553      	lsls	r3, r2, #21
 8002308:	032d      	lsls	r5, r5, #12
 800230a:	2600      	movs	r6, #0
 800230c:	0b2d      	lsrs	r5, r5, #12
 800230e:	0d5b      	lsrs	r3, r3, #21
 8002310:	e7f0      	b.n	80022f4 <__aeabi_i2d+0x3c>
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	0000041e 	.word	0x0000041e

08002318 <__aeabi_ui2d>:
 8002318:	b510      	push	{r4, lr}
 800231a:	1e04      	subs	r4, r0, #0
 800231c:	d010      	beq.n	8002340 <__aeabi_ui2d+0x28>
 800231e:	f000 f8f1 	bl	8002504 <__clzsi2>
 8002322:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <__aeabi_ui2d+0x48>)
 8002324:	1a1b      	subs	r3, r3, r0
 8002326:	280a      	cmp	r0, #10
 8002328:	dc11      	bgt.n	800234e <__aeabi_ui2d+0x36>
 800232a:	220b      	movs	r2, #11
 800232c:	0021      	movs	r1, r4
 800232e:	1a12      	subs	r2, r2, r0
 8002330:	40d1      	lsrs	r1, r2
 8002332:	3015      	adds	r0, #21
 8002334:	030a      	lsls	r2, r1, #12
 8002336:	055b      	lsls	r3, r3, #21
 8002338:	4084      	lsls	r4, r0
 800233a:	0b12      	lsrs	r2, r2, #12
 800233c:	0d5b      	lsrs	r3, r3, #21
 800233e:	e001      	b.n	8002344 <__aeabi_ui2d+0x2c>
 8002340:	2300      	movs	r3, #0
 8002342:	2200      	movs	r2, #0
 8002344:	051b      	lsls	r3, r3, #20
 8002346:	4313      	orrs	r3, r2
 8002348:	0020      	movs	r0, r4
 800234a:	0019      	movs	r1, r3
 800234c:	bd10      	pop	{r4, pc}
 800234e:	0022      	movs	r2, r4
 8002350:	380b      	subs	r0, #11
 8002352:	4082      	lsls	r2, r0
 8002354:	055b      	lsls	r3, r3, #21
 8002356:	0312      	lsls	r2, r2, #12
 8002358:	2400      	movs	r4, #0
 800235a:	0b12      	lsrs	r2, r2, #12
 800235c:	0d5b      	lsrs	r3, r3, #21
 800235e:	e7f1      	b.n	8002344 <__aeabi_ui2d+0x2c>
 8002360:	0000041e 	.word	0x0000041e

08002364 <__aeabi_f2d>:
 8002364:	b570      	push	{r4, r5, r6, lr}
 8002366:	0043      	lsls	r3, r0, #1
 8002368:	0246      	lsls	r6, r0, #9
 800236a:	0fc4      	lsrs	r4, r0, #31
 800236c:	20fe      	movs	r0, #254	; 0xfe
 800236e:	0e1b      	lsrs	r3, r3, #24
 8002370:	1c59      	adds	r1, r3, #1
 8002372:	0a75      	lsrs	r5, r6, #9
 8002374:	4208      	tst	r0, r1
 8002376:	d00c      	beq.n	8002392 <__aeabi_f2d+0x2e>
 8002378:	22e0      	movs	r2, #224	; 0xe0
 800237a:	0092      	lsls	r2, r2, #2
 800237c:	4694      	mov	ip, r2
 800237e:	076d      	lsls	r5, r5, #29
 8002380:	0b36      	lsrs	r6, r6, #12
 8002382:	4463      	add	r3, ip
 8002384:	051b      	lsls	r3, r3, #20
 8002386:	4333      	orrs	r3, r6
 8002388:	07e4      	lsls	r4, r4, #31
 800238a:	4323      	orrs	r3, r4
 800238c:	0028      	movs	r0, r5
 800238e:	0019      	movs	r1, r3
 8002390:	bd70      	pop	{r4, r5, r6, pc}
 8002392:	2b00      	cmp	r3, #0
 8002394:	d114      	bne.n	80023c0 <__aeabi_f2d+0x5c>
 8002396:	2d00      	cmp	r5, #0
 8002398:	d01b      	beq.n	80023d2 <__aeabi_f2d+0x6e>
 800239a:	0028      	movs	r0, r5
 800239c:	f000 f8b2 	bl	8002504 <__clzsi2>
 80023a0:	280a      	cmp	r0, #10
 80023a2:	dc1c      	bgt.n	80023de <__aeabi_f2d+0x7a>
 80023a4:	230b      	movs	r3, #11
 80023a6:	002a      	movs	r2, r5
 80023a8:	1a1b      	subs	r3, r3, r0
 80023aa:	40da      	lsrs	r2, r3
 80023ac:	0003      	movs	r3, r0
 80023ae:	3315      	adds	r3, #21
 80023b0:	409d      	lsls	r5, r3
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <__aeabi_f2d+0x88>)
 80023b4:	0312      	lsls	r2, r2, #12
 80023b6:	1a1b      	subs	r3, r3, r0
 80023b8:	055b      	lsls	r3, r3, #21
 80023ba:	0b16      	lsrs	r6, r2, #12
 80023bc:	0d5b      	lsrs	r3, r3, #21
 80023be:	e7e1      	b.n	8002384 <__aeabi_f2d+0x20>
 80023c0:	2d00      	cmp	r5, #0
 80023c2:	d009      	beq.n	80023d8 <__aeabi_f2d+0x74>
 80023c4:	0b32      	lsrs	r2, r6, #12
 80023c6:	2680      	movs	r6, #128	; 0x80
 80023c8:	0336      	lsls	r6, r6, #12
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <__aeabi_f2d+0x8c>)
 80023cc:	076d      	lsls	r5, r5, #29
 80023ce:	4316      	orrs	r6, r2
 80023d0:	e7d8      	b.n	8002384 <__aeabi_f2d+0x20>
 80023d2:	2300      	movs	r3, #0
 80023d4:	2600      	movs	r6, #0
 80023d6:	e7d5      	b.n	8002384 <__aeabi_f2d+0x20>
 80023d8:	2600      	movs	r6, #0
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <__aeabi_f2d+0x8c>)
 80023dc:	e7d2      	b.n	8002384 <__aeabi_f2d+0x20>
 80023de:	0003      	movs	r3, r0
 80023e0:	002a      	movs	r2, r5
 80023e2:	3b0b      	subs	r3, #11
 80023e4:	409a      	lsls	r2, r3
 80023e6:	2500      	movs	r5, #0
 80023e8:	e7e3      	b.n	80023b2 <__aeabi_f2d+0x4e>
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	00000389 	.word	0x00000389
 80023f0:	000007ff 	.word	0x000007ff

080023f4 <__aeabi_d2f>:
 80023f4:	0002      	movs	r2, r0
 80023f6:	004b      	lsls	r3, r1, #1
 80023f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023fa:	0308      	lsls	r0, r1, #12
 80023fc:	0d5b      	lsrs	r3, r3, #21
 80023fe:	4e3d      	ldr	r6, [pc, #244]	; (80024f4 <__aeabi_d2f+0x100>)
 8002400:	0fcc      	lsrs	r4, r1, #31
 8002402:	0a40      	lsrs	r0, r0, #9
 8002404:	0f51      	lsrs	r1, r2, #29
 8002406:	1c5f      	adds	r7, r3, #1
 8002408:	4308      	orrs	r0, r1
 800240a:	00d5      	lsls	r5, r2, #3
 800240c:	4237      	tst	r7, r6
 800240e:	d00a      	beq.n	8002426 <__aeabi_d2f+0x32>
 8002410:	4939      	ldr	r1, [pc, #228]	; (80024f8 <__aeabi_d2f+0x104>)
 8002412:	185e      	adds	r6, r3, r1
 8002414:	2efe      	cmp	r6, #254	; 0xfe
 8002416:	dd16      	ble.n	8002446 <__aeabi_d2f+0x52>
 8002418:	23ff      	movs	r3, #255	; 0xff
 800241a:	2100      	movs	r1, #0
 800241c:	05db      	lsls	r3, r3, #23
 800241e:	430b      	orrs	r3, r1
 8002420:	07e0      	lsls	r0, r4, #31
 8002422:	4318      	orrs	r0, r3
 8002424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002426:	2b00      	cmp	r3, #0
 8002428:	d106      	bne.n	8002438 <__aeabi_d2f+0x44>
 800242a:	4328      	orrs	r0, r5
 800242c:	d027      	beq.n	800247e <__aeabi_d2f+0x8a>
 800242e:	2105      	movs	r1, #5
 8002430:	0189      	lsls	r1, r1, #6
 8002432:	0a49      	lsrs	r1, r1, #9
 8002434:	b2db      	uxtb	r3, r3
 8002436:	e7f1      	b.n	800241c <__aeabi_d2f+0x28>
 8002438:	4305      	orrs	r5, r0
 800243a:	d0ed      	beq.n	8002418 <__aeabi_d2f+0x24>
 800243c:	2180      	movs	r1, #128	; 0x80
 800243e:	03c9      	lsls	r1, r1, #15
 8002440:	23ff      	movs	r3, #255	; 0xff
 8002442:	4301      	orrs	r1, r0
 8002444:	e7ea      	b.n	800241c <__aeabi_d2f+0x28>
 8002446:	2e00      	cmp	r6, #0
 8002448:	dd1c      	ble.n	8002484 <__aeabi_d2f+0x90>
 800244a:	0192      	lsls	r2, r2, #6
 800244c:	0011      	movs	r1, r2
 800244e:	1e4a      	subs	r2, r1, #1
 8002450:	4191      	sbcs	r1, r2
 8002452:	00c0      	lsls	r0, r0, #3
 8002454:	0f6d      	lsrs	r5, r5, #29
 8002456:	4301      	orrs	r1, r0
 8002458:	4329      	orrs	r1, r5
 800245a:	074b      	lsls	r3, r1, #29
 800245c:	d048      	beq.n	80024f0 <__aeabi_d2f+0xfc>
 800245e:	230f      	movs	r3, #15
 8002460:	400b      	ands	r3, r1
 8002462:	2b04      	cmp	r3, #4
 8002464:	d000      	beq.n	8002468 <__aeabi_d2f+0x74>
 8002466:	3104      	adds	r1, #4
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	04db      	lsls	r3, r3, #19
 800246c:	400b      	ands	r3, r1
 800246e:	d03f      	beq.n	80024f0 <__aeabi_d2f+0xfc>
 8002470:	1c72      	adds	r2, r6, #1
 8002472:	2efe      	cmp	r6, #254	; 0xfe
 8002474:	d0d0      	beq.n	8002418 <__aeabi_d2f+0x24>
 8002476:	0189      	lsls	r1, r1, #6
 8002478:	0a49      	lsrs	r1, r1, #9
 800247a:	b2d3      	uxtb	r3, r2
 800247c:	e7ce      	b.n	800241c <__aeabi_d2f+0x28>
 800247e:	2300      	movs	r3, #0
 8002480:	2100      	movs	r1, #0
 8002482:	e7cb      	b.n	800241c <__aeabi_d2f+0x28>
 8002484:	0032      	movs	r2, r6
 8002486:	3217      	adds	r2, #23
 8002488:	db22      	blt.n	80024d0 <__aeabi_d2f+0xdc>
 800248a:	2180      	movs	r1, #128	; 0x80
 800248c:	221e      	movs	r2, #30
 800248e:	0409      	lsls	r1, r1, #16
 8002490:	4308      	orrs	r0, r1
 8002492:	1b92      	subs	r2, r2, r6
 8002494:	2a1f      	cmp	r2, #31
 8002496:	dd1d      	ble.n	80024d4 <__aeabi_d2f+0xe0>
 8002498:	2102      	movs	r1, #2
 800249a:	4249      	negs	r1, r1
 800249c:	1b8e      	subs	r6, r1, r6
 800249e:	0001      	movs	r1, r0
 80024a0:	40f1      	lsrs	r1, r6
 80024a2:	000e      	movs	r6, r1
 80024a4:	2a20      	cmp	r2, #32
 80024a6:	d004      	beq.n	80024b2 <__aeabi_d2f+0xbe>
 80024a8:	4a14      	ldr	r2, [pc, #80]	; (80024fc <__aeabi_d2f+0x108>)
 80024aa:	4694      	mov	ip, r2
 80024ac:	4463      	add	r3, ip
 80024ae:	4098      	lsls	r0, r3
 80024b0:	4305      	orrs	r5, r0
 80024b2:	0029      	movs	r1, r5
 80024b4:	1e4d      	subs	r5, r1, #1
 80024b6:	41a9      	sbcs	r1, r5
 80024b8:	4331      	orrs	r1, r6
 80024ba:	2600      	movs	r6, #0
 80024bc:	074b      	lsls	r3, r1, #29
 80024be:	d1ce      	bne.n	800245e <__aeabi_d2f+0x6a>
 80024c0:	2080      	movs	r0, #128	; 0x80
 80024c2:	000b      	movs	r3, r1
 80024c4:	04c0      	lsls	r0, r0, #19
 80024c6:	2201      	movs	r2, #1
 80024c8:	4003      	ands	r3, r0
 80024ca:	4201      	tst	r1, r0
 80024cc:	d1d3      	bne.n	8002476 <__aeabi_d2f+0x82>
 80024ce:	e7af      	b.n	8002430 <__aeabi_d2f+0x3c>
 80024d0:	2300      	movs	r3, #0
 80024d2:	e7ac      	b.n	800242e <__aeabi_d2f+0x3a>
 80024d4:	490a      	ldr	r1, [pc, #40]	; (8002500 <__aeabi_d2f+0x10c>)
 80024d6:	468c      	mov	ip, r1
 80024d8:	0029      	movs	r1, r5
 80024da:	4463      	add	r3, ip
 80024dc:	40d1      	lsrs	r1, r2
 80024de:	409d      	lsls	r5, r3
 80024e0:	000a      	movs	r2, r1
 80024e2:	0029      	movs	r1, r5
 80024e4:	4098      	lsls	r0, r3
 80024e6:	1e4d      	subs	r5, r1, #1
 80024e8:	41a9      	sbcs	r1, r5
 80024ea:	4301      	orrs	r1, r0
 80024ec:	4311      	orrs	r1, r2
 80024ee:	e7e4      	b.n	80024ba <__aeabi_d2f+0xc6>
 80024f0:	0033      	movs	r3, r6
 80024f2:	e79d      	b.n	8002430 <__aeabi_d2f+0x3c>
 80024f4:	000007fe 	.word	0x000007fe
 80024f8:	fffffc80 	.word	0xfffffc80
 80024fc:	fffffca2 	.word	0xfffffca2
 8002500:	fffffc82 	.word	0xfffffc82

08002504 <__clzsi2>:
 8002504:	211c      	movs	r1, #28
 8002506:	2301      	movs	r3, #1
 8002508:	041b      	lsls	r3, r3, #16
 800250a:	4298      	cmp	r0, r3
 800250c:	d301      	bcc.n	8002512 <__clzsi2+0xe>
 800250e:	0c00      	lsrs	r0, r0, #16
 8002510:	3910      	subs	r1, #16
 8002512:	0a1b      	lsrs	r3, r3, #8
 8002514:	4298      	cmp	r0, r3
 8002516:	d301      	bcc.n	800251c <__clzsi2+0x18>
 8002518:	0a00      	lsrs	r0, r0, #8
 800251a:	3908      	subs	r1, #8
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	4298      	cmp	r0, r3
 8002520:	d301      	bcc.n	8002526 <__clzsi2+0x22>
 8002522:	0900      	lsrs	r0, r0, #4
 8002524:	3904      	subs	r1, #4
 8002526:	a202      	add	r2, pc, #8	; (adr r2, 8002530 <__clzsi2+0x2c>)
 8002528:	5c10      	ldrb	r0, [r2, r0]
 800252a:	1840      	adds	r0, r0, r1
 800252c:	4770      	bx	lr
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	02020304 	.word	0x02020304
 8002534:	01010101 	.word	0x01010101
	...

08002540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002544:	f000 feae 	bl	80032a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002548:	f000 f88e 	bl	8002668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800254c:	f000 fa10 	bl	8002970 <MX_GPIO_Init>
  MX_DMA_Init();
 8002550:	f000 f9f0 	bl	8002934 <MX_DMA_Init>
  MX_I2C2_Init();
 8002554:	f000 f986 	bl	8002864 <MX_I2C2_Init>
  MX_TIM16_Init();
 8002558:	f000 f9c4 	bl	80028e4 <MX_TIM16_Init>
  MX_ADC1_Init();
 800255c:	f000 f8fa 	bl	8002754 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  /* ssd1306 init*/
  ssd1306_Init();
 8002560:	f000 fa62 	bl	8002a28 <ssd1306_Init>
  HV = 0;
 8002564:	4b35      	ldr	r3, [pc, #212]	; (800263c <main+0xfc>)
 8002566:	2200      	movs	r2, #0
 8002568:	601a      	str	r2, [r3, #0]
  LV = 0;
 800256a:	4b35      	ldr	r3, [pc, #212]	; (8002640 <main+0x100>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim16);
 8002570:	4b34      	ldr	r3, [pc, #208]	; (8002644 <main+0x104>)
 8002572:	0018      	movs	r0, r3
 8002574:	f003 fe6a 	bl	800624c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ssd1306_Fill(Black);
 8002578:	2000      	movs	r0, #0
 800257a:	f000 fa89 	bl	8002a90 <ssd1306_Fill>
	  ssd1306_SetCursor(0, 0);
 800257e:	2100      	movs	r1, #0
 8002580:	2000      	movs	r0, #0
 8002582:	f000 fbf7 	bl	8002d74 <ssd1306_SetCursor>
	  sprintf(text1306, "Bat:%6.3f", LV);
 8002586:	4b2e      	ldr	r3, [pc, #184]	; (8002640 <main+0x100>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	1c18      	adds	r0, r3, #0
 800258c:	f7ff feea 	bl	8002364 <__aeabi_f2d>
 8002590:	0002      	movs	r2, r0
 8002592:	000b      	movs	r3, r1
 8002594:	492c      	ldr	r1, [pc, #176]	; (8002648 <main+0x108>)
 8002596:	482d      	ldr	r0, [pc, #180]	; (800264c <main+0x10c>)
 8002598:	f004 fd4a 	bl	8007030 <siprintf>
	  ssd1306_WriteString(text1306, Font_6x8, White);
 800259c:	4a2c      	ldr	r2, [pc, #176]	; (8002650 <main+0x110>)
 800259e:	482b      	ldr	r0, [pc, #172]	; (800264c <main+0x10c>)
 80025a0:	2301      	movs	r3, #1
 80025a2:	6811      	ldr	r1, [r2, #0]
 80025a4:	6852      	ldr	r2, [r2, #4]
 80025a6:	f000 fbbb 	bl	8002d20 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 8);
 80025aa:	2108      	movs	r1, #8
 80025ac:	2000      	movs	r0, #0
 80025ae:	f000 fbe1 	bl	8002d74 <ssd1306_SetCursor>
	  sprintf(text1306, "HV : %5.0f", HV);
 80025b2:	4b22      	ldr	r3, [pc, #136]	; (800263c <main+0xfc>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	1c18      	adds	r0, r3, #0
 80025b8:	f7ff fed4 	bl	8002364 <__aeabi_f2d>
 80025bc:	0002      	movs	r2, r0
 80025be:	000b      	movs	r3, r1
 80025c0:	4924      	ldr	r1, [pc, #144]	; (8002654 <main+0x114>)
 80025c2:	4822      	ldr	r0, [pc, #136]	; (800264c <main+0x10c>)
 80025c4:	f004 fd34 	bl	8007030 <siprintf>
	  ssd1306_WriteString(text1306, Font_6x8, White);
 80025c8:	4a21      	ldr	r2, [pc, #132]	; (8002650 <main+0x110>)
 80025ca:	4820      	ldr	r0, [pc, #128]	; (800264c <main+0x10c>)
 80025cc:	2301      	movs	r3, #1
 80025ce:	6811      	ldr	r1, [r2, #0]
 80025d0:	6852      	ldr	r2, [r2, #4]
 80025d2:	f000 fba5 	bl	8002d20 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 16);
 80025d6:	2110      	movs	r1, #16
 80025d8:	2000      	movs	r0, #0
 80025da:	f000 fbcb 	bl	8002d74 <ssd1306_SetCursor>
	  sprintf(text1306, "Max: %5.0f", HVmax);
 80025de:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <main+0x118>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	1c18      	adds	r0, r3, #0
 80025e4:	f7ff febe 	bl	8002364 <__aeabi_f2d>
 80025e8:	0002      	movs	r2, r0
 80025ea:	000b      	movs	r3, r1
 80025ec:	491b      	ldr	r1, [pc, #108]	; (800265c <main+0x11c>)
 80025ee:	4817      	ldr	r0, [pc, #92]	; (800264c <main+0x10c>)
 80025f0:	f004 fd1e 	bl	8007030 <siprintf>
	  ssd1306_WriteString(text1306, Font_6x8, White);
 80025f4:	4a16      	ldr	r2, [pc, #88]	; (8002650 <main+0x110>)
 80025f6:	4815      	ldr	r0, [pc, #84]	; (800264c <main+0x10c>)
 80025f8:	2301      	movs	r3, #1
 80025fa:	6811      	ldr	r1, [r2, #0]
 80025fc:	6852      	ldr	r2, [r2, #4]
 80025fe:	f000 fb8f 	bl	8002d20 <ssd1306_WriteString>
	  ssd1306_SetCursor(0, 24);
 8002602:	2118      	movs	r1, #24
 8002604:	2000      	movs	r0, #0
 8002606:	f000 fbb5 	bl	8002d74 <ssd1306_SetCursor>
	  sprintf(text1306, "Min: %5.0f", HVmin);
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <main+0x120>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	1c18      	adds	r0, r3, #0
 8002610:	f7ff fea8 	bl	8002364 <__aeabi_f2d>
 8002614:	0002      	movs	r2, r0
 8002616:	000b      	movs	r3, r1
 8002618:	4912      	ldr	r1, [pc, #72]	; (8002664 <main+0x124>)
 800261a:	480c      	ldr	r0, [pc, #48]	; (800264c <main+0x10c>)
 800261c:	f004 fd08 	bl	8007030 <siprintf>
	  ssd1306_WriteString(text1306, Font_6x8, White);
 8002620:	4a0b      	ldr	r2, [pc, #44]	; (8002650 <main+0x110>)
 8002622:	480a      	ldr	r0, [pc, #40]	; (800264c <main+0x10c>)
 8002624:	2301      	movs	r3, #1
 8002626:	6811      	ldr	r1, [r2, #0]
 8002628:	6852      	ldr	r2, [r2, #4]
 800262a:	f000 fb79 	bl	8002d20 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 800262e:	f000 fa51 	bl	8002ad4 <ssd1306_UpdateScreen>
	  HAL_Delay(100);
 8002632:	2064      	movs	r0, #100	; 0x64
 8002634:	f000 febc 	bl	80033b0 <HAL_Delay>
	  ssd1306_Fill(Black);
 8002638:	e79e      	b.n	8002578 <main+0x38>
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	20000488 	.word	0x20000488
 8002640:	20000314 	.word	0x20000314
 8002644:	2000043c 	.word	0x2000043c
 8002648:	080095e0 	.word	0x080095e0
 800264c:	200003d0 	.word	0x200003d0
 8002650:	20000000 	.word	0x20000000
 8002654:	080095ec 	.word	0x080095ec
 8002658:	20000364 	.word	0x20000364
 800265c:	080095f8 	.word	0x080095f8
 8002660:	20000368 	.word	0x20000368
 8002664:	08009604 	.word	0x08009604

08002668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b09d      	sub	sp, #116	; 0x74
 800266c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800266e:	2438      	movs	r4, #56	; 0x38
 8002670:	193b      	adds	r3, r7, r4
 8002672:	0018      	movs	r0, r3
 8002674:	2338      	movs	r3, #56	; 0x38
 8002676:	001a      	movs	r2, r3
 8002678:	2100      	movs	r1, #0
 800267a:	f004 f856 	bl	800672a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800267e:	2328      	movs	r3, #40	; 0x28
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	0018      	movs	r0, r3
 8002684:	2310      	movs	r3, #16
 8002686:	001a      	movs	r2, r3
 8002688:	2100      	movs	r1, #0
 800268a:	f004 f84e 	bl	800672a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800268e:	003b      	movs	r3, r7
 8002690:	0018      	movs	r0, r3
 8002692:	2328      	movs	r3, #40	; 0x28
 8002694:	001a      	movs	r2, r3
 8002696:	2100      	movs	r1, #0
 8002698:	f004 f847 	bl	800672a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	0018      	movs	r0, r3
 80026a2:	f002 ff17 	bl	80054d4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026a6:	193b      	adds	r3, r7, r4
 80026a8:	2202      	movs	r2, #2
 80026aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026ac:	193b      	adds	r3, r7, r4
 80026ae:	2280      	movs	r2, #128	; 0x80
 80026b0:	0052      	lsls	r2, r2, #1
 80026b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80026b4:	0021      	movs	r1, r4
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	2240      	movs	r2, #64	; 0x40
 80026c0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	2202      	movs	r2, #2
 80026c6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	2202      	movs	r2, #2
 80026cc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	2200      	movs	r2, #0
 80026d2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	2208      	movs	r2, #8
 80026d8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026da:	187b      	adds	r3, r7, r1
 80026dc:	2280      	movs	r2, #128	; 0x80
 80026de:	0292      	lsls	r2, r2, #10
 80026e0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80026e2:	187b      	adds	r3, r7, r1
 80026e4:	2280      	movs	r2, #128	; 0x80
 80026e6:	0492      	lsls	r2, r2, #18
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80026ea:	187b      	adds	r3, r7, r1
 80026ec:	2280      	movs	r2, #128	; 0x80
 80026ee:	0592      	lsls	r2, r2, #22
 80026f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026f2:	187b      	adds	r3, r7, r1
 80026f4:	0018      	movs	r0, r3
 80026f6:	f002 ff2d 	bl	8005554 <HAL_RCC_OscConfig>
 80026fa:	1e03      	subs	r3, r0, #0
 80026fc:	d001      	beq.n	8002702 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80026fe:	f000 f959 	bl	80029b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002702:	2128      	movs	r1, #40	; 0x28
 8002704:	187b      	adds	r3, r7, r1
 8002706:	2207      	movs	r2, #7
 8002708:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800270a:	187b      	adds	r3, r7, r1
 800270c:	2202      	movs	r2, #2
 800270e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002710:	187b      	adds	r3, r7, r1
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002716:	187b      	adds	r3, r7, r1
 8002718:	2200      	movs	r2, #0
 800271a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800271c:	187b      	adds	r3, r7, r1
 800271e:	2102      	movs	r1, #2
 8002720:	0018      	movs	r0, r3
 8002722:	f003 fa37 	bl	8005b94 <HAL_RCC_ClockConfig>
 8002726:	1e03      	subs	r3, r0, #0
 8002728:	d001      	beq.n	800272e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800272a:	f000 f943 	bl	80029b4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800272e:	003b      	movs	r3, r7
 8002730:	2280      	movs	r2, #128	; 0x80
 8002732:	01d2      	lsls	r2, r2, #7
 8002734:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8002736:	003b      	movs	r3, r7
 8002738:	2200      	movs	r2, #0
 800273a:	61da      	str	r2, [r3, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800273c:	003b      	movs	r3, r7
 800273e:	0018      	movs	r0, r3
 8002740:	f003 fbb2 	bl	8005ea8 <HAL_RCCEx_PeriphCLKConfig>
 8002744:	1e03      	subs	r3, r0, #0
 8002746:	d001      	beq.n	800274c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8002748:	f000 f934 	bl	80029b4 <Error_Handler>
  }
}
 800274c:	46c0      	nop			; (mov r8, r8)
 800274e:	46bd      	mov	sp, r7
 8002750:	b01d      	add	sp, #116	; 0x74
 8002752:	bd90      	pop	{r4, r7, pc}

08002754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	0018      	movs	r0, r3
 800275e:	230c      	movs	r3, #12
 8002760:	001a      	movs	r2, r3
 8002762:	2100      	movs	r1, #0
 8002764:	f003 ffe1 	bl	800672a <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002768:	4b3a      	ldr	r3, [pc, #232]	; (8002854 <MX_ADC1_Init+0x100>)
 800276a:	4a3b      	ldr	r2, [pc, #236]	; (8002858 <MX_ADC1_Init+0x104>)
 800276c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800276e:	4b39      	ldr	r3, [pc, #228]	; (8002854 <MX_ADC1_Init+0x100>)
 8002770:	2280      	movs	r2, #128	; 0x80
 8002772:	0612      	lsls	r2, r2, #24
 8002774:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002776:	4b37      	ldr	r3, [pc, #220]	; (8002854 <MX_ADC1_Init+0x100>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800277c:	4b35      	ldr	r3, [pc, #212]	; (8002854 <MX_ADC1_Init+0x100>)
 800277e:	2200      	movs	r2, #0
 8002780:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002782:	4b34      	ldr	r3, [pc, #208]	; (8002854 <MX_ADC1_Init+0x100>)
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	0392      	lsls	r2, r2, #14
 8002788:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800278a:	4b32      	ldr	r3, [pc, #200]	; (8002854 <MX_ADC1_Init+0x100>)
 800278c:	2204      	movs	r2, #4
 800278e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002790:	4b30      	ldr	r3, [pc, #192]	; (8002854 <MX_ADC1_Init+0x100>)
 8002792:	2200      	movs	r2, #0
 8002794:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002796:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <MX_ADC1_Init+0x100>)
 8002798:	2200      	movs	r2, #0
 800279a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800279c:	4b2d      	ldr	r3, [pc, #180]	; (8002854 <MX_ADC1_Init+0x100>)
 800279e:	2200      	movs	r2, #0
 80027a0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 80027a2:	4b2c      	ldr	r3, [pc, #176]	; (8002854 <MX_ADC1_Init+0x100>)
 80027a4:	2202      	movs	r2, #2
 80027a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80027a8:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <MX_ADC1_Init+0x100>)
 80027aa:	2220      	movs	r2, #32
 80027ac:	2100      	movs	r1, #0
 80027ae:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80027b0:	4b28      	ldr	r3, [pc, #160]	; (8002854 <MX_ADC1_Init+0x100>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80027b6:	4b27      	ldr	r3, [pc, #156]	; (8002854 <MX_ADC1_Init+0x100>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80027bc:	4b25      	ldr	r3, [pc, #148]	; (8002854 <MX_ADC1_Init+0x100>)
 80027be:	222c      	movs	r2, #44	; 0x2c
 80027c0:	2100      	movs	r1, #0
 80027c2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027c4:	4b23      	ldr	r3, [pc, #140]	; (8002854 <MX_ADC1_Init+0x100>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80027ca:	4b22      	ldr	r3, [pc, #136]	; (8002854 <MX_ADC1_Init+0x100>)
 80027cc:	2207      	movs	r2, #7
 80027ce:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80027d0:	4b20      	ldr	r3, [pc, #128]	; (8002854 <MX_ADC1_Init+0x100>)
 80027d2:	2207      	movs	r2, #7
 80027d4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80027d6:	4b1f      	ldr	r3, [pc, #124]	; (8002854 <MX_ADC1_Init+0x100>)
 80027d8:	223c      	movs	r2, #60	; 0x3c
 80027da:	2100      	movs	r1, #0
 80027dc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80027de:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <MX_ADC1_Init+0x100>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80027e4:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <MX_ADC1_Init+0x100>)
 80027e6:	0018      	movs	r0, r3
 80027e8:	f000 ff46 	bl	8003678 <HAL_ADC_Init>
 80027ec:	1e03      	subs	r3, r0, #0
 80027ee:	d001      	beq.n	80027f4 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80027f0:	f000 f8e0 	bl	80029b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80027f4:	1d3b      	adds	r3, r7, #4
 80027f6:	4a19      	ldr	r2, [pc, #100]	; (800285c <MX_ADC1_Init+0x108>)
 80027f8:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80027fa:	1d3b      	adds	r3, r7, #4
 80027fc:	2200      	movs	r2, #0
 80027fe:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	2200      	movs	r2, #0
 8002804:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002806:	1d3a      	adds	r2, r7, #4
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <MX_ADC1_Init+0x100>)
 800280a:	0011      	movs	r1, r2
 800280c:	0018      	movs	r0, r3
 800280e:	f001 f9b1 	bl	8003b74 <HAL_ADC_ConfigChannel>
 8002812:	1e03      	subs	r3, r0, #0
 8002814:	d001      	beq.n	800281a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8002816:	f000 f8cd 	bl	80029b4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	4a10      	ldr	r2, [pc, #64]	; (8002860 <MX_ADC1_Init+0x10c>)
 800281e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002820:	1d3b      	adds	r3, r7, #4
 8002822:	2204      	movs	r2, #4
 8002824:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002826:	1d3a      	adds	r2, r7, #4
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <MX_ADC1_Init+0x100>)
 800282a:	0011      	movs	r1, r2
 800282c:	0018      	movs	r0, r3
 800282e:	f001 f9a1 	bl	8003b74 <HAL_ADC_ConfigChannel>
 8002832:	1e03      	subs	r3, r0, #0
 8002834:	d001      	beq.n	800283a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8002836:	f000 f8bd 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  while (HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 800283a:	46c0      	nop			; (mov r8, r8)
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <MX_ADC1_Init+0x100>)
 800283e:	0018      	movs	r0, r3
 8002840:	f001 fcfa 	bl	8004238 <HAL_ADCEx_Calibration_Start>
 8002844:	1e03      	subs	r3, r0, #0
 8002846:	d1f9      	bne.n	800283c <MX_ADC1_Init+0xe8>
  /* USER CODE END ADC1_Init 2 */

}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	46bd      	mov	sp, r7
 800284e:	b004      	add	sp, #16
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	2000036c 	.word	0x2000036c
 8002858:	40012400 	.word	0x40012400
 800285c:	20000100 	.word	0x20000100
 8002860:	2c000800 	.word	0x2c000800

08002864 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002868:	4b1b      	ldr	r3, [pc, #108]	; (80028d8 <MX_I2C2_Init+0x74>)
 800286a:	4a1c      	ldr	r2, [pc, #112]	; (80028dc <MX_I2C2_Init+0x78>)
 800286c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00602173;
 800286e:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <MX_I2C2_Init+0x74>)
 8002870:	4a1b      	ldr	r2, [pc, #108]	; (80028e0 <MX_I2C2_Init+0x7c>)
 8002872:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002874:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <MX_I2C2_Init+0x74>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800287a:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <MX_I2C2_Init+0x74>)
 800287c:	2201      	movs	r2, #1
 800287e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002880:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <MX_I2C2_Init+0x74>)
 8002882:	2200      	movs	r2, #0
 8002884:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002886:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <MX_I2C2_Init+0x74>)
 8002888:	2200      	movs	r2, #0
 800288a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800288c:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <MX_I2C2_Init+0x74>)
 800288e:	2200      	movs	r2, #0
 8002890:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <MX_I2C2_Init+0x74>)
 8002894:	2200      	movs	r2, #0
 8002896:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002898:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <MX_I2C2_Init+0x74>)
 800289a:	2200      	movs	r2, #0
 800289c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800289e:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <MX_I2C2_Init+0x74>)
 80028a0:	0018      	movs	r0, r3
 80028a2:	f002 f9df 	bl	8004c64 <HAL_I2C_Init>
 80028a6:	1e03      	subs	r3, r0, #0
 80028a8:	d001      	beq.n	80028ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80028aa:	f000 f883 	bl	80029b4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <MX_I2C2_Init+0x74>)
 80028b0:	2100      	movs	r1, #0
 80028b2:	0018      	movs	r0, r3
 80028b4:	f002 fd76 	bl	80053a4 <HAL_I2CEx_ConfigAnalogFilter>
 80028b8:	1e03      	subs	r3, r0, #0
 80028ba:	d001      	beq.n	80028c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80028bc:	f000 f87a 	bl	80029b4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <MX_I2C2_Init+0x74>)
 80028c2:	2100      	movs	r1, #0
 80028c4:	0018      	movs	r0, r3
 80028c6:	f002 fdb9 	bl	800543c <HAL_I2CEx_ConfigDigitalFilter>
 80028ca:	1e03      	subs	r3, r0, #0
 80028cc:	d001      	beq.n	80028d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80028ce:	f000 f871 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000318 	.word	0x20000318
 80028dc:	40005800 	.word	0x40005800
 80028e0:	00602173 	.word	0x00602173

080028e4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80028e8:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <MX_TIM16_Init+0x44>)
 80028ea:	4a10      	ldr	r2, [pc, #64]	; (800292c <MX_TIM16_Init+0x48>)
 80028ec:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 100;
 80028ee:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <MX_TIM16_Init+0x44>)
 80028f0:	2264      	movs	r2, #100	; 0x64
 80028f2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <MX_TIM16_Init+0x44>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80028fa:	4b0b      	ldr	r3, [pc, #44]	; (8002928 <MX_TIM16_Init+0x44>)
 80028fc:	4a0c      	ldr	r2, [pc, #48]	; (8002930 <MX_TIM16_Init+0x4c>)
 80028fe:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002900:	4b09      	ldr	r3, [pc, #36]	; (8002928 <MX_TIM16_Init+0x44>)
 8002902:	2200      	movs	r2, #0
 8002904:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002906:	4b08      	ldr	r3, [pc, #32]	; (8002928 <MX_TIM16_Init+0x44>)
 8002908:	2200      	movs	r2, #0
 800290a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <MX_TIM16_Init+0x44>)
 800290e:	2280      	movs	r2, #128	; 0x80
 8002910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <MX_TIM16_Init+0x44>)
 8002914:	0018      	movs	r0, r3
 8002916:	f003 fc41 	bl	800619c <HAL_TIM_Base_Init>
 800291a:	1e03      	subs	r3, r0, #0
 800291c:	d001      	beq.n	8002922 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800291e:	f000 f849 	bl	80029b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002922:	46c0      	nop			; (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2000043c 	.word	0x2000043c
 800292c:	40014400 	.word	0x40014400
 8002930:	0000ffff 	.word	0x0000ffff

08002934 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <MX_DMA_Init+0x38>)
 800293c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800293e:	4b0b      	ldr	r3, [pc, #44]	; (800296c <MX_DMA_Init+0x38>)
 8002940:	2101      	movs	r1, #1
 8002942:	430a      	orrs	r2, r1
 8002944:	639a      	str	r2, [r3, #56]	; 0x38
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <MX_DMA_Init+0x38>)
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	2201      	movs	r2, #1
 800294c:	4013      	ands	r3, r2
 800294e:	607b      	str	r3, [r7, #4]
 8002950:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2100      	movs	r1, #0
 8002956:	2009      	movs	r0, #9
 8002958:	f001 fd9c 	bl	8004494 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800295c:	2009      	movs	r0, #9
 800295e:	f001 fdae 	bl	80044be <HAL_NVIC_EnableIRQ>

}
 8002962:	46c0      	nop			; (mov r8, r8)
 8002964:	46bd      	mov	sp, r7
 8002966:	b002      	add	sp, #8
 8002968:	bd80      	pop	{r7, pc}
 800296a:	46c0      	nop			; (mov r8, r8)
 800296c:	40021000 	.word	0x40021000

08002970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002976:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <MX_GPIO_Init+0x40>)
 8002978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800297a:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <MX_GPIO_Init+0x40>)
 800297c:	2102      	movs	r1, #2
 800297e:	430a      	orrs	r2, r1
 8002980:	635a      	str	r2, [r3, #52]	; 0x34
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <MX_GPIO_Init+0x40>)
 8002984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002986:	2202      	movs	r2, #2
 8002988:	4013      	ands	r3, r2
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800298e:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <MX_GPIO_Init+0x40>)
 8002990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002992:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <MX_GPIO_Init+0x40>)
 8002994:	2101      	movs	r1, #1
 8002996:	430a      	orrs	r2, r1
 8002998:	635a      	str	r2, [r3, #52]	; 0x34
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <MX_GPIO_Init+0x40>)
 800299c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299e:	2201      	movs	r2, #1
 80029a0:	4013      	ands	r3, r2
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	683b      	ldr	r3, [r7, #0]

}
 80029a6:	46c0      	nop			; (mov r8, r8)
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b002      	add	sp, #8
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	40021000 	.word	0x40021000

080029b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029b8:	b672      	cpsid	i
}
 80029ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029bc:	e7fe      	b.n	80029bc <Error_Handler+0x8>
	...

080029c0 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af04      	add	r7, sp, #16
 80029c6:	0002      	movs	r2, r0
 80029c8:	1dfb      	adds	r3, r7, #7
 80029ca:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80029cc:	4808      	ldr	r0, [pc, #32]	; (80029f0 <ssd1306_WriteCommand+0x30>)
 80029ce:	2301      	movs	r3, #1
 80029d0:	425b      	negs	r3, r3
 80029d2:	9302      	str	r3, [sp, #8]
 80029d4:	2301      	movs	r3, #1
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	1dfb      	adds	r3, r7, #7
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	2301      	movs	r3, #1
 80029de:	2200      	movs	r2, #0
 80029e0:	2178      	movs	r1, #120	; 0x78
 80029e2:	f002 f9d5 	bl	8004d90 <HAL_I2C_Mem_Write>
}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	46bd      	mov	sp, r7
 80029ea:	b002      	add	sp, #8
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	20000318 	.word	0x20000318

080029f4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af04      	add	r7, sp, #16
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	4808      	ldr	r0, [pc, #32]	; (8002a24 <ssd1306_WriteData+0x30>)
 8002a04:	2201      	movs	r2, #1
 8002a06:	4252      	negs	r2, r2
 8002a08:	9202      	str	r2, [sp, #8]
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2301      	movs	r3, #1
 8002a12:	2240      	movs	r2, #64	; 0x40
 8002a14:	2178      	movs	r1, #120	; 0x78
 8002a16:	f002 f9bb 	bl	8004d90 <HAL_I2C_Mem_Write>
}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b002      	add	sp, #8
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	20000318 	.word	0x20000318

08002a28 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002a28:	b590      	push	{r4, r7, lr}
 8002a2a:	b08b      	sub	sp, #44	; 0x2c
 8002a2c:	af04      	add	r7, sp, #16
	uint8_t oled64_initbuf1[]={0x04, 0x00,0xae,0xa8,0x3f,0xd3,0x00,0x40,0xa1,0xc8,0xda,0x12,0x81,0x10,0xa4,0xa6,0xd5,0x80,0x8d,0x14,0xaf,0x20,0x02};
 8002a2e:	003b      	movs	r3, r7
 8002a30:	4a14      	ldr	r2, [pc, #80]	; (8002a84 <ssd1306_Init+0x5c>)
 8002a32:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002a34:	c313      	stmia	r3!, {r0, r1, r4}
 8002a36:	ca03      	ldmia	r2!, {r0, r1}
 8002a38:	c303      	stmia	r3!, {r0, r1}
 8002a3a:	8811      	ldrh	r1, [r2, #0]
 8002a3c:	8019      	strh	r1, [r3, #0]
 8002a3e:	7892      	ldrb	r2, [r2, #2]
 8002a40:	709a      	strb	r2, [r3, #2]
    // Wait for the screen to boot
    HAL_I2C_Mem_Write(&hi2c2, 0x78, 0x00, 1, oled64_initbuf1, sizeof(oled64_initbuf1), 100);
 8002a42:	4811      	ldr	r0, [pc, #68]	; (8002a88 <ssd1306_Init+0x60>)
 8002a44:	2364      	movs	r3, #100	; 0x64
 8002a46:	9302      	str	r3, [sp, #8]
 8002a48:	2317      	movs	r3, #23
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	003b      	movs	r3, r7
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	2301      	movs	r3, #1
 8002a52:	2200      	movs	r2, #0
 8002a54:	2178      	movs	r1, #120	; 0x78
 8002a56:	f002 f99b 	bl	8004d90 <HAL_I2C_Mem_Write>
    /*  Contrast  */
    //ssd1306_WriteCommand(0x81);
    //ssd1306_WriteCommand(0x10);
    HAL_Delay(100);
 8002a5a:	2064      	movs	r0, #100	; 0x64
 8002a5c:	f000 fca8 	bl	80033b0 <HAL_Delay>
    // Clear screen
    ssd1306_Fill(Black);
 8002a60:	2000      	movs	r0, #0
 8002a62:	f000 f815 	bl	8002a90 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002a66:	f000 f835 	bl	8002ad4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <ssd1306_Init+0x64>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <ssd1306_Init+0x64>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002a76:	4b05      	ldr	r3, [pc, #20]	; (8002a8c <ssd1306_Init+0x64>)
 8002a78:	2201      	movs	r2, #1
 8002a7a:	711a      	strb	r2, [r3, #4]
}
 8002a7c:	46c0      	nop			; (mov r8, r8)
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b007      	add	sp, #28
 8002a82:	bd90      	pop	{r4, r7, pc}
 8002a84:	08009610 	.word	0x08009610
 8002a88:	20000318 	.word	0x20000318
 8002a8c:	20000300 	.word	0x20000300

08002a90 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	0002      	movs	r2, r0
 8002a98:	1dfb      	adds	r3, r7, #7
 8002a9a:	701a      	strb	r2, [r3, #0]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	e00e      	b.n	8002ac0 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002aa2:	1dfb      	adds	r3, r7, #7
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <ssd1306_Fill+0x1e>
 8002aaa:	2100      	movs	r1, #0
 8002aac:	e000      	b.n	8002ab0 <ssd1306_Fill+0x20>
 8002aae:	21ff      	movs	r1, #255	; 0xff
 8002ab0:	4a07      	ldr	r2, [pc, #28]	; (8002ad0 <ssd1306_Fill+0x40>)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	18d3      	adds	r3, r2, r3
 8002ab6:	1c0a      	adds	r2, r1, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	3301      	adds	r3, #1
 8002abe:	60fb      	str	r3, [r7, #12]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2bff      	cmp	r3, #255	; 0xff
 8002ac4:	d9ed      	bls.n	8002aa2 <ssd1306_Fill+0x12>
    }
}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	46c0      	nop			; (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b004      	add	sp, #16
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000200 	.word	0x20000200

08002ad4 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002ada:	1dfb      	adds	r3, r7, #7
 8002adc:	2200      	movs	r2, #0
 8002ade:	701a      	strb	r2, [r3, #0]
 8002ae0:	e017      	b.n	8002b12 <ssd1306_UpdateScreen+0x3e>
        ssd1306_WriteCommand(0xB0 + i + 4); // Set the current RAM page address.
 8002ae2:	1dfb      	adds	r3, r7, #7
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	3b4c      	subs	r3, #76	; 0x4c
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	0018      	movs	r0, r3
 8002aec:	f7ff ff68 	bl	80029c0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002af0:	2012      	movs	r0, #18
 8002af2:	f7ff ff65 	bl	80029c0 <ssd1306_WriteCommand>
        //ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002af6:	1dfb      	adds	r3, r7, #7
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	019a      	lsls	r2, r3, #6
 8002afc:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <ssd1306_UpdateScreen+0x50>)
 8002afe:	18d3      	adds	r3, r2, r3
 8002b00:	2140      	movs	r1, #64	; 0x40
 8002b02:	0018      	movs	r0, r3
 8002b04:	f7ff ff76 	bl	80029f4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002b08:	1dfb      	adds	r3, r7, #7
 8002b0a:	781a      	ldrb	r2, [r3, #0]
 8002b0c:	1dfb      	adds	r3, r7, #7
 8002b0e:	3201      	adds	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
 8002b12:	1dfb      	adds	r3, r7, #7
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d9e3      	bls.n	8002ae2 <ssd1306_UpdateScreen+0xe>
    }
}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	46c0      	nop			; (mov r8, r8)
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b002      	add	sp, #8
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000200 	.word	0x20000200

08002b28 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	0004      	movs	r4, r0
 8002b30:	0008      	movs	r0, r1
 8002b32:	0011      	movs	r1, r2
 8002b34:	1dfb      	adds	r3, r7, #7
 8002b36:	1c22      	adds	r2, r4, #0
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	1dbb      	adds	r3, r7, #6
 8002b3c:	1c02      	adds	r2, r0, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
 8002b40:	1d7b      	adds	r3, r7, #5
 8002b42:	1c0a      	adds	r2, r1, #0
 8002b44:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002b46:	1dfb      	adds	r3, r7, #7
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b3f      	cmp	r3, #63	; 0x3f
 8002b4c:	d847      	bhi.n	8002bde <ssd1306_DrawPixel+0xb6>
 8002b4e:	1dbb      	adds	r3, r7, #6
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b1f      	cmp	r3, #31
 8002b54:	d843      	bhi.n	8002bde <ssd1306_DrawPixel+0xb6>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002b56:	1d7b      	adds	r3, r7, #5
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d11e      	bne.n	8002b9c <ssd1306_DrawPixel+0x74>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002b5e:	1dfb      	adds	r3, r7, #7
 8002b60:	781a      	ldrb	r2, [r3, #0]
 8002b62:	1dbb      	adds	r3, r7, #6
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	08db      	lsrs	r3, r3, #3
 8002b68:	b2d8      	uxtb	r0, r3
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	019b      	lsls	r3, r3, #6
 8002b6e:	18d3      	adds	r3, r2, r3
 8002b70:	4a1d      	ldr	r2, [pc, #116]	; (8002be8 <ssd1306_DrawPixel+0xc0>)
 8002b72:	5cd3      	ldrb	r3, [r2, r3]
 8002b74:	b25a      	sxtb	r2, r3
 8002b76:	1dbb      	adds	r3, r7, #6
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2107      	movs	r1, #7
 8002b7c:	400b      	ands	r3, r1
 8002b7e:	2101      	movs	r1, #1
 8002b80:	4099      	lsls	r1, r3
 8002b82:	000b      	movs	r3, r1
 8002b84:	b25b      	sxtb	r3, r3
 8002b86:	4313      	orrs	r3, r2
 8002b88:	b259      	sxtb	r1, r3
 8002b8a:	1dfb      	adds	r3, r7, #7
 8002b8c:	781a      	ldrb	r2, [r3, #0]
 8002b8e:	0003      	movs	r3, r0
 8002b90:	019b      	lsls	r3, r3, #6
 8002b92:	18d3      	adds	r3, r2, r3
 8002b94:	b2c9      	uxtb	r1, r1
 8002b96:	4a14      	ldr	r2, [pc, #80]	; (8002be8 <ssd1306_DrawPixel+0xc0>)
 8002b98:	54d1      	strb	r1, [r2, r3]
 8002b9a:	e021      	b.n	8002be0 <ssd1306_DrawPixel+0xb8>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002b9c:	1dfb      	adds	r3, r7, #7
 8002b9e:	781a      	ldrb	r2, [r3, #0]
 8002ba0:	1dbb      	adds	r3, r7, #6
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	08db      	lsrs	r3, r3, #3
 8002ba6:	b2d8      	uxtb	r0, r3
 8002ba8:	0003      	movs	r3, r0
 8002baa:	019b      	lsls	r3, r3, #6
 8002bac:	18d3      	adds	r3, r2, r3
 8002bae:	4a0e      	ldr	r2, [pc, #56]	; (8002be8 <ssd1306_DrawPixel+0xc0>)
 8002bb0:	5cd3      	ldrb	r3, [r2, r3]
 8002bb2:	b25b      	sxtb	r3, r3
 8002bb4:	1dba      	adds	r2, r7, #6
 8002bb6:	7812      	ldrb	r2, [r2, #0]
 8002bb8:	2107      	movs	r1, #7
 8002bba:	400a      	ands	r2, r1
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	4091      	lsls	r1, r2
 8002bc0:	000a      	movs	r2, r1
 8002bc2:	b252      	sxtb	r2, r2
 8002bc4:	43d2      	mvns	r2, r2
 8002bc6:	b252      	sxtb	r2, r2
 8002bc8:	4013      	ands	r3, r2
 8002bca:	b259      	sxtb	r1, r3
 8002bcc:	1dfb      	adds	r3, r7, #7
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	019b      	lsls	r3, r3, #6
 8002bd4:	18d3      	adds	r3, r2, r3
 8002bd6:	b2c9      	uxtb	r1, r1
 8002bd8:	4a03      	ldr	r2, [pc, #12]	; (8002be8 <ssd1306_DrawPixel+0xc0>)
 8002bda:	54d1      	strb	r1, [r2, r3]
 8002bdc:	e000      	b.n	8002be0 <ssd1306_DrawPixel+0xb8>
        return;
 8002bde:	46c0      	nop			; (mov r8, r8)
    }
}
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b003      	add	sp, #12
 8002be4:	bd90      	pop	{r4, r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	20000200 	.word	0x20000200

08002bec <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b089      	sub	sp, #36	; 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	0004      	movs	r4, r0
 8002bf4:	1d38      	adds	r0, r7, #4
 8002bf6:	6001      	str	r1, [r0, #0]
 8002bf8:	6042      	str	r2, [r0, #4]
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	200f      	movs	r0, #15
 8002bfe:	183b      	adds	r3, r7, r0
 8002c00:	1c22      	adds	r2, r4, #0
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	230e      	movs	r3, #14
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	1c0a      	adds	r2, r1, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002c0c:	183b      	adds	r3, r7, r0
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b1f      	cmp	r3, #31
 8002c12:	d903      	bls.n	8002c1c <ssd1306_WriteChar+0x30>
 8002c14:	183b      	adds	r3, r7, r0
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b7e      	cmp	r3, #126	; 0x7e
 8002c1a:	d901      	bls.n	8002c20 <ssd1306_WriteChar+0x34>
        return 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	e078      	b.n	8002d12 <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002c20:	4b3e      	ldr	r3, [pc, #248]	; (8002d1c <ssd1306_WriteChar+0x130>)
 8002c22:	881b      	ldrh	r3, [r3, #0]
 8002c24:	001a      	movs	r2, r3
 8002c26:	1d3b      	adds	r3, r7, #4
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	18d3      	adds	r3, r2, r3
 8002c2c:	2b40      	cmp	r3, #64	; 0x40
 8002c2e:	dc07      	bgt.n	8002c40 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002c30:	4b3a      	ldr	r3, [pc, #232]	; (8002d1c <ssd1306_WriteChar+0x130>)
 8002c32:	885b      	ldrh	r3, [r3, #2]
 8002c34:	001a      	movs	r2, r3
 8002c36:	1d3b      	adds	r3, r7, #4
 8002c38:	785b      	ldrb	r3, [r3, #1]
 8002c3a:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	dd01      	ble.n	8002c44 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8002c40:	2300      	movs	r3, #0
 8002c42:	e066      	b.n	8002d12 <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]
 8002c48:	e051      	b.n	8002cee <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	230f      	movs	r3, #15
 8002c50:	18fb      	adds	r3, r7, r3
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	3b20      	subs	r3, #32
 8002c56:	1d39      	adds	r1, r7, #4
 8002c58:	7849      	ldrb	r1, [r1, #1]
 8002c5a:	434b      	muls	r3, r1
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	18cb      	adds	r3, r1, r3
 8002c62:	005b      	lsls	r3, r3, #1
 8002c64:	18d3      	adds	r3, r2, r3
 8002c66:	881b      	ldrh	r3, [r3, #0]
 8002c68:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	e035      	b.n	8002cdc <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	409a      	lsls	r2, r3
 8002c76:	2380      	movs	r3, #128	; 0x80
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d014      	beq.n	8002ca8 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002c7e:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <ssd1306_WriteChar+0x130>)
 8002c80:	881b      	ldrh	r3, [r3, #0]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	18d3      	adds	r3, r2, r3
 8002c8a:	b2d8      	uxtb	r0, r3
 8002c8c:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <ssd1306_WriteChar+0x130>)
 8002c8e:	885b      	ldrh	r3, [r3, #2]
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	18d3      	adds	r3, r2, r3
 8002c98:	b2d9      	uxtb	r1, r3
 8002c9a:	230e      	movs	r3, #14
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	001a      	movs	r2, r3
 8002ca2:	f7ff ff41 	bl	8002b28 <ssd1306_DrawPixel>
 8002ca6:	e016      	b.n	8002cd6 <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002ca8:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <ssd1306_WriteChar+0x130>)
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	18d3      	adds	r3, r2, r3
 8002cb4:	b2d8      	uxtb	r0, r3
 8002cb6:	4b19      	ldr	r3, [pc, #100]	; (8002d1c <ssd1306_WriteChar+0x130>)
 8002cb8:	885b      	ldrh	r3, [r3, #2]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	18d3      	adds	r3, r2, r3
 8002cc2:	b2d9      	uxtb	r1, r3
 8002cc4:	230e      	movs	r3, #14
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	425a      	negs	r2, r3
 8002ccc:	4153      	adcs	r3, r2
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	001a      	movs	r2, r3
 8002cd2:	f7ff ff29 	bl	8002b28 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	61bb      	str	r3, [r7, #24]
 8002cdc:	1d3b      	adds	r3, r7, #4
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	001a      	movs	r2, r3
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d3c3      	bcc.n	8002c70 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	3301      	adds	r3, #1
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	1d3b      	adds	r3, r7, #4
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	001a      	movs	r2, r3
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d3a7      	bcc.n	8002c4a <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <ssd1306_WriteChar+0x130>)
 8002cfc:	881a      	ldrh	r2, [r3, #0]
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	18d3      	adds	r3, r2, r3
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <ssd1306_WriteChar+0x130>)
 8002d0a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002d0c:	230f      	movs	r3, #15
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	781b      	ldrb	r3, [r3, #0]
}
 8002d12:	0018      	movs	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b009      	add	sp, #36	; 0x24
 8002d18:	bd90      	pop	{r4, r7, pc}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	20000300 	.word	0x20000300

08002d20 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	1d38      	adds	r0, r7, #4
 8002d2a:	6001      	str	r1, [r0, #0]
 8002d2c:	6042      	str	r2, [r0, #4]
 8002d2e:	001a      	movs	r2, r3
 8002d30:	1cfb      	adds	r3, r7, #3
 8002d32:	701a      	strb	r2, [r3, #0]
    // Write until null-byte
    while (*str) {
 8002d34:	e014      	b.n	8002d60 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	7818      	ldrb	r0, [r3, #0]
 8002d3a:	1cfb      	adds	r3, r7, #3
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	1d3a      	adds	r2, r7, #4
 8002d40:	6811      	ldr	r1, [r2, #0]
 8002d42:	6852      	ldr	r2, [r2, #4]
 8002d44:	f7ff ff52 	bl	8002bec <ssd1306_WriteChar>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	001a      	movs	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d002      	beq.n	8002d5a <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	e008      	b.n	8002d6c <ssd1306_WriteString+0x4c>
        }
        
        // Next char
        str++;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1e6      	bne.n	8002d36 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	781b      	ldrb	r3, [r3, #0]
}
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b004      	add	sp, #16
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	0002      	movs	r2, r0
 8002d7c:	1dfb      	adds	r3, r7, #7
 8002d7e:	701a      	strb	r2, [r3, #0]
 8002d80:	1dbb      	adds	r3, r7, #6
 8002d82:	1c0a      	adds	r2, r1, #0
 8002d84:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8002d86:	1dfb      	adds	r3, r7, #7
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <ssd1306_SetCursor+0x30>)
 8002d8e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002d90:	1dbb      	adds	r3, r7, #6
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <ssd1306_SetCursor+0x30>)
 8002d98:	805a      	strh	r2, [r3, #2]
}
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b002      	add	sp, #8
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	20000300 	.word	0x20000300

08002da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dae:	4b0f      	ldr	r3, [pc, #60]	; (8002dec <HAL_MspInit+0x44>)
 8002db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002db2:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <HAL_MspInit+0x44>)
 8002db4:	2101      	movs	r1, #1
 8002db6:	430a      	orrs	r2, r1
 8002db8:	641a      	str	r2, [r3, #64]	; 0x40
 8002dba:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <HAL_MspInit+0x44>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	607b      	str	r3, [r7, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	4b09      	ldr	r3, [pc, #36]	; (8002dec <HAL_MspInit+0x44>)
 8002dc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dca:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_MspInit+0x44>)
 8002dcc:	2180      	movs	r1, #128	; 0x80
 8002dce:	0549      	lsls	r1, r1, #21
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_MspInit+0x44>)
 8002dd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	055b      	lsls	r3, r3, #21
 8002ddc:	4013      	ands	r3, r2
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b002      	add	sp, #8
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	40021000 	.word	0x40021000

08002df0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002df0:	b590      	push	{r4, r7, lr}
 8002df2:	b08b      	sub	sp, #44	; 0x2c
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df8:	2414      	movs	r4, #20
 8002dfa:	193b      	adds	r3, r7, r4
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	2314      	movs	r3, #20
 8002e00:	001a      	movs	r2, r3
 8002e02:	2100      	movs	r1, #0
 8002e04:	f003 fc91 	bl	800672a <memset>
  if(hadc->Instance==ADC1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a2d      	ldr	r2, [pc, #180]	; (8002ec4 <HAL_ADC_MspInit+0xd4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d153      	bne.n	8002eba <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002e12:	4b2d      	ldr	r3, [pc, #180]	; (8002ec8 <HAL_ADC_MspInit+0xd8>)
 8002e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e16:	4b2c      	ldr	r3, [pc, #176]	; (8002ec8 <HAL_ADC_MspInit+0xd8>)
 8002e18:	2180      	movs	r1, #128	; 0x80
 8002e1a:	0349      	lsls	r1, r1, #13
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40
 8002e20:	4b29      	ldr	r3, [pc, #164]	; (8002ec8 <HAL_ADC_MspInit+0xd8>)
 8002e22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e24:	2380      	movs	r3, #128	; 0x80
 8002e26:	035b      	lsls	r3, r3, #13
 8002e28:	4013      	ands	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2e:	4b26      	ldr	r3, [pc, #152]	; (8002ec8 <HAL_ADC_MspInit+0xd8>)
 8002e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e32:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <HAL_ADC_MspInit+0xd8>)
 8002e34:	2102      	movs	r1, #2
 8002e36:	430a      	orrs	r2, r1
 8002e38:	635a      	str	r2, [r3, #52]	; 0x34
 8002e3a:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <HAL_ADC_MspInit+0xd8>)
 8002e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3e:	2202      	movs	r2, #2
 8002e40:	4013      	ands	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB7     ------> ADC1_IN11
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0;
 8002e46:	193b      	adds	r3, r7, r4
 8002e48:	2281      	movs	r2, #129	; 0x81
 8002e4a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e4c:	193b      	adds	r3, r7, r4
 8002e4e:	2203      	movs	r2, #3
 8002e50:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	193b      	adds	r3, r7, r4
 8002e54:	2200      	movs	r2, #0
 8002e56:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e58:	193b      	adds	r3, r7, r4
 8002e5a:	4a1c      	ldr	r2, [pc, #112]	; (8002ecc <HAL_ADC_MspInit+0xdc>)
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	0010      	movs	r0, r2
 8002e60:	f001 fd9c 	bl	800499c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <HAL_ADC_MspInit+0xe0>)
 8002e66:	4a1b      	ldr	r2, [pc, #108]	; (8002ed4 <HAL_ADC_MspInit+0xe4>)
 8002e68:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002e6a:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_ADC_MspInit+0xe0>)
 8002e6c:	2205      	movs	r2, #5
 8002e6e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e70:	4b17      	ldr	r3, [pc, #92]	; (8002ed0 <HAL_ADC_MspInit+0xe0>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e76:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <HAL_ADC_MspInit+0xe0>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e7c:	4b14      	ldr	r3, [pc, #80]	; (8002ed0 <HAL_ADC_MspInit+0xe0>)
 8002e7e:	2280      	movs	r2, #128	; 0x80
 8002e80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e82:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <HAL_ADC_MspInit+0xe0>)
 8002e84:	2280      	movs	r2, #128	; 0x80
 8002e86:	0052      	lsls	r2, r2, #1
 8002e88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e8a:	4b11      	ldr	r3, [pc, #68]	; (8002ed0 <HAL_ADC_MspInit+0xe0>)
 8002e8c:	2280      	movs	r2, #128	; 0x80
 8002e8e:	00d2      	lsls	r2, r2, #3
 8002e90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002e92:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <HAL_ADC_MspInit+0xe0>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e98:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <HAL_ADC_MspInit+0xe0>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_ADC_MspInit+0xe0>)
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f001 fb29 	bl	80044f8 <HAL_DMA_Init>
 8002ea6:	1e03      	subs	r3, r0, #0
 8002ea8:	d001      	beq.n	8002eae <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8002eaa:	f7ff fd83 	bl	80029b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a07      	ldr	r2, [pc, #28]	; (8002ed0 <HAL_ADC_MspInit+0xe0>)
 8002eb2:	651a      	str	r2, [r3, #80]	; 0x50
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_ADC_MspInit+0xe0>)
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b00b      	add	sp, #44	; 0x2c
 8002ec0:	bd90      	pop	{r4, r7, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	40012400 	.word	0x40012400
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	50000400 	.word	0x50000400
 8002ed0:	200003e0 	.word	0x200003e0
 8002ed4:	40020008 	.word	0x40020008

08002ed8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b08b      	sub	sp, #44	; 0x2c
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee0:	2414      	movs	r4, #20
 8002ee2:	193b      	adds	r3, r7, r4
 8002ee4:	0018      	movs	r0, r3
 8002ee6:	2314      	movs	r3, #20
 8002ee8:	001a      	movs	r2, r3
 8002eea:	2100      	movs	r1, #0
 8002eec:	f003 fc1d 	bl	800672a <memset>
  if(hi2c->Instance==I2C2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1c      	ldr	r2, [pc, #112]	; (8002f68 <HAL_I2C_MspInit+0x90>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d131      	bne.n	8002f5e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efa:	4b1c      	ldr	r3, [pc, #112]	; (8002f6c <HAL_I2C_MspInit+0x94>)
 8002efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002efe:	4b1b      	ldr	r3, [pc, #108]	; (8002f6c <HAL_I2C_MspInit+0x94>)
 8002f00:	2101      	movs	r1, #1
 8002f02:	430a      	orrs	r2, r1
 8002f04:	635a      	str	r2, [r3, #52]	; 0x34
 8002f06:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_I2C_MspInit+0x94>)
 8002f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
 8002f10:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002f12:	193b      	adds	r3, r7, r4
 8002f14:	22c0      	movs	r2, #192	; 0xc0
 8002f16:	0152      	lsls	r2, r2, #5
 8002f18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f1a:	0021      	movs	r1, r4
 8002f1c:	187b      	adds	r3, r7, r1
 8002f1e:	2212      	movs	r2, #18
 8002f20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f22:	187b      	adds	r3, r7, r1
 8002f24:	2201      	movs	r2, #1
 8002f26:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002f2e:	187b      	adds	r3, r7, r1
 8002f30:	2206      	movs	r2, #6
 8002f32:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f34:	187a      	adds	r2, r7, r1
 8002f36:	23a0      	movs	r3, #160	; 0xa0
 8002f38:	05db      	lsls	r3, r3, #23
 8002f3a:	0011      	movs	r1, r2
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f001 fd2d 	bl	800499c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002f42:	4b0a      	ldr	r3, [pc, #40]	; (8002f6c <HAL_I2C_MspInit+0x94>)
 8002f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f46:	4b09      	ldr	r3, [pc, #36]	; (8002f6c <HAL_I2C_MspInit+0x94>)
 8002f48:	2180      	movs	r1, #128	; 0x80
 8002f4a:	03c9      	lsls	r1, r1, #15
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_I2C_MspInit+0x94>)
 8002f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f54:	2380      	movs	r3, #128	; 0x80
 8002f56:	03db      	lsls	r3, r3, #15
 8002f58:	4013      	ands	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b00b      	add	sp, #44	; 0x2c
 8002f64:	bd90      	pop	{r4, r7, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	40005800 	.word	0x40005800
 8002f6c:	40021000 	.word	0x40021000

08002f70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a0e      	ldr	r2, [pc, #56]	; (8002fb8 <HAL_TIM_Base_MspInit+0x48>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d115      	bne.n	8002fae <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002f82:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <HAL_TIM_Base_MspInit+0x4c>)
 8002f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f86:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <HAL_TIM_Base_MspInit+0x4c>)
 8002f88:	2180      	movs	r1, #128	; 0x80
 8002f8a:	0289      	lsls	r1, r1, #10
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <HAL_TIM_Base_MspInit+0x4c>)
 8002f92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f94:	2380      	movs	r3, #128	; 0x80
 8002f96:	029b      	lsls	r3, r3, #10
 8002f98:	4013      	ands	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	2015      	movs	r0, #21
 8002fa4:	f001 fa76 	bl	8004494 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8002fa8:	2015      	movs	r0, #21
 8002faa:	f001 fa88 	bl	80044be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002fae:	46c0      	nop			; (mov r8, r8)
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	b004      	add	sp, #16
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	46c0      	nop			; (mov r8, r8)
 8002fb8:	40014400 	.word	0x40014400
 8002fbc:	40021000 	.word	0x40021000

08002fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fc4:	e7fe      	b.n	8002fc4 <NMI_Handler+0x4>

08002fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fca:	e7fe      	b.n	8002fca <HardFault_Handler+0x4>

08002fcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002fd0:	46c0      	nop			; (mov r8, r8)
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}

08002fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fe4:	f000 f9c8 	bl	8003378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fe8:	46c0      	nop			; (mov r8, r8)
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

	LV = (float) adcBufer[0] / 4096 * 5.6;
 8002ff4:	4b1f      	ldr	r3, [pc, #124]	; (8003074 <DMA1_Channel1_IRQHandler+0x84>)
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	f7fd fb5f 	bl	80006bc <__aeabi_ui2f>
 8002ffe:	1c03      	adds	r3, r0, #0
 8003000:	218b      	movs	r1, #139	; 0x8b
 8003002:	05c9      	lsls	r1, r1, #23
 8003004:	1c18      	adds	r0, r3, #0
 8003006:	f7fd fa4d 	bl	80004a4 <__aeabi_fdiv>
 800300a:	1c03      	adds	r3, r0, #0
 800300c:	1c18      	adds	r0, r3, #0
 800300e:	f7ff f9a9 	bl	8002364 <__aeabi_f2d>
 8003012:	4a19      	ldr	r2, [pc, #100]	; (8003078 <DMA1_Channel1_IRQHandler+0x88>)
 8003014:	4b19      	ldr	r3, [pc, #100]	; (800307c <DMA1_Channel1_IRQHandler+0x8c>)
 8003016:	f7fe fafd 	bl	8001614 <__aeabi_dmul>
 800301a:	0002      	movs	r2, r0
 800301c:	000b      	movs	r3, r1
 800301e:	0010      	movs	r0, r2
 8003020:	0019      	movs	r1, r3
 8003022:	f7ff f9e7 	bl	80023f4 <__aeabi_d2f>
 8003026:	1c02      	adds	r2, r0, #0
 8003028:	4b15      	ldr	r3, [pc, #84]	; (8003080 <DMA1_Channel1_IRQHandler+0x90>)
 800302a:	601a      	str	r2, [r3, #0]
	HV = (float) adcBufer[1] / 4096 * 2.8;
 800302c:	4b11      	ldr	r3, [pc, #68]	; (8003074 <DMA1_Channel1_IRQHandler+0x84>)
 800302e:	885b      	ldrh	r3, [r3, #2]
 8003030:	0018      	movs	r0, r3
 8003032:	f7fd fb43 	bl	80006bc <__aeabi_ui2f>
 8003036:	1c03      	adds	r3, r0, #0
 8003038:	218b      	movs	r1, #139	; 0x8b
 800303a:	05c9      	lsls	r1, r1, #23
 800303c:	1c18      	adds	r0, r3, #0
 800303e:	f7fd fa31 	bl	80004a4 <__aeabi_fdiv>
 8003042:	1c03      	adds	r3, r0, #0
 8003044:	1c18      	adds	r0, r3, #0
 8003046:	f7ff f98d 	bl	8002364 <__aeabi_f2d>
 800304a:	4a0b      	ldr	r2, [pc, #44]	; (8003078 <DMA1_Channel1_IRQHandler+0x88>)
 800304c:	4b0d      	ldr	r3, [pc, #52]	; (8003084 <DMA1_Channel1_IRQHandler+0x94>)
 800304e:	f7fe fae1 	bl	8001614 <__aeabi_dmul>
 8003052:	0002      	movs	r2, r0
 8003054:	000b      	movs	r3, r1
 8003056:	0010      	movs	r0, r2
 8003058:	0019      	movs	r1, r3
 800305a:	f7ff f9cb 	bl	80023f4 <__aeabi_d2f>
 800305e:	1c02      	adds	r2, r0, #0
 8003060:	4b09      	ldr	r3, [pc, #36]	; (8003088 <DMA1_Channel1_IRQHandler+0x98>)
 8003062:	601a      	str	r2, [r3, #0]
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003064:	4b09      	ldr	r3, [pc, #36]	; (800308c <DMA1_Channel1_IRQHandler+0x9c>)
 8003066:	0018      	movs	r0, r3
 8003068:	f001 fb56 	bl	8004718 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800306c:	46c0      	nop			; (mov r8, r8)
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	200003dc 	.word	0x200003dc
 8003078:	66666666 	.word	0x66666666
 800307c:	40166666 	.word	0x40166666
 8003080:	20000314 	.word	0x20000314
 8003084:	40066666 	.word	0x40066666
 8003088:	20000488 	.word	0x20000488
 800308c:	200003e0 	.word	0x200003e0

08003090 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) &adcBufer, 2);
 8003094:	4906      	ldr	r1, [pc, #24]	; (80030b0 <TIM16_IRQHandler+0x20>)
 8003096:	4b07      	ldr	r3, [pc, #28]	; (80030b4 <TIM16_IRQHandler+0x24>)
 8003098:	2202      	movs	r2, #2
 800309a:	0018      	movs	r0, r3
 800309c:	f000 fcc4 	bl	8003a28 <HAL_ADC_Start_DMA>
	//HAL_ADC_Start_IT(&hadc1);
  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <TIM16_IRQHandler+0x28>)
 80030a2:	0018      	movs	r0, r3
 80030a4:	f003 f926 	bl	80062f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			; (mov r8, r8)
 80030b0:	200003dc 	.word	0x200003dc
 80030b4:	2000036c 	.word	0x2000036c
 80030b8:	2000043c 	.word	0x2000043c

080030bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
	return 1;
 80030c0:	2301      	movs	r3, #1
}
 80030c2:	0018      	movs	r0, r3
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <_kill>:

int _kill(int pid, int sig)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80030d2:	f003 faf7 	bl	80066c4 <__errno>
 80030d6:	0003      	movs	r3, r0
 80030d8:	2216      	movs	r2, #22
 80030da:	601a      	str	r2, [r3, #0]
	return -1;
 80030dc:	2301      	movs	r3, #1
 80030de:	425b      	negs	r3, r3
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b002      	add	sp, #8
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <_exit>:

void _exit (int status)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030f0:	2301      	movs	r3, #1
 80030f2:	425a      	negs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	0011      	movs	r1, r2
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7ff ffe5 	bl	80030c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80030fe:	e7fe      	b.n	80030fe <_exit+0x16>

08003100 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	e00a      	b.n	8003128 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003112:	e000      	b.n	8003116 <_read+0x16>
 8003114:	bf00      	nop
 8003116:	0001      	movs	r1, r0
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	1c5a      	adds	r2, r3, #1
 800311c:	60ba      	str	r2, [r7, #8]
 800311e:	b2ca      	uxtb	r2, r1
 8003120:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	3301      	adds	r3, #1
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	429a      	cmp	r2, r3
 800312e:	dbf0      	blt.n	8003112 <_read+0x12>
	}

return len;
 8003130:	687b      	ldr	r3, [r7, #4]
}
 8003132:	0018      	movs	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	b006      	add	sp, #24
 8003138:	bd80      	pop	{r7, pc}

0800313a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
 800314a:	e009      	b.n	8003160 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	60ba      	str	r2, [r7, #8]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	0018      	movs	r0, r3
 8003156:	e000      	b.n	800315a <_write+0x20>
 8003158:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	3301      	adds	r3, #1
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	429a      	cmp	r2, r3
 8003166:	dbf1      	blt.n	800314c <_write+0x12>
	}
	return len;
 8003168:	687b      	ldr	r3, [r7, #4]
}
 800316a:	0018      	movs	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	b006      	add	sp, #24
 8003170:	bd80      	pop	{r7, pc}

08003172 <_close>:

int _close(int file)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
	return -1;
 800317a:	2301      	movs	r3, #1
 800317c:	425b      	negs	r3, r3
}
 800317e:	0018      	movs	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	b002      	add	sp, #8
 8003184:	bd80      	pop	{r7, pc}

08003186 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
 800318e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2280      	movs	r2, #128	; 0x80
 8003194:	0192      	lsls	r2, r2, #6
 8003196:	605a      	str	r2, [r3, #4]
	return 0;
 8003198:	2300      	movs	r3, #0
}
 800319a:	0018      	movs	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	b002      	add	sp, #8
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <_isatty>:

int _isatty(int file)
{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b082      	sub	sp, #8
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
	return 1;
 80031aa:	2301      	movs	r3, #1
}
 80031ac:	0018      	movs	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b002      	add	sp, #8
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
	return 0;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	0018      	movs	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b004      	add	sp, #16
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031d4:	4a14      	ldr	r2, [pc, #80]	; (8003228 <_sbrk+0x5c>)
 80031d6:	4b15      	ldr	r3, [pc, #84]	; (800322c <_sbrk+0x60>)
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031e0:	4b13      	ldr	r3, [pc, #76]	; (8003230 <_sbrk+0x64>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d102      	bne.n	80031ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031e8:	4b11      	ldr	r3, [pc, #68]	; (8003230 <_sbrk+0x64>)
 80031ea:	4a12      	ldr	r2, [pc, #72]	; (8003234 <_sbrk+0x68>)
 80031ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031ee:	4b10      	ldr	r3, [pc, #64]	; (8003230 <_sbrk+0x64>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	18d3      	adds	r3, r2, r3
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d207      	bcs.n	800320c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031fc:	f003 fa62 	bl	80066c4 <__errno>
 8003200:	0003      	movs	r3, r0
 8003202:	220c      	movs	r2, #12
 8003204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003206:	2301      	movs	r3, #1
 8003208:	425b      	negs	r3, r3
 800320a:	e009      	b.n	8003220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800320c:	4b08      	ldr	r3, [pc, #32]	; (8003230 <_sbrk+0x64>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003212:	4b07      	ldr	r3, [pc, #28]	; (8003230 <_sbrk+0x64>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	18d2      	adds	r2, r2, r3
 800321a:	4b05      	ldr	r3, [pc, #20]	; (8003230 <_sbrk+0x64>)
 800321c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800321e:	68fb      	ldr	r3, [r7, #12]
}
 8003220:	0018      	movs	r0, r3
 8003222:	46bd      	mov	sp, r7
 8003224:	b006      	add	sp, #24
 8003226:	bd80      	pop	{r7, pc}
 8003228:	20002000 	.word	0x20002000
 800322c:	00000400 	.word	0x00000400
 8003230:	20000308 	.word	0x20000308
 8003234:	200004a0 	.word	0x200004a0

08003238 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800323c:	4b03      	ldr	r3, [pc, #12]	; (800324c <SystemInit+0x14>)
 800323e:	2280      	movs	r2, #128	; 0x80
 8003240:	0512      	lsls	r2, r2, #20
 8003242:	609a      	str	r2, [r3, #8]
#endif
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	e000ed00 	.word	0xe000ed00

08003250 <Reset_Handler>:
 8003250:	480d      	ldr	r0, [pc, #52]	; (8003288 <LoopForever+0x2>)
 8003252:	4685      	mov	sp, r0
 8003254:	f7ff fff0 	bl	8003238 <SystemInit>
 8003258:	480c      	ldr	r0, [pc, #48]	; (800328c <LoopForever+0x6>)
 800325a:	490d      	ldr	r1, [pc, #52]	; (8003290 <LoopForever+0xa>)
 800325c:	4a0d      	ldr	r2, [pc, #52]	; (8003294 <LoopForever+0xe>)
 800325e:	2300      	movs	r3, #0
 8003260:	e002      	b.n	8003268 <LoopCopyDataInit>

08003262 <CopyDataInit>:
 8003262:	58d4      	ldr	r4, [r2, r3]
 8003264:	50c4      	str	r4, [r0, r3]
 8003266:	3304      	adds	r3, #4

08003268 <LoopCopyDataInit>:
 8003268:	18c4      	adds	r4, r0, r3
 800326a:	428c      	cmp	r4, r1
 800326c:	d3f9      	bcc.n	8003262 <CopyDataInit>
 800326e:	4a0a      	ldr	r2, [pc, #40]	; (8003298 <LoopForever+0x12>)
 8003270:	4c0a      	ldr	r4, [pc, #40]	; (800329c <LoopForever+0x16>)
 8003272:	2300      	movs	r3, #0
 8003274:	e001      	b.n	800327a <LoopFillZerobss>

08003276 <FillZerobss>:
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	3204      	adds	r2, #4

0800327a <LoopFillZerobss>:
 800327a:	42a2      	cmp	r2, r4
 800327c:	d3fb      	bcc.n	8003276 <FillZerobss>
 800327e:	f003 fa27 	bl	80066d0 <__libc_init_array>
 8003282:	f7ff f95d 	bl	8002540 <main>

08003286 <LoopForever>:
 8003286:	e7fe      	b.n	8003286 <LoopForever>
 8003288:	20002000 	.word	0x20002000
 800328c:	20000000 	.word	0x20000000
 8003290:	200001e4 	.word	0x200001e4
 8003294:	0800a144 	.word	0x0800a144
 8003298:	200001e4 	.word	0x200001e4
 800329c:	200004a0 	.word	0x200004a0

080032a0 <ADC1_IRQHandler>:
 80032a0:	e7fe      	b.n	80032a0 <ADC1_IRQHandler>
	...

080032a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032aa:	1dfb      	adds	r3, r7, #7
 80032ac:	2200      	movs	r2, #0
 80032ae:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_Init+0x3c>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	4b0a      	ldr	r3, [pc, #40]	; (80032e0 <HAL_Init+0x3c>)
 80032b6:	2180      	movs	r1, #128	; 0x80
 80032b8:	0049      	lsls	r1, r1, #1
 80032ba:	430a      	orrs	r2, r1
 80032bc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032be:	2000      	movs	r0, #0
 80032c0:	f000 f810 	bl	80032e4 <HAL_InitTick>
 80032c4:	1e03      	subs	r3, r0, #0
 80032c6:	d003      	beq.n	80032d0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80032c8:	1dfb      	adds	r3, r7, #7
 80032ca:	2201      	movs	r2, #1
 80032cc:	701a      	strb	r2, [r3, #0]
 80032ce:	e001      	b.n	80032d4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80032d0:	f7ff fd6a 	bl	8002da8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032d4:	1dfb      	adds	r3, r7, #7
 80032d6:	781b      	ldrb	r3, [r3, #0]
}
 80032d8:	0018      	movs	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	b002      	add	sp, #8
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40022000 	.word	0x40022000

080032e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e4:	b590      	push	{r4, r7, lr}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032ec:	230f      	movs	r3, #15
 80032ee:	18fb      	adds	r3, r7, r3
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80032f4:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_InitTick+0x88>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d02b      	beq.n	8003354 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80032fc:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <HAL_InitTick+0x8c>)
 80032fe:	681c      	ldr	r4, [r3, #0]
 8003300:	4b1a      	ldr	r3, [pc, #104]	; (800336c <HAL_InitTick+0x88>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	0019      	movs	r1, r3
 8003306:	23fa      	movs	r3, #250	; 0xfa
 8003308:	0098      	lsls	r0, r3, #2
 800330a:	f7fc ff17 	bl	800013c <__udivsi3>
 800330e:	0003      	movs	r3, r0
 8003310:	0019      	movs	r1, r3
 8003312:	0020      	movs	r0, r4
 8003314:	f7fc ff12 	bl	800013c <__udivsi3>
 8003318:	0003      	movs	r3, r0
 800331a:	0018      	movs	r0, r3
 800331c:	f001 f8df 	bl	80044de <HAL_SYSTICK_Config>
 8003320:	1e03      	subs	r3, r0, #0
 8003322:	d112      	bne.n	800334a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b03      	cmp	r3, #3
 8003328:	d80a      	bhi.n	8003340 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	2301      	movs	r3, #1
 800332e:	425b      	negs	r3, r3
 8003330:	2200      	movs	r2, #0
 8003332:	0018      	movs	r0, r3
 8003334:	f001 f8ae 	bl	8004494 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003338:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <HAL_InitTick+0x90>)
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	601a      	str	r2, [r3, #0]
 800333e:	e00d      	b.n	800335c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003340:	230f      	movs	r3, #15
 8003342:	18fb      	adds	r3, r7, r3
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e008      	b.n	800335c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800334a:	230f      	movs	r3, #15
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	2201      	movs	r2, #1
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	e003      	b.n	800335c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003354:	230f      	movs	r3, #15
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	2201      	movs	r2, #1
 800335a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800335c:	230f      	movs	r3, #15
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	781b      	ldrb	r3, [r3, #0]
}
 8003362:	0018      	movs	r0, r3
 8003364:	46bd      	mov	sp, r7
 8003366:	b005      	add	sp, #20
 8003368:	bd90      	pop	{r4, r7, pc}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	20000010 	.word	0x20000010
 8003370:	20000008 	.word	0x20000008
 8003374:	2000000c 	.word	0x2000000c

08003378 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800337c:	4b05      	ldr	r3, [pc, #20]	; (8003394 <HAL_IncTick+0x1c>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	001a      	movs	r2, r3
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <HAL_IncTick+0x20>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	18d2      	adds	r2, r2, r3
 8003388:	4b03      	ldr	r3, [pc, #12]	; (8003398 <HAL_IncTick+0x20>)
 800338a:	601a      	str	r2, [r3, #0]
}
 800338c:	46c0      	nop			; (mov r8, r8)
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	20000010 	.word	0x20000010
 8003398:	2000048c 	.word	0x2000048c

0800339c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  return uwTick;
 80033a0:	4b02      	ldr	r3, [pc, #8]	; (80033ac <HAL_GetTick+0x10>)
 80033a2:	681b      	ldr	r3, [r3, #0]
}
 80033a4:	0018      	movs	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	2000048c 	.word	0x2000048c

080033b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033b8:	f7ff fff0 	bl	800339c <HAL_GetTick>
 80033bc:	0003      	movs	r3, r0
 80033be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3301      	adds	r3, #1
 80033c8:	d005      	beq.n	80033d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_Delay+0x44>)
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	001a      	movs	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	189b      	adds	r3, r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033d6:	46c0      	nop			; (mov r8, r8)
 80033d8:	f7ff ffe0 	bl	800339c <HAL_GetTick>
 80033dc:	0002      	movs	r2, r0
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d8f7      	bhi.n	80033d8 <HAL_Delay+0x28>
  {
  }
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	46bd      	mov	sp, r7
 80033ee:	b004      	add	sp, #16
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	46c0      	nop			; (mov r8, r8)
 80033f4:	20000010 	.word	0x20000010

080033f8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a05      	ldr	r2, [pc, #20]	; (800341c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003408:	401a      	ands	r2, r3
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	431a      	orrs	r2, r3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	601a      	str	r2, [r3, #0]
}
 8003412:	46c0      	nop			; (mov r8, r8)
 8003414:	46bd      	mov	sp, r7
 8003416:	b002      	add	sp, #8
 8003418:	bd80      	pop	{r7, pc}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	fe3fffff 	.word	0xfe3fffff

08003420 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	23e0      	movs	r3, #224	; 0xe0
 800342e:	045b      	lsls	r3, r3, #17
 8003430:	4013      	ands	r3, r2
}
 8003432:	0018      	movs	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	b002      	add	sp, #8
 8003438:	bd80      	pop	{r7, pc}

0800343a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b084      	sub	sp, #16
 800343e:	af00      	add	r7, sp, #0
 8003440:	60f8      	str	r0, [r7, #12]
 8003442:	60b9      	str	r1, [r7, #8]
 8003444:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	2104      	movs	r1, #4
 800344e:	400a      	ands	r2, r1
 8003450:	2107      	movs	r1, #7
 8003452:	4091      	lsls	r1, r2
 8003454:	000a      	movs	r2, r1
 8003456:	43d2      	mvns	r2, r2
 8003458:	401a      	ands	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2104      	movs	r1, #4
 800345e:	400b      	ands	r3, r1
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4099      	lsls	r1, r3
 8003464:	000b      	movs	r3, r1
 8003466:	431a      	orrs	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	b004      	add	sp, #16
 8003472:	bd80      	pop	{r7, pc}

08003474 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	23c0      	movs	r3, #192	; 0xc0
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	4013      	ands	r3, r2
 8003486:	d101      	bne.n	800348c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800348c:	2300      	movs	r3, #0
}
 800348e:	0018      	movs	r0, r3
 8003490:	46bd      	mov	sp, r7
 8003492:	b002      	add	sp, #8
 8003494:	bd80      	pop	{r7, pc}

08003496 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b084      	sub	sp, #16
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	211f      	movs	r1, #31
 80034aa:	400a      	ands	r2, r1
 80034ac:	210f      	movs	r1, #15
 80034ae:	4091      	lsls	r1, r2
 80034b0:	000a      	movs	r2, r1
 80034b2:	43d2      	mvns	r2, r2
 80034b4:	401a      	ands	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	0e9b      	lsrs	r3, r3, #26
 80034ba:	210f      	movs	r1, #15
 80034bc:	4019      	ands	r1, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	201f      	movs	r0, #31
 80034c2:	4003      	ands	r3, r0
 80034c4:	4099      	lsls	r1, r3
 80034c6:	000b      	movs	r3, r1
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80034ce:	46c0      	nop			; (mov r8, r8)
 80034d0:	46bd      	mov	sp, r7
 80034d2:	b004      	add	sp, #16
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b082      	sub	sp, #8
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
 80034de:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	035b      	lsls	r3, r3, #13
 80034e8:	0b5b      	lsrs	r3, r3, #13
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80034f0:	46c0      	nop			; (mov r8, r8)
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b002      	add	sp, #8
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	0352      	lsls	r2, r2, #13
 800350a:	0b52      	lsrs	r2, r2, #13
 800350c:	43d2      	mvns	r2, r2
 800350e:	401a      	ands	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	46bd      	mov	sp, r7
 8003518:	b002      	add	sp, #8
 800351a:	bd80      	pop	{r7, pc}

0800351c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	0212      	lsls	r2, r2, #8
 8003530:	43d2      	mvns	r2, r2
 8003532:	401a      	ands	r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	400b      	ands	r3, r1
 800353c:	4904      	ldr	r1, [pc, #16]	; (8003550 <LL_ADC_SetChannelSamplingTime+0x34>)
 800353e:	400b      	ands	r3, r1
 8003540:	431a      	orrs	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	b004      	add	sp, #16
 800354c:	bd80      	pop	{r7, pc}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	07ffff00 	.word	0x07ffff00

08003554 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b082      	sub	sp, #8
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a05      	ldr	r2, [pc, #20]	; (8003578 <LL_ADC_EnableInternalRegulator+0x24>)
 8003562:	4013      	ands	r3, r2
 8003564:	2280      	movs	r2, #128	; 0x80
 8003566:	0552      	lsls	r2, r2, #21
 8003568:	431a      	orrs	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	46bd      	mov	sp, r7
 8003572:	b002      	add	sp, #8
 8003574:	bd80      	pop	{r7, pc}
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	6fffffe8 	.word	0x6fffffe8

0800357c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	055b      	lsls	r3, r3, #21
 800358c:	401a      	ands	r2, r3
 800358e:	2380      	movs	r3, #128	; 0x80
 8003590:	055b      	lsls	r3, r3, #21
 8003592:	429a      	cmp	r2, r3
 8003594:	d101      	bne.n	800359a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800359a:	2300      	movs	r3, #0
}
 800359c:	0018      	movs	r0, r3
 800359e:	46bd      	mov	sp, r7
 80035a0:	b002      	add	sp, #8
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a04      	ldr	r2, [pc, #16]	; (80035c4 <LL_ADC_Enable+0x20>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	2201      	movs	r2, #1
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b002      	add	sp, #8
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	7fffffe8 	.word	0x7fffffe8

080035c8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	4a04      	ldr	r2, [pc, #16]	; (80035e8 <LL_ADC_Disable+0x20>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	2202      	movs	r2, #2
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80035e0:	46c0      	nop			; (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	b002      	add	sp, #8
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	7fffffe8 	.word	0x7fffffe8

080035ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2201      	movs	r2, #1
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <LL_ADC_IsEnabled+0x18>
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <LL_ADC_IsEnabled+0x1a>
 8003604:	2300      	movs	r3, #0
}
 8003606:	0018      	movs	r0, r3
 8003608:	46bd      	mov	sp, r7
 800360a:	b002      	add	sp, #8
 800360c:	bd80      	pop	{r7, pc}

0800360e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	2202      	movs	r2, #2
 800361c:	4013      	ands	r3, r2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d101      	bne.n	8003626 <LL_ADC_IsDisableOngoing+0x18>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <LL_ADC_IsDisableOngoing+0x1a>
 8003626:	2300      	movs	r3, #0
}
 8003628:	0018      	movs	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	b002      	add	sp, #8
 800362e:	bd80      	pop	{r7, pc}

08003630 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	4a04      	ldr	r2, [pc, #16]	; (8003650 <LL_ADC_REG_StartConversion+0x20>)
 800363e:	4013      	ands	r3, r2
 8003640:	2204      	movs	r2, #4
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003648:	46c0      	nop			; (mov r8, r8)
 800364a:	46bd      	mov	sp, r7
 800364c:	b002      	add	sp, #8
 800364e:	bd80      	pop	{r7, pc}
 8003650:	7fffffe8 	.word	0x7fffffe8

08003654 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2204      	movs	r2, #4
 8003662:	4013      	ands	r3, r2
 8003664:	2b04      	cmp	r3, #4
 8003666:	d101      	bne.n	800366c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003668:	2301      	movs	r3, #1
 800366a:	e000      	b.n	800366e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800366c:	2300      	movs	r3, #0
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	b002      	add	sp, #8
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003680:	231f      	movs	r3, #31
 8003682:	18fb      	adds	r3, r7, r3
 8003684:	2200      	movs	r2, #0
 8003686:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003688:	2300      	movs	r3, #0
 800368a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003690:	2300      	movs	r3, #0
 8003692:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e1ab      	b.n	80039f6 <HAL_ADC_Init+0x37e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10a      	bne.n	80036bc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	0018      	movs	r0, r3
 80036aa:	f7ff fba1 	bl	8002df0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2254      	movs	r2, #84	; 0x54
 80036b8:	2100      	movs	r1, #0
 80036ba:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	0018      	movs	r0, r3
 80036c2:	f7ff ff5b 	bl	800357c <LL_ADC_IsInternalRegulatorEnabled>
 80036c6:	1e03      	subs	r3, r0, #0
 80036c8:	d114      	bne.n	80036f4 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	0018      	movs	r0, r3
 80036d0:	f7ff ff40 	bl	8003554 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80036d4:	4bca      	ldr	r3, [pc, #808]	; (8003a00 <HAL_ADC_Init+0x388>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	49ca      	ldr	r1, [pc, #808]	; (8003a04 <HAL_ADC_Init+0x38c>)
 80036da:	0018      	movs	r0, r3
 80036dc:	f7fc fd2e 	bl	800013c <__udivsi3>
 80036e0:	0003      	movs	r3, r0
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036e6:	e002      	b.n	80036ee <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d1f9      	bne.n	80036e8 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7ff ff3f 	bl	800357c <LL_ADC_IsInternalRegulatorEnabled>
 80036fe:	1e03      	subs	r3, r0, #0
 8003700:	d10f      	bne.n	8003722 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	2210      	movs	r2, #16
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003712:	2201      	movs	r2, #1
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800371a:	231f      	movs	r3, #31
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	2201      	movs	r2, #1
 8003720:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	0018      	movs	r0, r3
 8003728:	f7ff ff94 	bl	8003654 <LL_ADC_REG_IsConversionOngoing>
 800372c:	0003      	movs	r3, r0
 800372e:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003734:	2210      	movs	r2, #16
 8003736:	4013      	ands	r3, r2
 8003738:	d000      	beq.n	800373c <HAL_ADC_Init+0xc4>
 800373a:	e14f      	b.n	80039dc <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d000      	beq.n	8003744 <HAL_ADC_Init+0xcc>
 8003742:	e14b      	b.n	80039dc <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003748:	4aaf      	ldr	r2, [pc, #700]	; (8003a08 <HAL_ADC_Init+0x390>)
 800374a:	4013      	ands	r3, r2
 800374c:	2202      	movs	r2, #2
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	0018      	movs	r0, r3
 800375a:	f7ff ff47 	bl	80035ec <LL_ADC_IsEnabled>
 800375e:	1e03      	subs	r3, r0, #0
 8003760:	d151      	bne.n	8003806 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2218      	movs	r2, #24
 800376a:	4393      	bics	r3, r2
 800376c:	0019      	movs	r1, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	0f9b      	lsrs	r3, r3, #30
 8003780:	079a      	lsls	r2, r3, #30
                   hadc->Init.Oversampling.Ratio         |
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003786:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.RightBitShift |
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                   hadc->Init.Oversampling.Ratio         |
 800378c:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                   hadc->Init.Oversampling.RightBitShift |
 8003792:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                   hadc->Init.Oversampling.TriggeredMode |
 8003798:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	223c      	movs	r2, #60	; 0x3c
 80037a4:	5c9b      	ldrb	r3, [r3, r2]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d103      	bne.n	80037b2 <HAL_ADC_Init+0x13a>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2201      	movs	r2, #1
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	4a94      	ldr	r2, [pc, #592]	; (8003a0c <HAL_ADC_Init+0x394>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	0019      	movs	r1, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	23c0      	movs	r3, #192	; 0xc0
 80037ce:	061b      	lsls	r3, r3, #24
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d018      	beq.n	8003806 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	05db      	lsls	r3, r3, #23
 80037dc:	429a      	cmp	r2, r3
 80037de:	d012      	beq.n	8003806 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80037e4:	2380      	movs	r3, #128	; 0x80
 80037e6:	061b      	lsls	r3, r3, #24
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d00c      	beq.n	8003806 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80037ec:	4b88      	ldr	r3, [pc, #544]	; (8003a10 <HAL_ADC_Init+0x398>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a88      	ldr	r2, [pc, #544]	; (8003a14 <HAL_ADC_Init+0x39c>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	0019      	movs	r1, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	23f0      	movs	r3, #240	; 0xf0
 80037fc:	039b      	lsls	r3, r3, #14
 80037fe:	401a      	ands	r2, r3
 8003800:	4b83      	ldr	r3, [pc, #524]	; (8003a10 <HAL_ADC_Init+0x398>)
 8003802:	430a      	orrs	r2, r1
 8003804:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	7e1b      	ldrb	r3, [r3, #24]
 800380a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	7e5b      	ldrb	r3, [r3, #25]
 8003810:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003812:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	7e9b      	ldrb	r3, [r3, #26]
 8003818:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800381a:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_ADC_Init+0x1b2>
 8003824:	2380      	movs	r3, #128	; 0x80
 8003826:	015b      	lsls	r3, r3, #5
 8003828:	e000      	b.n	800382c <HAL_ADC_Init+0x1b4>
 800382a:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800382c:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003832:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	da04      	bge.n	8003846 <HAL_ADC_Init+0x1ce>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	085b      	lsrs	r3, r3, #1
 8003844:	e001      	b.n	800384a <HAL_ADC_Init+0x1d2>
 8003846:	2380      	movs	r3, #128	; 0x80
 8003848:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 800384a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	212c      	movs	r1, #44	; 0x2c
 8003850:	5c5b      	ldrb	r3, [r3, r1]
 8003852:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003854:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2220      	movs	r2, #32
 8003860:	5c9b      	ldrb	r3, [r3, r2]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d115      	bne.n	8003892 <HAL_ADC_Init+0x21a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	7e9b      	ldrb	r3, [r3, #26]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d105      	bne.n	800387a <HAL_ADC_Init+0x202>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	2280      	movs	r2, #128	; 0x80
 8003872:	0252      	lsls	r2, r2, #9
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
 8003878:	e00b      	b.n	8003892 <HAL_ADC_Init+0x21a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387e:	2220      	movs	r2, #32
 8003880:	431a      	orrs	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388a:	2201      	movs	r2, #1
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_ADC_Init+0x238>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800389e:	23e0      	movs	r3, #224	; 0xe0
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80038a8:	4313      	orrs	r3, r2
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	4a58      	ldr	r2, [pc, #352]	; (8003a18 <HAL_ADC_Init+0x3a0>)
 80038b8:	4013      	ands	r3, r2
 80038ba:	0019      	movs	r1, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	4a53      	ldr	r2, [pc, #332]	; (8003a1c <HAL_ADC_Init+0x3a4>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	0019      	movs	r1, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	430a      	orrs	r2, r1
 80038da:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6818      	ldr	r0, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e4:	001a      	movs	r2, r3
 80038e6:	2100      	movs	r1, #0
 80038e8:	f7ff fda7 	bl	800343a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f4:	494a      	ldr	r1, [pc, #296]	; (8003a20 <HAL_ADC_Init+0x3a8>)
 80038f6:	001a      	movs	r2, r3
 80038f8:	f7ff fd9f 	bl	800343a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d109      	bne.n	8003918 <HAL_ADC_Init+0x2a0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2110      	movs	r1, #16
 8003910:	4249      	negs	r1, r1
 8003912:	430a      	orrs	r2, r1
 8003914:	629a      	str	r2, [r3, #40]	; 0x28
 8003916:	e03a      	b.n	800398e <HAL_ADC_Init+0x316>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	2380      	movs	r3, #128	; 0x80
 800391e:	039b      	lsls	r3, r3, #14
 8003920:	429a      	cmp	r2, r3
 8003922:	d134      	bne.n	800398e <HAL_ADC_Init+0x316>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003924:	2300      	movs	r3, #0
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	e00c      	b.n	8003944 <HAL_ADC_Init+0x2cc>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	40da      	lsrs	r2, r3
 8003934:	0013      	movs	r3, r2
 8003936:	220f      	movs	r2, #15
 8003938:	4013      	ands	r3, r2
 800393a:	2b0f      	cmp	r3, #15
 800393c:	d006      	beq.n	800394c <HAL_ADC_Init+0x2d4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	3301      	adds	r3, #1
 8003942:	613b      	str	r3, [r7, #16]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	2b07      	cmp	r3, #7
 8003948:	d9ef      	bls.n	800392a <HAL_ADC_Init+0x2b2>
 800394a:	e000      	b.n	800394e <HAL_ADC_Init+0x2d6>
            ADC_CHSELR_SQ1)
        {
          break;
 800394c:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d109      	bne.n	8003968 <HAL_ADC_Init+0x2f0>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2110      	movs	r1, #16
 8003960:	4249      	negs	r1, r1
 8003962:	430a      	orrs	r2, r1
 8003964:	629a      	str	r2, [r3, #40]	; 0x28
 8003966:	e012      	b.n	800398e <HAL_ADC_Init+0x316>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	3b01      	subs	r3, #1
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	221c      	movs	r2, #28
 8003978:	4013      	ands	r3, r2
 800397a:	2210      	movs	r2, #16
 800397c:	4252      	negs	r2, r2
 800397e:	409a      	lsls	r2, r3
 8003980:	0011      	movs	r1, r2
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4a23      	ldr	r2, [pc, #140]	; (8003a24 <HAL_ADC_Init+0x3ac>)
 8003996:	4013      	ands	r3, r2
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	429a      	cmp	r2, r3
 800399c:	d10b      	bne.n	80039b6 <HAL_ADC_Init+0x33e>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a8:	2203      	movs	r2, #3
 80039aa:	4393      	bics	r3, r2
 80039ac:	2201      	movs	r2, #1
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80039b4:	e01c      	b.n	80039f0 <HAL_ADC_Init+0x378>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ba:	2212      	movs	r2, #18
 80039bc:	4393      	bics	r3, r2
 80039be:	2210      	movs	r2, #16
 80039c0:	431a      	orrs	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ca:	2201      	movs	r2, #1
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80039d2:	231f      	movs	r3, #31
 80039d4:	18fb      	adds	r3, r7, r3
 80039d6:	2201      	movs	r2, #1
 80039d8:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80039da:	e009      	b.n	80039f0 <HAL_ADC_Init+0x378>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e0:	2210      	movs	r2, #16
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80039e8:	231f      	movs	r3, #31
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	2201      	movs	r2, #1
 80039ee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80039f0:	231f      	movs	r3, #31
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	781b      	ldrb	r3, [r3, #0]
}
 80039f6:	0018      	movs	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b008      	add	sp, #32
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	20000008 	.word	0x20000008
 8003a04:	00030d40 	.word	0x00030d40
 8003a08:	fffffefd 	.word	0xfffffefd
 8003a0c:	1ffffc02 	.word	0x1ffffc02
 8003a10:	40012708 	.word	0x40012708
 8003a14:	ffc3ffff 	.word	0xffc3ffff
 8003a18:	fffe0219 	.word	0xfffe0219
 8003a1c:	dffffc02 	.word	0xdffffc02
 8003a20:	07ffff04 	.word	0x07ffff04
 8003a24:	833fffe7 	.word	0x833fffe7

08003a28 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003a28:	b5b0      	push	{r4, r5, r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7ff fe0b 	bl	8003654 <LL_ADC_REG_IsConversionOngoing>
 8003a3e:	1e03      	subs	r3, r0, #0
 8003a40:	d16c      	bne.n	8003b1c <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2254      	movs	r2, #84	; 0x54
 8003a46:	5c9b      	ldrb	r3, [r3, r2]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d101      	bne.n	8003a50 <HAL_ADC_Start_DMA+0x28>
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	e06c      	b.n	8003b2a <HAL_ADC_Start_DMA+0x102>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2254      	movs	r2, #84	; 0x54
 8003a54:	2101      	movs	r1, #1
 8003a56:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	4013      	ands	r3, r2
 8003a62:	d113      	bne.n	8003a8c <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f7ff fdbf 	bl	80035ec <LL_ADC_IsEnabled>
 8003a6e:	1e03      	subs	r3, r0, #0
 8003a70:	d004      	beq.n	8003a7c <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	0018      	movs	r0, r3
 8003a78:	f7ff fda6 	bl	80035c8 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2101      	movs	r1, #1
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003a8c:	2517      	movs	r5, #23
 8003a8e:	197c      	adds	r4, r7, r5
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	0018      	movs	r0, r3
 8003a94:	f000 fa48 	bl	8003f28 <ADC_Enable>
 8003a98:	0003      	movs	r3, r0
 8003a9a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003a9c:	002c      	movs	r4, r5
 8003a9e:	193b      	adds	r3, r7, r4
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d13e      	bne.n	8003b24 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aaa:	4a22      	ldr	r2, [pc, #136]	; (8003b34 <HAL_ADC_Start_DMA+0x10c>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	2280      	movs	r2, #128	; 0x80
 8003ab0:	0052      	lsls	r2, r2, #1
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ac2:	4a1d      	ldr	r2, [pc, #116]	; (8003b38 <HAL_ADC_Start_DMA+0x110>)
 8003ac4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aca:	4a1c      	ldr	r2, [pc, #112]	; (8003b3c <HAL_ADC_Start_DMA+0x114>)
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad2:	4a1b      	ldr	r2, [pc, #108]	; (8003b40 <HAL_ADC_Start_DMA+0x118>)
 8003ad4:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	221c      	movs	r2, #28
 8003adc:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2254      	movs	r2, #84	; 0x54
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2110      	movs	r1, #16
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3340      	adds	r3, #64	; 0x40
 8003b00:	0019      	movs	r1, r3
 8003b02:	68ba      	ldr	r2, [r7, #8]
 8003b04:	193c      	adds	r4, r7, r4
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f000 fd80 	bl	800460c <HAL_DMA_Start_IT>
 8003b0c:	0003      	movs	r3, r0
 8003b0e:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	0018      	movs	r0, r3
 8003b16:	f7ff fd8b 	bl	8003630 <LL_ADC_REG_StartConversion>
 8003b1a:	e003      	b.n	8003b24 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003b1c:	2317      	movs	r3, #23
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	2202      	movs	r2, #2
 8003b22:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b24:	2317      	movs	r3, #23
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	781b      	ldrb	r3, [r3, #0]
}
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b006      	add	sp, #24
 8003b30:	bdb0      	pop	{r4, r5, r7, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	fffff0fe 	.word	0xfffff0fe
 8003b38:	080040d5 	.word	0x080040d5
 8003b3c:	0800419d 	.word	0x0800419d
 8003b40:	080041bb 	.word	0x080041bb

08003b44 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003b4c:	46c0      	nop			; (mov r8, r8)
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b002      	add	sp, #8
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003b5c:	46c0      	nop			; (mov r8, r8)
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	b002      	add	sp, #8
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b002      	add	sp, #8
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b7e:	2317      	movs	r3, #23
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2254      	movs	r2, #84	; 0x54
 8003b8e:	5c9b      	ldrb	r3, [r3, r2]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_ADC_ConfigChannel+0x24>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e1c2      	b.n	8003f1e <HAL_ADC_ConfigChannel+0x3aa>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2254      	movs	r2, #84	; 0x54
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f7ff fd55 	bl	8003654 <LL_ADC_REG_IsConversionOngoing>
 8003baa:	1e03      	subs	r3, r0, #0
 8003bac:	d000      	beq.n	8003bb0 <HAL_ADC_ConfigChannel+0x3c>
 8003bae:	e1a5      	b.n	8003efc <HAL_ADC_ConfigChannel+0x388>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d100      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x46>
 8003bb8:	e144      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x2d0>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	2380      	movs	r3, #128	; 0x80
 8003bc0:	061b      	lsls	r3, r3, #24
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d004      	beq.n	8003bd0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003bca:	4ac2      	ldr	r2, [pc, #776]	; (8003ed4 <HAL_ADC_ConfigChannel+0x360>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d108      	bne.n	8003be2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	0019      	movs	r1, r3
 8003bda:	0010      	movs	r0, r2
 8003bdc:	f7ff fc7b 	bl	80034d6 <LL_ADC_REG_SetSequencerChAdd>
 8003be0:	e0c9      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	211f      	movs	r1, #31
 8003bec:	400b      	ands	r3, r1
 8003bee:	210f      	movs	r1, #15
 8003bf0:	4099      	lsls	r1, r3
 8003bf2:	000b      	movs	r3, r1
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	0019      	movs	r1, r3
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	035b      	lsls	r3, r3, #13
 8003c00:	0b5b      	lsrs	r3, r3, #13
 8003c02:	d105      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x9c>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	0e9b      	lsrs	r3, r3, #26
 8003c0a:	221f      	movs	r2, #31
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	e098      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2201      	movs	r2, #1
 8003c16:	4013      	ands	r3, r2
 8003c18:	d000      	beq.n	8003c1c <HAL_ADC_ConfigChannel+0xa8>
 8003c1a:	e091      	b.n	8003d40 <HAL_ADC_ConfigChannel+0x1cc>
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2202      	movs	r2, #2
 8003c22:	4013      	ands	r3, r2
 8003c24:	d000      	beq.n	8003c28 <HAL_ADC_ConfigChannel+0xb4>
 8003c26:	e089      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x1c8>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2204      	movs	r2, #4
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d000      	beq.n	8003c34 <HAL_ADC_ConfigChannel+0xc0>
 8003c32:	e081      	b.n	8003d38 <HAL_ADC_ConfigChannel+0x1c4>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2208      	movs	r2, #8
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d000      	beq.n	8003c40 <HAL_ADC_ConfigChannel+0xcc>
 8003c3e:	e079      	b.n	8003d34 <HAL_ADC_ConfigChannel+0x1c0>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2210      	movs	r2, #16
 8003c46:	4013      	ands	r3, r2
 8003c48:	d000      	beq.n	8003c4c <HAL_ADC_ConfigChannel+0xd8>
 8003c4a:	e071      	b.n	8003d30 <HAL_ADC_ConfigChannel+0x1bc>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2220      	movs	r2, #32
 8003c52:	4013      	ands	r3, r2
 8003c54:	d000      	beq.n	8003c58 <HAL_ADC_ConfigChannel+0xe4>
 8003c56:	e069      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x1b8>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2240      	movs	r2, #64	; 0x40
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d000      	beq.n	8003c64 <HAL_ADC_ConfigChannel+0xf0>
 8003c62:	e061      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x1b4>
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2280      	movs	r2, #128	; 0x80
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d000      	beq.n	8003c70 <HAL_ADC_ConfigChannel+0xfc>
 8003c6e:	e059      	b.n	8003d24 <HAL_ADC_ConfigChannel+0x1b0>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	2380      	movs	r3, #128	; 0x80
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	4013      	ands	r3, r2
 8003c7a:	d151      	bne.n	8003d20 <HAL_ADC_ConfigChannel+0x1ac>
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	2380      	movs	r3, #128	; 0x80
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4013      	ands	r3, r2
 8003c86:	d149      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x1a8>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	2380      	movs	r3, #128	; 0x80
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4013      	ands	r3, r2
 8003c92:	d141      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x1a4>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	2380      	movs	r3, #128	; 0x80
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d139      	bne.n	8003d14 <HAL_ADC_ConfigChannel+0x1a0>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	015b      	lsls	r3, r3, #5
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d131      	bne.n	8003d10 <HAL_ADC_ConfigChannel+0x19c>
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	2380      	movs	r3, #128	; 0x80
 8003cb2:	019b      	lsls	r3, r3, #6
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d129      	bne.n	8003d0c <HAL_ADC_ConfigChannel+0x198>
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	2380      	movs	r3, #128	; 0x80
 8003cbe:	01db      	lsls	r3, r3, #7
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d121      	bne.n	8003d08 <HAL_ADC_ConfigChannel+0x194>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d119      	bne.n	8003d04 <HAL_ADC_ConfigChannel+0x190>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	2380      	movs	r3, #128	; 0x80
 8003cd6:	025b      	lsls	r3, r3, #9
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d111      	bne.n	8003d00 <HAL_ADC_ConfigChannel+0x18c>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	029b      	lsls	r3, r3, #10
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d109      	bne.n	8003cfc <HAL_ADC_ConfigChannel+0x188>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	2380      	movs	r3, #128	; 0x80
 8003cee:	02db      	lsls	r3, r3, #11
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	d001      	beq.n	8003cf8 <HAL_ADC_ConfigChannel+0x184>
 8003cf4:	2312      	movs	r3, #18
 8003cf6:	e024      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	e022      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003cfc:	2311      	movs	r3, #17
 8003cfe:	e020      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003d00:	2310      	movs	r3, #16
 8003d02:	e01e      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003d04:	230f      	movs	r3, #15
 8003d06:	e01c      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003d08:	230e      	movs	r3, #14
 8003d0a:	e01a      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003d0c:	230d      	movs	r3, #13
 8003d0e:	e018      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003d10:	230c      	movs	r3, #12
 8003d12:	e016      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003d14:	230b      	movs	r3, #11
 8003d16:	e014      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003d18:	230a      	movs	r3, #10
 8003d1a:	e012      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003d1c:	2309      	movs	r3, #9
 8003d1e:	e010      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003d20:	2308      	movs	r3, #8
 8003d22:	e00e      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003d24:	2307      	movs	r3, #7
 8003d26:	e00c      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003d28:	2306      	movs	r3, #6
 8003d2a:	e00a      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003d2c:	2305      	movs	r3, #5
 8003d2e:	e008      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003d30:	2304      	movs	r3, #4
 8003d32:	e006      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003d34:	2303      	movs	r3, #3
 8003d36:	e004      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	e002      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <HAL_ADC_ConfigChannel+0x1ce>
 8003d40:	2300      	movs	r3, #0
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	6852      	ldr	r2, [r2, #4]
 8003d46:	201f      	movs	r0, #31
 8003d48:	4002      	ands	r2, r0
 8003d4a:	4093      	lsls	r3, r2
 8003d4c:	000a      	movs	r2, r1
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	089b      	lsrs	r3, r3, #2
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	69db      	ldr	r3, [r3, #28]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d808      	bhi.n	8003d76 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6818      	ldr	r0, [r3, #0]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	6859      	ldr	r1, [r3, #4]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	001a      	movs	r2, r3
 8003d72:	f7ff fb90 	bl	8003496 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6819      	ldr	r1, [r3, #0]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	001a      	movs	r2, r3
 8003d84:	f7ff fbca 	bl	800351c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	db00      	blt.n	8003d92 <HAL_ADC_ConfigChannel+0x21e>
 8003d90:	e0be      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d92:	4b51      	ldr	r3, [pc, #324]	; (8003ed8 <HAL_ADC_ConfigChannel+0x364>)
 8003d94:	0018      	movs	r0, r3
 8003d96:	f7ff fb43 	bl	8003420 <LL_ADC_GetCommonPathInternalCh>
 8003d9a:	0003      	movs	r3, r0
 8003d9c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a4e      	ldr	r2, [pc, #312]	; (8003edc <HAL_ADC_ConfigChannel+0x368>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d123      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x27c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	2380      	movs	r3, #128	; 0x80
 8003dac:	041b      	lsls	r3, r3, #16
 8003dae:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003db0:	d11e      	bne.n	8003df0 <HAL_ADC_ConfigChannel+0x27c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	2280      	movs	r2, #128	; 0x80
 8003db6:	0412      	lsls	r2, r2, #16
 8003db8:	4313      	orrs	r3, r2
 8003dba:	4a47      	ldr	r2, [pc, #284]	; (8003ed8 <HAL_ADC_ConfigChannel+0x364>)
 8003dbc:	0019      	movs	r1, r3
 8003dbe:	0010      	movs	r0, r2
 8003dc0:	f7ff fb1a 	bl	80033f8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8003dc4:	4b46      	ldr	r3, [pc, #280]	; (8003ee0 <HAL_ADC_ConfigChannel+0x36c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4946      	ldr	r1, [pc, #280]	; (8003ee4 <HAL_ADC_ConfigChannel+0x370>)
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f7fc f9b6 	bl	800013c <__udivsi3>
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	001a      	movs	r2, r3
 8003dd4:	0013      	movs	r3, r2
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	189b      	adds	r3, r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	3301      	adds	r3, #1
 8003dde:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003de0:	e002      	b.n	8003de8 <HAL_ADC_ConfigChannel+0x274>
          {
            wait_loop_index--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	3b01      	subs	r3, #1
 8003de6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f9      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x26e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003dee:	e08f      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x39c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a3c      	ldr	r2, [pc, #240]	; (8003ee8 <HAL_ADC_ConfigChannel+0x374>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d10e      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x2a4>
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	045b      	lsls	r3, r3, #17
 8003e00:	4013      	ands	r3, r2
 8003e02:	d109      	bne.n	8003e18 <HAL_ADC_ConfigChannel+0x2a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	2280      	movs	r2, #128	; 0x80
 8003e08:	0452      	lsls	r2, r2, #17
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	4a32      	ldr	r2, [pc, #200]	; (8003ed8 <HAL_ADC_ConfigChannel+0x364>)
 8003e0e:	0019      	movs	r1, r3
 8003e10:	0010      	movs	r0, r2
 8003e12:	f7ff faf1 	bl	80033f8 <LL_ADC_SetCommonPathInternalCh>
 8003e16:	e07b      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x39c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a33      	ldr	r2, [pc, #204]	; (8003eec <HAL_ADC_ConfigChannel+0x378>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d000      	beq.n	8003e24 <HAL_ADC_ConfigChannel+0x2b0>
 8003e22:	e075      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x39c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	2380      	movs	r3, #128	; 0x80
 8003e28:	03db      	lsls	r3, r3, #15
 8003e2a:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003e2c:	d000      	beq.n	8003e30 <HAL_ADC_ConfigChannel+0x2bc>
 8003e2e:	e06f      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2280      	movs	r2, #128	; 0x80
 8003e34:	03d2      	lsls	r2, r2, #15
 8003e36:	4313      	orrs	r3, r2
 8003e38:	4a27      	ldr	r2, [pc, #156]	; (8003ed8 <HAL_ADC_ConfigChannel+0x364>)
 8003e3a:	0019      	movs	r1, r3
 8003e3c:	0010      	movs	r0, r2
 8003e3e:	f7ff fadb 	bl	80033f8 <LL_ADC_SetCommonPathInternalCh>
 8003e42:	e065      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x39c>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	2380      	movs	r3, #128	; 0x80
 8003e4a:	061b      	lsls	r3, r3, #24
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d004      	beq.n	8003e5a <HAL_ADC_ConfigChannel+0x2e6>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003e54:	4a1f      	ldr	r2, [pc, #124]	; (8003ed4 <HAL_ADC_ConfigChannel+0x360>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d107      	bne.n	8003e6a <HAL_ADC_ConfigChannel+0x2f6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	0019      	movs	r1, r3
 8003e64:	0010      	movs	r0, r2
 8003e66:	f7ff fb47 	bl	80034f8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	da4e      	bge.n	8003f10 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e72:	4b19      	ldr	r3, [pc, #100]	; (8003ed8 <HAL_ADC_ConfigChannel+0x364>)
 8003e74:	0018      	movs	r0, r3
 8003e76:	f7ff fad3 	bl	8003420 <LL_ADC_GetCommonPathInternalCh>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a16      	ldr	r2, [pc, #88]	; (8003edc <HAL_ADC_ConfigChannel+0x368>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d108      	bne.n	8003e9a <HAL_ADC_ConfigChannel+0x326>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4a19      	ldr	r2, [pc, #100]	; (8003ef0 <HAL_ADC_ConfigChannel+0x37c>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	4a12      	ldr	r2, [pc, #72]	; (8003ed8 <HAL_ADC_ConfigChannel+0x364>)
 8003e90:	0019      	movs	r1, r3
 8003e92:	0010      	movs	r0, r2
 8003e94:	f7ff fab0 	bl	80033f8 <LL_ADC_SetCommonPathInternalCh>
 8003e98:	e03a      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <HAL_ADC_ConfigChannel+0x374>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d108      	bne.n	8003eb6 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	4a13      	ldr	r2, [pc, #76]	; (8003ef4 <HAL_ADC_ConfigChannel+0x380>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	4a0b      	ldr	r2, [pc, #44]	; (8003ed8 <HAL_ADC_ConfigChannel+0x364>)
 8003eac:	0019      	movs	r1, r3
 8003eae:	0010      	movs	r0, r2
 8003eb0:	f7ff faa2 	bl	80033f8 <LL_ADC_SetCommonPathInternalCh>
 8003eb4:	e02c      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a0c      	ldr	r2, [pc, #48]	; (8003eec <HAL_ADC_ConfigChannel+0x378>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d127      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	4a0d      	ldr	r2, [pc, #52]	; (8003ef8 <HAL_ADC_ConfigChannel+0x384>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	4a04      	ldr	r2, [pc, #16]	; (8003ed8 <HAL_ADC_ConfigChannel+0x364>)
 8003ec8:	0019      	movs	r1, r3
 8003eca:	0010      	movs	r0, r2
 8003ecc:	f7ff fa94 	bl	80033f8 <LL_ADC_SetCommonPathInternalCh>
 8003ed0:	e01e      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x39c>
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	80000004 	.word	0x80000004
 8003ed8:	40012708 	.word	0x40012708
 8003edc:	b0001000 	.word	0xb0001000
 8003ee0:	20000008 	.word	0x20000008
 8003ee4:	00030d40 	.word	0x00030d40
 8003ee8:	b8004000 	.word	0xb8004000
 8003eec:	b4002000 	.word	0xb4002000
 8003ef0:	ff7fffff 	.word	0xff7fffff
 8003ef4:	feffffff 	.word	0xfeffffff
 8003ef8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f00:	2220      	movs	r2, #32
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f08:	2317      	movs	r3, #23
 8003f0a:	18fb      	adds	r3, r7, r3
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2254      	movs	r2, #84	; 0x54
 8003f14:	2100      	movs	r1, #0
 8003f16:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8003f18:	2317      	movs	r3, #23
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	781b      	ldrb	r3, [r3, #0]
}
 8003f1e:	0018      	movs	r0, r3
 8003f20:	46bd      	mov	sp, r7
 8003f22:	b006      	add	sp, #24
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	46c0      	nop			; (mov r8, r8)

08003f28 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003f30:	2300      	movs	r3, #0
 8003f32:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7ff fb57 	bl	80035ec <LL_ADC_IsEnabled>
 8003f3e:	1e03      	subs	r3, r0, #0
 8003f40:	d162      	bne.n	8004008 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4a32      	ldr	r2, [pc, #200]	; (8004014 <ADC_Enable+0xec>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d00d      	beq.n	8003f6a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f52:	2210      	movs	r2, #16
 8003f54:	431a      	orrs	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5e:	2201      	movs	r2, #1
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e04f      	b.n	800400a <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f7ff fb18 	bl	80035a4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003f74:	4b28      	ldr	r3, [pc, #160]	; (8004018 <ADC_Enable+0xf0>)
 8003f76:	0018      	movs	r0, r3
 8003f78:	f7ff fa52 	bl	8003420 <LL_ADC_GetCommonPathInternalCh>
 8003f7c:	0002      	movs	r2, r0
 8003f7e:	2380      	movs	r3, #128	; 0x80
 8003f80:	041b      	lsls	r3, r3, #16
 8003f82:	4013      	ands	r3, r2
 8003f84:	d00f      	beq.n	8003fa6 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8003f86:	4b25      	ldr	r3, [pc, #148]	; (800401c <ADC_Enable+0xf4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4925      	ldr	r1, [pc, #148]	; (8004020 <ADC_Enable+0xf8>)
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f7fc f8d5 	bl	800013c <__udivsi3>
 8003f92:	0003      	movs	r3, r0
 8003f94:	3301      	adds	r3, #1
 8003f96:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003f98:	e002      	b.n	8003fa0 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f9      	bne.n	8003f9a <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	7e5b      	ldrb	r3, [r3, #25]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d02c      	beq.n	8004008 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003fae:	f7ff f9f5 	bl	800339c <HAL_GetTick>
 8003fb2:	0003      	movs	r3, r0
 8003fb4:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003fb6:	e020      	b.n	8003ffa <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f7ff fb15 	bl	80035ec <LL_ADC_IsEnabled>
 8003fc2:	1e03      	subs	r3, r0, #0
 8003fc4:	d104      	bne.n	8003fd0 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f7ff faea 	bl	80035a4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003fd0:	f7ff f9e4 	bl	800339c <HAL_GetTick>
 8003fd4:	0002      	movs	r2, r0
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d90d      	bls.n	8003ffa <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe2:	2210      	movs	r2, #16
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fee:	2201      	movs	r2, #1
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e007      	b.n	800400a <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2201      	movs	r2, #1
 8004002:	4013      	ands	r3, r2
 8004004:	2b01      	cmp	r3, #1
 8004006:	d1d7      	bne.n	8003fb8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	0018      	movs	r0, r3
 800400c:	46bd      	mov	sp, r7
 800400e:	b004      	add	sp, #16
 8004010:	bd80      	pop	{r7, pc}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	80000017 	.word	0x80000017
 8004018:	40012708 	.word	0x40012708
 800401c:	20000008 	.word	0x20000008
 8004020:	00030d40 	.word	0x00030d40

08004024 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	0018      	movs	r0, r3
 8004032:	f7ff faec 	bl	800360e <LL_ADC_IsDisableOngoing>
 8004036:	0003      	movs	r3, r0
 8004038:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	0018      	movs	r0, r3
 8004040:	f7ff fad4 	bl	80035ec <LL_ADC_IsEnabled>
 8004044:	1e03      	subs	r3, r0, #0
 8004046:	d040      	beq.n	80040ca <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d13d      	bne.n	80040ca <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2205      	movs	r2, #5
 8004056:	4013      	ands	r3, r2
 8004058:	2b01      	cmp	r3, #1
 800405a:	d10d      	bne.n	8004078 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	0018      	movs	r0, r3
 8004062:	f7ff fab1 	bl	80035c8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2203      	movs	r2, #3
 800406c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800406e:	f7ff f995 	bl	800339c <HAL_GetTick>
 8004072:	0003      	movs	r3, r0
 8004074:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004076:	e022      	b.n	80040be <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	2210      	movs	r2, #16
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004088:	2201      	movs	r2, #1
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e01b      	b.n	80040cc <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004094:	f7ff f982 	bl	800339c <HAL_GetTick>
 8004098:	0002      	movs	r2, r0
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d90d      	bls.n	80040be <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a6:	2210      	movs	r2, #16
 80040a8:	431a      	orrs	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b2:	2201      	movs	r2, #1
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e006      	b.n	80040cc <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2201      	movs	r2, #1
 80040c6:	4013      	ands	r3, r2
 80040c8:	d1e4      	bne.n	8004094 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	0018      	movs	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b004      	add	sp, #16
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e6:	2250      	movs	r2, #80	; 0x50
 80040e8:	4013      	ands	r3, r2
 80040ea:	d141      	bne.n	8004170 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f0:	2280      	movs	r2, #128	; 0x80
 80040f2:	0092      	lsls	r2, r2, #2
 80040f4:	431a      	orrs	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	0018      	movs	r0, r3
 8004100:	f7ff f9b8 	bl	8003474 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004104:	1e03      	subs	r3, r0, #0
 8004106:	d02e      	beq.n	8004166 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	7e9b      	ldrb	r3, [r3, #26]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d12a      	bne.n	8004166 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2208      	movs	r2, #8
 8004118:	4013      	ands	r3, r2
 800411a:	2b08      	cmp	r3, #8
 800411c:	d123      	bne.n	8004166 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	0018      	movs	r0, r3
 8004124:	f7ff fa96 	bl	8003654 <LL_ADC_REG_IsConversionOngoing>
 8004128:	1e03      	subs	r3, r0, #0
 800412a:	d110      	bne.n	800414e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	210c      	movs	r1, #12
 8004138:	438a      	bics	r2, r1
 800413a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004140:	4a15      	ldr	r2, [pc, #84]	; (8004198 <ADC_DMAConvCplt+0xc4>)
 8004142:	4013      	ands	r3, r2
 8004144:	2201      	movs	r2, #1
 8004146:	431a      	orrs	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	659a      	str	r2, [r3, #88]	; 0x58
 800414c:	e00b      	b.n	8004166 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004152:	2220      	movs	r2, #32
 8004154:	431a      	orrs	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415e:	2201      	movs	r2, #1
 8004160:	431a      	orrs	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	0018      	movs	r0, r3
 800416a:	f7ff fceb 	bl	8003b44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800416e:	e00f      	b.n	8004190 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004174:	2210      	movs	r2, #16
 8004176:	4013      	ands	r3, r2
 8004178:	d004      	beq.n	8004184 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	0018      	movs	r0, r3
 800417e:	f7ff fcf1 	bl	8003b64 <HAL_ADC_ErrorCallback>
}
 8004182:	e005      	b.n	8004190 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	0010      	movs	r0, r2
 800418e:	4798      	blx	r3
}
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	46bd      	mov	sp, r7
 8004194:	b004      	add	sp, #16
 8004196:	bd80      	pop	{r7, pc}
 8004198:	fffffefe 	.word	0xfffffefe

0800419c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	0018      	movs	r0, r3
 80041ae:	f7ff fcd1 	bl	8003b54 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	46bd      	mov	sp, r7
 80041b6:	b004      	add	sp, #16
 80041b8:	bd80      	pop	{r7, pc}

080041ba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	2240      	movs	r2, #64	; 0x40
 80041ce:	431a      	orrs	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d8:	2204      	movs	r2, #4
 80041da:	431a      	orrs	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	0018      	movs	r0, r3
 80041e4:	f7ff fcbe 	bl	8003b64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b004      	add	sp, #16
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <LL_ADC_IsEnabled>:
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2201      	movs	r2, #1
 80041fe:	4013      	ands	r3, r2
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <LL_ADC_IsEnabled+0x18>
 8004204:	2301      	movs	r3, #1
 8004206:	e000      	b.n	800420a <LL_ADC_IsEnabled+0x1a>
 8004208:	2300      	movs	r3, #0
}
 800420a:	0018      	movs	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	b002      	add	sp, #8
 8004210:	bd80      	pop	{r7, pc}

08004212 <LL_ADC_IsCalibrationOnGoing>:
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	0fdb      	lsrs	r3, r3, #31
 8004220:	07da      	lsls	r2, r3, #31
 8004222:	2380      	movs	r3, #128	; 0x80
 8004224:	061b      	lsls	r3, r3, #24
 8004226:	429a      	cmp	r2, r3
 8004228:	d101      	bne.n	800422e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <LL_ADC_IsCalibrationOnGoing+0x1e>
 800422e:	2300      	movs	r3, #0
}
 8004230:	0018      	movs	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	b002      	add	sp, #8
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004238:	b590      	push	{r4, r7, lr}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004240:	2300      	movs	r3, #0
 8004242:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2254      	movs	r2, #84	; 0x54
 8004248:	5c9b      	ldrb	r3, [r3, r2]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d101      	bne.n	8004252 <HAL_ADCEx_Calibration_Start+0x1a>
 800424e:	2302      	movs	r3, #2
 8004250:	e06c      	b.n	800432c <HAL_ADCEx_Calibration_Start+0xf4>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2254      	movs	r2, #84	; 0x54
 8004256:	2101      	movs	r1, #1
 8004258:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800425a:	2317      	movs	r3, #23
 800425c:	18fc      	adds	r4, r7, r3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	0018      	movs	r0, r3
 8004262:	f7ff fedf 	bl	8004024 <ADC_Disable>
 8004266:	0003      	movs	r3, r0
 8004268:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	0018      	movs	r0, r3
 8004270:	f7ff ffbe 	bl	80041f0 <LL_ADC_IsEnabled>
 8004274:	1e03      	subs	r3, r0, #0
 8004276:	d14c      	bne.n	8004312 <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	4a2d      	ldr	r2, [pc, #180]	; (8004334 <HAL_ADCEx_Calibration_Start+0xfc>)
 800427e:	4013      	ands	r3, r2
 8004280:	2202      	movs	r2, #2
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	2203      	movs	r2, #3
 8004290:	4013      	ands	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2103      	movs	r1, #3
 80042a0:	438a      	bics	r2, r1
 80042a2:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2180      	movs	r1, #128	; 0x80
 80042b0:	0609      	lsls	r1, r1, #24
 80042b2:	430a      	orrs	r2, r1
 80042b4:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80042b6:	e014      	b.n	80042e2 <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	3301      	adds	r3, #1
 80042bc:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	4a1d      	ldr	r2, [pc, #116]	; (8004338 <HAL_ADCEx_Calibration_Start+0x100>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d90d      	bls.n	80042e2 <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	2212      	movs	r2, #18
 80042cc:	4393      	bics	r3, r2
 80042ce:	2210      	movs	r2, #16
 80042d0:	431a      	orrs	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2254      	movs	r2, #84	; 0x54
 80042da:	2100      	movs	r1, #0
 80042dc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e024      	b.n	800432c <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	0018      	movs	r0, r3
 80042e8:	f7ff ff93 	bl	8004212 <LL_ADC_IsCalibrationOnGoing>
 80042ec:	1e03      	subs	r3, r0, #0
 80042ee:	d1e3      	bne.n	80042b8 <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68d9      	ldr	r1, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	430a      	orrs	r2, r1
 80042fe:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004304:	2203      	movs	r2, #3
 8004306:	4393      	bics	r3, r2
 8004308:	2201      	movs	r2, #1
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	659a      	str	r2, [r3, #88]	; 0x58
 8004310:	e005      	b.n	800431e <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	2210      	movs	r2, #16
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2254      	movs	r2, #84	; 0x54
 8004322:	2100      	movs	r1, #0
 8004324:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8004326:	2317      	movs	r3, #23
 8004328:	18fb      	adds	r3, r7, r3
 800432a:	781b      	ldrb	r3, [r3, #0]
}
 800432c:	0018      	movs	r0, r3
 800432e:	46bd      	mov	sp, r7
 8004330:	b007      	add	sp, #28
 8004332:	bd90      	pop	{r4, r7, pc}
 8004334:	fffffefd 	.word	0xfffffefd
 8004338:	0002f1ff 	.word	0x0002f1ff

0800433c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	0002      	movs	r2, r0
 8004344:	1dfb      	adds	r3, r7, #7
 8004346:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004348:	1dfb      	adds	r3, r7, #7
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b7f      	cmp	r3, #127	; 0x7f
 800434e:	d809      	bhi.n	8004364 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004350:	1dfb      	adds	r3, r7, #7
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	001a      	movs	r2, r3
 8004356:	231f      	movs	r3, #31
 8004358:	401a      	ands	r2, r3
 800435a:	4b04      	ldr	r3, [pc, #16]	; (800436c <__NVIC_EnableIRQ+0x30>)
 800435c:	2101      	movs	r1, #1
 800435e:	4091      	lsls	r1, r2
 8004360:	000a      	movs	r2, r1
 8004362:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004364:	46c0      	nop			; (mov r8, r8)
 8004366:	46bd      	mov	sp, r7
 8004368:	b002      	add	sp, #8
 800436a:	bd80      	pop	{r7, pc}
 800436c:	e000e100 	.word	0xe000e100

08004370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004370:	b590      	push	{r4, r7, lr}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	0002      	movs	r2, r0
 8004378:	6039      	str	r1, [r7, #0]
 800437a:	1dfb      	adds	r3, r7, #7
 800437c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800437e:	1dfb      	adds	r3, r7, #7
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	2b7f      	cmp	r3, #127	; 0x7f
 8004384:	d828      	bhi.n	80043d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004386:	4a2f      	ldr	r2, [pc, #188]	; (8004444 <__NVIC_SetPriority+0xd4>)
 8004388:	1dfb      	adds	r3, r7, #7
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	b25b      	sxtb	r3, r3
 800438e:	089b      	lsrs	r3, r3, #2
 8004390:	33c0      	adds	r3, #192	; 0xc0
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	589b      	ldr	r3, [r3, r2]
 8004396:	1dfa      	adds	r2, r7, #7
 8004398:	7812      	ldrb	r2, [r2, #0]
 800439a:	0011      	movs	r1, r2
 800439c:	2203      	movs	r2, #3
 800439e:	400a      	ands	r2, r1
 80043a0:	00d2      	lsls	r2, r2, #3
 80043a2:	21ff      	movs	r1, #255	; 0xff
 80043a4:	4091      	lsls	r1, r2
 80043a6:	000a      	movs	r2, r1
 80043a8:	43d2      	mvns	r2, r2
 80043aa:	401a      	ands	r2, r3
 80043ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	019b      	lsls	r3, r3, #6
 80043b2:	22ff      	movs	r2, #255	; 0xff
 80043b4:	401a      	ands	r2, r3
 80043b6:	1dfb      	adds	r3, r7, #7
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	0018      	movs	r0, r3
 80043bc:	2303      	movs	r3, #3
 80043be:	4003      	ands	r3, r0
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043c4:	481f      	ldr	r0, [pc, #124]	; (8004444 <__NVIC_SetPriority+0xd4>)
 80043c6:	1dfb      	adds	r3, r7, #7
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	b25b      	sxtb	r3, r3
 80043cc:	089b      	lsrs	r3, r3, #2
 80043ce:	430a      	orrs	r2, r1
 80043d0:	33c0      	adds	r3, #192	; 0xc0
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80043d6:	e031      	b.n	800443c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80043d8:	4a1b      	ldr	r2, [pc, #108]	; (8004448 <__NVIC_SetPriority+0xd8>)
 80043da:	1dfb      	adds	r3, r7, #7
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	0019      	movs	r1, r3
 80043e0:	230f      	movs	r3, #15
 80043e2:	400b      	ands	r3, r1
 80043e4:	3b08      	subs	r3, #8
 80043e6:	089b      	lsrs	r3, r3, #2
 80043e8:	3306      	adds	r3, #6
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	18d3      	adds	r3, r2, r3
 80043ee:	3304      	adds	r3, #4
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	1dfa      	adds	r2, r7, #7
 80043f4:	7812      	ldrb	r2, [r2, #0]
 80043f6:	0011      	movs	r1, r2
 80043f8:	2203      	movs	r2, #3
 80043fa:	400a      	ands	r2, r1
 80043fc:	00d2      	lsls	r2, r2, #3
 80043fe:	21ff      	movs	r1, #255	; 0xff
 8004400:	4091      	lsls	r1, r2
 8004402:	000a      	movs	r2, r1
 8004404:	43d2      	mvns	r2, r2
 8004406:	401a      	ands	r2, r3
 8004408:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	019b      	lsls	r3, r3, #6
 800440e:	22ff      	movs	r2, #255	; 0xff
 8004410:	401a      	ands	r2, r3
 8004412:	1dfb      	adds	r3, r7, #7
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	0018      	movs	r0, r3
 8004418:	2303      	movs	r3, #3
 800441a:	4003      	ands	r3, r0
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004420:	4809      	ldr	r0, [pc, #36]	; (8004448 <__NVIC_SetPriority+0xd8>)
 8004422:	1dfb      	adds	r3, r7, #7
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	001c      	movs	r4, r3
 8004428:	230f      	movs	r3, #15
 800442a:	4023      	ands	r3, r4
 800442c:	3b08      	subs	r3, #8
 800442e:	089b      	lsrs	r3, r3, #2
 8004430:	430a      	orrs	r2, r1
 8004432:	3306      	adds	r3, #6
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	18c3      	adds	r3, r0, r3
 8004438:	3304      	adds	r3, #4
 800443a:	601a      	str	r2, [r3, #0]
}
 800443c:	46c0      	nop			; (mov r8, r8)
 800443e:	46bd      	mov	sp, r7
 8004440:	b003      	add	sp, #12
 8004442:	bd90      	pop	{r4, r7, pc}
 8004444:	e000e100 	.word	0xe000e100
 8004448:	e000ed00 	.word	0xe000ed00

0800444c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	1e5a      	subs	r2, r3, #1
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	045b      	lsls	r3, r3, #17
 800445c:	429a      	cmp	r2, r3
 800445e:	d301      	bcc.n	8004464 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004460:	2301      	movs	r3, #1
 8004462:	e010      	b.n	8004486 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004464:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <SysTick_Config+0x44>)
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	3a01      	subs	r2, #1
 800446a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800446c:	2301      	movs	r3, #1
 800446e:	425b      	negs	r3, r3
 8004470:	2103      	movs	r1, #3
 8004472:	0018      	movs	r0, r3
 8004474:	f7ff ff7c 	bl	8004370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004478:	4b05      	ldr	r3, [pc, #20]	; (8004490 <SysTick_Config+0x44>)
 800447a:	2200      	movs	r2, #0
 800447c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800447e:	4b04      	ldr	r3, [pc, #16]	; (8004490 <SysTick_Config+0x44>)
 8004480:	2207      	movs	r2, #7
 8004482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004484:	2300      	movs	r3, #0
}
 8004486:	0018      	movs	r0, r3
 8004488:	46bd      	mov	sp, r7
 800448a:	b002      	add	sp, #8
 800448c:	bd80      	pop	{r7, pc}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	e000e010 	.word	0xe000e010

08004494 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	210f      	movs	r1, #15
 80044a0:	187b      	adds	r3, r7, r1
 80044a2:	1c02      	adds	r2, r0, #0
 80044a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	187b      	adds	r3, r7, r1
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	b25b      	sxtb	r3, r3
 80044ae:	0011      	movs	r1, r2
 80044b0:	0018      	movs	r0, r3
 80044b2:	f7ff ff5d 	bl	8004370 <__NVIC_SetPriority>
}
 80044b6:	46c0      	nop			; (mov r8, r8)
 80044b8:	46bd      	mov	sp, r7
 80044ba:	b004      	add	sp, #16
 80044bc:	bd80      	pop	{r7, pc}

080044be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b082      	sub	sp, #8
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	0002      	movs	r2, r0
 80044c6:	1dfb      	adds	r3, r7, #7
 80044c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044ca:	1dfb      	adds	r3, r7, #7
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	b25b      	sxtb	r3, r3
 80044d0:	0018      	movs	r0, r3
 80044d2:	f7ff ff33 	bl	800433c <__NVIC_EnableIRQ>
}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	46bd      	mov	sp, r7
 80044da:	b002      	add	sp, #8
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	0018      	movs	r0, r3
 80044ea:	f7ff ffaf 	bl	800444c <SysTick_Config>
 80044ee:	0003      	movs	r3, r0
}
 80044f0:	0018      	movs	r0, r3
 80044f2:	46bd      	mov	sp, r7
 80044f4:	b002      	add	sp, #8
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e077      	b.n	80045fa <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a3d      	ldr	r2, [pc, #244]	; (8004604 <HAL_DMA_Init+0x10c>)
 8004510:	4694      	mov	ip, r2
 8004512:	4463      	add	r3, ip
 8004514:	2114      	movs	r1, #20
 8004516:	0018      	movs	r0, r3
 8004518:	f7fb fe10 	bl	800013c <__udivsi3>
 800451c:	0003      	movs	r3, r0
 800451e:	009a      	lsls	r2, r3, #2
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2225      	movs	r2, #37	; 0x25
 8004528:	2102      	movs	r1, #2
 800452a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4934      	ldr	r1, [pc, #208]	; (8004608 <HAL_DMA_Init+0x110>)
 8004538:	400a      	ands	r2, r1
 800453a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6819      	ldr	r1, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	431a      	orrs	r2, r3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	0018      	movs	r0, r3
 8004576:	f000 f9c1 	bl	80048fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	2380      	movs	r3, #128	; 0x80
 8004580:	01db      	lsls	r3, r3, #7
 8004582:	429a      	cmp	r2, r3
 8004584:	d102      	bne.n	800458c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004594:	213f      	movs	r1, #63	; 0x3f
 8004596:	400a      	ands	r2, r1
 8004598:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80045a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d011      	beq.n	80045d0 <HAL_DMA_Init+0xd8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d80d      	bhi.n	80045d0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	0018      	movs	r0, r3
 80045b8:	f000 f9cc 	bl	8004954 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045c0:	2200      	movs	r2, #0
 80045c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80045cc:	605a      	str	r2, [r3, #4]
 80045ce:	e008      	b.n	80045e2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2225      	movs	r2, #37	; 0x25
 80045ec:	2101      	movs	r1, #1
 80045ee:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2224      	movs	r2, #36	; 0x24
 80045f4:	2100      	movs	r1, #0
 80045f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	0018      	movs	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b002      	add	sp, #8
 8004600:	bd80      	pop	{r7, pc}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	bffdfff8 	.word	0xbffdfff8
 8004608:	ffff800f 	.word	0xffff800f

0800460c <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800461a:	2317      	movs	r3, #23
 800461c:	18fb      	adds	r3, r7, r3
 800461e:	2200      	movs	r2, #0
 8004620:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2224      	movs	r2, #36	; 0x24
 8004626:	5c9b      	ldrb	r3, [r3, r2]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_DMA_Start_IT+0x24>
 800462c:	2302      	movs	r3, #2
 800462e:	e06f      	b.n	8004710 <HAL_DMA_Start_IT+0x104>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2224      	movs	r2, #36	; 0x24
 8004634:	2101      	movs	r1, #1
 8004636:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2225      	movs	r2, #37	; 0x25
 800463c:	5c9b      	ldrb	r3, [r3, r2]
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b01      	cmp	r3, #1
 8004642:	d157      	bne.n	80046f4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2225      	movs	r2, #37	; 0x25
 8004648:	2102      	movs	r1, #2
 800464a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2101      	movs	r1, #1
 800465e:	438a      	bics	r2, r1
 8004660:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f907 	bl	800487c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	2b00      	cmp	r3, #0
 8004674:	d008      	beq.n	8004688 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	210e      	movs	r1, #14
 8004682:	430a      	orrs	r2, r1
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e00f      	b.n	80046a8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2104      	movs	r1, #4
 8004694:	438a      	bics	r2, r1
 8004696:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	210a      	movs	r1, #10
 80046a4:	430a      	orrs	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	2380      	movs	r3, #128	; 0x80
 80046b0:	025b      	lsls	r3, r3, #9
 80046b2:	4013      	ands	r3, r2
 80046b4:	d008      	beq.n	80046c8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c0:	2180      	movs	r1, #128	; 0x80
 80046c2:	0049      	lsls	r1, r1, #1
 80046c4:	430a      	orrs	r2, r1
 80046c6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046da:	2180      	movs	r1, #128	; 0x80
 80046dc:	0049      	lsls	r1, r1, #1
 80046de:	430a      	orrs	r2, r1
 80046e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2101      	movs	r1, #1
 80046ee:	430a      	orrs	r2, r1
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	e00a      	b.n	800470a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2280      	movs	r2, #128	; 0x80
 80046f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2224      	movs	r2, #36	; 0x24
 80046fe:	2100      	movs	r1, #0
 8004700:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8004702:	2317      	movs	r3, #23
 8004704:	18fb      	adds	r3, r7, r3
 8004706:	2201      	movs	r2, #1
 8004708:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800470a:	2317      	movs	r3, #23
 800470c:	18fb      	adds	r3, r7, r3
 800470e:	781b      	ldrb	r3, [r3, #0]
}
 8004710:	0018      	movs	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	b006      	add	sp, #24
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8004720:	4b55      	ldr	r3, [pc, #340]	; (8004878 <HAL_DMA_IRQHandler+0x160>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	221c      	movs	r2, #28
 8004734:	4013      	ands	r3, r2
 8004736:	2204      	movs	r2, #4
 8004738:	409a      	lsls	r2, r3
 800473a:	0013      	movs	r3, r2
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4013      	ands	r3, r2
 8004740:	d027      	beq.n	8004792 <HAL_DMA_IRQHandler+0x7a>
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2204      	movs	r2, #4
 8004746:	4013      	ands	r3, r2
 8004748:	d023      	beq.n	8004792 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2220      	movs	r2, #32
 8004752:	4013      	ands	r3, r2
 8004754:	d107      	bne.n	8004766 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2104      	movs	r1, #4
 8004762:	438a      	bics	r2, r1
 8004764:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004766:	4b44      	ldr	r3, [pc, #272]	; (8004878 <HAL_DMA_IRQHandler+0x160>)
 8004768:	6859      	ldr	r1, [r3, #4]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	221c      	movs	r2, #28
 8004770:	4013      	ands	r3, r2
 8004772:	2204      	movs	r2, #4
 8004774:	409a      	lsls	r2, r3
 8004776:	4b40      	ldr	r3, [pc, #256]	; (8004878 <HAL_DMA_IRQHandler+0x160>)
 8004778:	430a      	orrs	r2, r1
 800477a:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	2b00      	cmp	r3, #0
 8004782:	d100      	bne.n	8004786 <HAL_DMA_IRQHandler+0x6e>
 8004784:	e073      	b.n	800486e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	0010      	movs	r0, r2
 800478e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004790:	e06d      	b.n	800486e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	221c      	movs	r2, #28
 8004798:	4013      	ands	r3, r2
 800479a:	2202      	movs	r2, #2
 800479c:	409a      	lsls	r2, r3
 800479e:	0013      	movs	r3, r2
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	4013      	ands	r3, r2
 80047a4:	d02e      	beq.n	8004804 <HAL_DMA_IRQHandler+0xec>
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2202      	movs	r2, #2
 80047aa:	4013      	ands	r3, r2
 80047ac:	d02a      	beq.n	8004804 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2220      	movs	r2, #32
 80047b6:	4013      	ands	r3, r2
 80047b8:	d10b      	bne.n	80047d2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	210a      	movs	r1, #10
 80047c6:	438a      	bics	r2, r1
 80047c8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2225      	movs	r2, #37	; 0x25
 80047ce:	2101      	movs	r1, #1
 80047d0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80047d2:	4b29      	ldr	r3, [pc, #164]	; (8004878 <HAL_DMA_IRQHandler+0x160>)
 80047d4:	6859      	ldr	r1, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	221c      	movs	r2, #28
 80047dc:	4013      	ands	r3, r2
 80047de:	2202      	movs	r2, #2
 80047e0:	409a      	lsls	r2, r3
 80047e2:	4b25      	ldr	r3, [pc, #148]	; (8004878 <HAL_DMA_IRQHandler+0x160>)
 80047e4:	430a      	orrs	r2, r1
 80047e6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2224      	movs	r2, #36	; 0x24
 80047ec:	2100      	movs	r1, #0
 80047ee:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d03a      	beq.n	800486e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	0010      	movs	r0, r2
 8004800:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004802:	e034      	b.n	800486e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004808:	221c      	movs	r2, #28
 800480a:	4013      	ands	r3, r2
 800480c:	2208      	movs	r2, #8
 800480e:	409a      	lsls	r2, r3
 8004810:	0013      	movs	r3, r2
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4013      	ands	r3, r2
 8004816:	d02b      	beq.n	8004870 <HAL_DMA_IRQHandler+0x158>
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2208      	movs	r2, #8
 800481c:	4013      	ands	r3, r2
 800481e:	d027      	beq.n	8004870 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	210e      	movs	r1, #14
 800482c:	438a      	bics	r2, r1
 800482e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004830:	4b11      	ldr	r3, [pc, #68]	; (8004878 <HAL_DMA_IRQHandler+0x160>)
 8004832:	6859      	ldr	r1, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004838:	221c      	movs	r2, #28
 800483a:	4013      	ands	r3, r2
 800483c:	2201      	movs	r2, #1
 800483e:	409a      	lsls	r2, r3
 8004840:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <HAL_DMA_IRQHandler+0x160>)
 8004842:	430a      	orrs	r2, r1
 8004844:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2225      	movs	r2, #37	; 0x25
 8004850:	2101      	movs	r1, #1
 8004852:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2224      	movs	r2, #36	; 0x24
 8004858:	2100      	movs	r1, #0
 800485a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	0010      	movs	r0, r2
 800486c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	46c0      	nop			; (mov r8, r8)
}
 8004872:	46bd      	mov	sp, r7
 8004874:	b004      	add	sp, #16
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40020000 	.word	0x40020000

0800487c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004892:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004898:	2b00      	cmp	r3, #0
 800489a:	d004      	beq.n	80048a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80048a4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80048a6:	4b14      	ldr	r3, [pc, #80]	; (80048f8 <DMA_SetConfig+0x7c>)
 80048a8:	6859      	ldr	r1, [r3, #4]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	221c      	movs	r2, #28
 80048b0:	4013      	ands	r3, r2
 80048b2:	2201      	movs	r2, #1
 80048b4:	409a      	lsls	r2, r3
 80048b6:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <DMA_SetConfig+0x7c>)
 80048b8:	430a      	orrs	r2, r1
 80048ba:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	2b10      	cmp	r3, #16
 80048ca:	d108      	bne.n	80048de <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80048dc:	e007      	b.n	80048ee <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	60da      	str	r2, [r3, #12]
}
 80048ee:	46c0      	nop			; (mov r8, r8)
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b004      	add	sp, #16
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	40020000 	.word	0x40020000

080048fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	089b      	lsrs	r3, r3, #2
 800490a:	4a10      	ldr	r2, [pc, #64]	; (800494c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800490c:	4694      	mov	ip, r2
 800490e:	4463      	add	r3, ip
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	001a      	movs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	001a      	movs	r2, r3
 800491e:	23ff      	movs	r3, #255	; 0xff
 8004920:	4013      	ands	r3, r2
 8004922:	3b08      	subs	r3, #8
 8004924:	2114      	movs	r1, #20
 8004926:	0018      	movs	r0, r3
 8004928:	f7fb fc08 	bl	800013c <__udivsi3>
 800492c:	0003      	movs	r3, r0
 800492e:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a07      	ldr	r2, [pc, #28]	; (8004950 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8004934:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	221f      	movs	r2, #31
 800493a:	4013      	ands	r3, r2
 800493c:	2201      	movs	r2, #1
 800493e:	409a      	lsls	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004944:	46c0      	nop			; (mov r8, r8)
 8004946:	46bd      	mov	sp, r7
 8004948:	b004      	add	sp, #16
 800494a:	bd80      	pop	{r7, pc}
 800494c:	10008200 	.word	0x10008200
 8004950:	40020880 	.word	0x40020880

08004954 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	223f      	movs	r2, #63	; 0x3f
 8004962:	4013      	ands	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4a0a      	ldr	r2, [pc, #40]	; (8004994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800496a:	4694      	mov	ip, r2
 800496c:	4463      	add	r3, ip
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	001a      	movs	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a07      	ldr	r2, [pc, #28]	; (8004998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800497a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	3b01      	subs	r3, #1
 8004980:	2203      	movs	r2, #3
 8004982:	4013      	ands	r3, r2
 8004984:	2201      	movs	r2, #1
 8004986:	409a      	lsls	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	46bd      	mov	sp, r7
 8004990:	b004      	add	sp, #16
 8004992:	bd80      	pop	{r7, pc}
 8004994:	1000823f 	.word	0x1000823f
 8004998:	40020940 	.word	0x40020940

0800499c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049a6:	2300      	movs	r3, #0
 80049a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049aa:	e147      	b.n	8004c3c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2101      	movs	r1, #1
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4091      	lsls	r1, r2
 80049b6:	000a      	movs	r2, r1
 80049b8:	4013      	ands	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d100      	bne.n	80049c4 <HAL_GPIO_Init+0x28>
 80049c2:	e138      	b.n	8004c36 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d00b      	beq.n	80049e4 <HAL_GPIO_Init+0x48>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2b02      	cmp	r3, #2
 80049d2:	d007      	beq.n	80049e4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80049d8:	2b11      	cmp	r3, #17
 80049da:	d003      	beq.n	80049e4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b12      	cmp	r3, #18
 80049e2:	d130      	bne.n	8004a46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	2203      	movs	r2, #3
 80049f0:	409a      	lsls	r2, r3
 80049f2:	0013      	movs	r3, r2
 80049f4:	43da      	mvns	r2, r3
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	4013      	ands	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	409a      	lsls	r2, r3
 8004a06:	0013      	movs	r3, r2
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	409a      	lsls	r2, r3
 8004a20:	0013      	movs	r3, r2
 8004a22:	43da      	mvns	r2, r3
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	4013      	ands	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	091b      	lsrs	r3, r3, #4
 8004a30:	2201      	movs	r2, #1
 8004a32:	401a      	ands	r2, r3
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	409a      	lsls	r2, r3
 8004a38:	0013      	movs	r3, r2
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	2203      	movs	r2, #3
 8004a52:	409a      	lsls	r2, r3
 8004a54:	0013      	movs	r3, r2
 8004a56:	43da      	mvns	r2, r3
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	409a      	lsls	r2, r3
 8004a68:	0013      	movs	r3, r2
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d003      	beq.n	8004a86 <HAL_GPIO_Init+0xea>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b12      	cmp	r3, #18
 8004a84:	d123      	bne.n	8004ace <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	08da      	lsrs	r2, r3, #3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3208      	adds	r2, #8
 8004a8e:	0092      	lsls	r2, r2, #2
 8004a90:	58d3      	ldr	r3, [r2, r3]
 8004a92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	2207      	movs	r2, #7
 8004a98:	4013      	ands	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	220f      	movs	r2, #15
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	0013      	movs	r3, r2
 8004aa2:	43da      	mvns	r2, r3
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2107      	movs	r1, #7
 8004ab2:	400b      	ands	r3, r1
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	409a      	lsls	r2, r3
 8004ab8:	0013      	movs	r3, r2
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	08da      	lsrs	r2, r3, #3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3208      	adds	r2, #8
 8004ac8:	0092      	lsls	r2, r2, #2
 8004aca:	6939      	ldr	r1, [r7, #16]
 8004acc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	2203      	movs	r2, #3
 8004ada:	409a      	lsls	r2, r3
 8004adc:	0013      	movs	r3, r2
 8004ade:	43da      	mvns	r2, r3
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2203      	movs	r2, #3
 8004aec:	401a      	ands	r2, r3
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	005b      	lsls	r3, r3, #1
 8004af2:	409a      	lsls	r2, r3
 8004af4:	0013      	movs	r3, r2
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	693a      	ldr	r2, [r7, #16]
 8004b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	2380      	movs	r3, #128	; 0x80
 8004b08:	055b      	lsls	r3, r3, #21
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	d100      	bne.n	8004b10 <HAL_GPIO_Init+0x174>
 8004b0e:	e092      	b.n	8004c36 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004b10:	4a50      	ldr	r2, [pc, #320]	; (8004c54 <HAL_GPIO_Init+0x2b8>)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	089b      	lsrs	r3, r3, #2
 8004b16:	3318      	adds	r3, #24
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	589b      	ldr	r3, [r3, r2]
 8004b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2203      	movs	r2, #3
 8004b22:	4013      	ands	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	220f      	movs	r2, #15
 8004b28:	409a      	lsls	r2, r3
 8004b2a:	0013      	movs	r3, r2
 8004b2c:	43da      	mvns	r2, r3
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	4013      	ands	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	23a0      	movs	r3, #160	; 0xa0
 8004b38:	05db      	lsls	r3, r3, #23
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d013      	beq.n	8004b66 <HAL_GPIO_Init+0x1ca>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a45      	ldr	r2, [pc, #276]	; (8004c58 <HAL_GPIO_Init+0x2bc>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d00d      	beq.n	8004b62 <HAL_GPIO_Init+0x1c6>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a44      	ldr	r2, [pc, #272]	; (8004c5c <HAL_GPIO_Init+0x2c0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d007      	beq.n	8004b5e <HAL_GPIO_Init+0x1c2>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a43      	ldr	r2, [pc, #268]	; (8004c60 <HAL_GPIO_Init+0x2c4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d101      	bne.n	8004b5a <HAL_GPIO_Init+0x1be>
 8004b56:	2303      	movs	r3, #3
 8004b58:	e006      	b.n	8004b68 <HAL_GPIO_Init+0x1cc>
 8004b5a:	2305      	movs	r3, #5
 8004b5c:	e004      	b.n	8004b68 <HAL_GPIO_Init+0x1cc>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e002      	b.n	8004b68 <HAL_GPIO_Init+0x1cc>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <HAL_GPIO_Init+0x1cc>
 8004b66:	2300      	movs	r3, #0
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	2103      	movs	r1, #3
 8004b6c:	400a      	ands	r2, r1
 8004b6e:	00d2      	lsls	r2, r2, #3
 8004b70:	4093      	lsls	r3, r2
 8004b72:	693a      	ldr	r2, [r7, #16]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004b78:	4936      	ldr	r1, [pc, #216]	; (8004c54 <HAL_GPIO_Init+0x2b8>)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	089b      	lsrs	r3, r3, #2
 8004b7e:	3318      	adds	r3, #24
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b86:	4a33      	ldr	r2, [pc, #204]	; (8004c54 <HAL_GPIO_Init+0x2b8>)
 8004b88:	2380      	movs	r3, #128	; 0x80
 8004b8a:	58d3      	ldr	r3, [r2, r3]
 8004b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	43da      	mvns	r2, r3
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4013      	ands	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	2380      	movs	r3, #128	; 0x80
 8004b9e:	025b      	lsls	r3, r3, #9
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d003      	beq.n	8004bac <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004bac:	4929      	ldr	r1, [pc, #164]	; (8004c54 <HAL_GPIO_Init+0x2b8>)
 8004bae:	2280      	movs	r2, #128	; 0x80
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8004bb4:	4a27      	ldr	r2, [pc, #156]	; (8004c54 <HAL_GPIO_Init+0x2b8>)
 8004bb6:	2384      	movs	r3, #132	; 0x84
 8004bb8:	58d3      	ldr	r3, [r2, r3]
 8004bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	43da      	mvns	r2, r3
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	2380      	movs	r3, #128	; 0x80
 8004bcc:	029b      	lsls	r3, r3, #10
 8004bce:	4013      	ands	r3, r2
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004bda:	491e      	ldr	r1, [pc, #120]	; (8004c54 <HAL_GPIO_Init+0x2b8>)
 8004bdc:	2284      	movs	r2, #132	; 0x84
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004be2:	4b1c      	ldr	r3, [pc, #112]	; (8004c54 <HAL_GPIO_Init+0x2b8>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	43da      	mvns	r2, r3
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	2380      	movs	r3, #128	; 0x80
 8004bf8:	035b      	lsls	r3, r3, #13
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d003      	beq.n	8004c06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c06:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <HAL_GPIO_Init+0x2b8>)
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004c0c:	4b11      	ldr	r3, [pc, #68]	; (8004c54 <HAL_GPIO_Init+0x2b8>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	43da      	mvns	r2, r3
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685a      	ldr	r2, [r3, #4]
 8004c20:	2380      	movs	r3, #128	; 0x80
 8004c22:	039b      	lsls	r3, r3, #14
 8004c24:	4013      	ands	r3, r2
 8004c26:	d003      	beq.n	8004c30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c30:	4b08      	ldr	r3, [pc, #32]	; (8004c54 <HAL_GPIO_Init+0x2b8>)
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	40da      	lsrs	r2, r3
 8004c44:	1e13      	subs	r3, r2, #0
 8004c46:	d000      	beq.n	8004c4a <HAL_GPIO_Init+0x2ae>
 8004c48:	e6b0      	b.n	80049ac <HAL_GPIO_Init+0x10>
  }
}
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	46c0      	nop			; (mov r8, r8)
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	b006      	add	sp, #24
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40021800 	.word	0x40021800
 8004c58:	50000400 	.word	0x50000400
 8004c5c:	50000800 	.word	0x50000800
 8004c60:	50000c00 	.word	0x50000c00

08004c64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e082      	b.n	8004d7c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2241      	movs	r2, #65	; 0x41
 8004c7a:	5c9b      	ldrb	r3, [r3, r2]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d107      	bne.n	8004c92 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2240      	movs	r2, #64	; 0x40
 8004c86:	2100      	movs	r1, #0
 8004c88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7fe f923 	bl	8002ed8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2241      	movs	r2, #65	; 0x41
 8004c96:	2124      	movs	r1, #36	; 0x24
 8004c98:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	438a      	bics	r2, r1
 8004ca8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4934      	ldr	r1, [pc, #208]	; (8004d84 <HAL_I2C_Init+0x120>)
 8004cb4:	400a      	ands	r2, r1
 8004cb6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	689a      	ldr	r2, [r3, #8]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4931      	ldr	r1, [pc, #196]	; (8004d88 <HAL_I2C_Init+0x124>)
 8004cc4:	400a      	ands	r2, r1
 8004cc6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d108      	bne.n	8004ce2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2180      	movs	r1, #128	; 0x80
 8004cda:	0209      	lsls	r1, r1, #8
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	609a      	str	r2, [r3, #8]
 8004ce0:	e007      	b.n	8004cf2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2184      	movs	r1, #132	; 0x84
 8004cec:	0209      	lsls	r1, r1, #8
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d104      	bne.n	8004d04 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2280      	movs	r2, #128	; 0x80
 8004d00:	0112      	lsls	r2, r2, #4
 8004d02:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	491f      	ldr	r1, [pc, #124]	; (8004d8c <HAL_I2C_Init+0x128>)
 8004d10:	430a      	orrs	r2, r1
 8004d12:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	491a      	ldr	r1, [pc, #104]	; (8004d88 <HAL_I2C_Init+0x124>)
 8004d20:	400a      	ands	r2, r1
 8004d22:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	0011      	movs	r1, r2
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	021a      	lsls	r2, r3, #8
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69d9      	ldr	r1, [r3, #28]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1a      	ldr	r2, [r3, #32]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2101      	movs	r1, #1
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2241      	movs	r2, #65	; 0x41
 8004d68:	2120      	movs	r1, #32
 8004d6a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2242      	movs	r2, #66	; 0x42
 8004d76:	2100      	movs	r1, #0
 8004d78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	0018      	movs	r0, r3
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	b002      	add	sp, #8
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	f0ffffff 	.word	0xf0ffffff
 8004d88:	ffff7fff 	.word	0xffff7fff
 8004d8c:	02008000 	.word	0x02008000

08004d90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d90:	b590      	push	{r4, r7, lr}
 8004d92:	b089      	sub	sp, #36	; 0x24
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	000c      	movs	r4, r1
 8004d9a:	0010      	movs	r0, r2
 8004d9c:	0019      	movs	r1, r3
 8004d9e:	230a      	movs	r3, #10
 8004da0:	18fb      	adds	r3, r7, r3
 8004da2:	1c22      	adds	r2, r4, #0
 8004da4:	801a      	strh	r2, [r3, #0]
 8004da6:	2308      	movs	r3, #8
 8004da8:	18fb      	adds	r3, r7, r3
 8004daa:	1c02      	adds	r2, r0, #0
 8004dac:	801a      	strh	r2, [r3, #0]
 8004dae:	1dbb      	adds	r3, r7, #6
 8004db0:	1c0a      	adds	r2, r1, #0
 8004db2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2241      	movs	r2, #65	; 0x41
 8004db8:	5c9b      	ldrb	r3, [r3, r2]
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d000      	beq.n	8004dc2 <HAL_I2C_Mem_Write+0x32>
 8004dc0:	e10c      	b.n	8004fdc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d004      	beq.n	8004dd2 <HAL_I2C_Mem_Write+0x42>
 8004dc8:	232c      	movs	r3, #44	; 0x2c
 8004dca:	18fb      	adds	r3, r7, r3
 8004dcc:	881b      	ldrh	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d105      	bne.n	8004dde <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2280      	movs	r2, #128	; 0x80
 8004dd6:	0092      	lsls	r2, r2, #2
 8004dd8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e0ff      	b.n	8004fde <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2240      	movs	r2, #64	; 0x40
 8004de2:	5c9b      	ldrb	r3, [r3, r2]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d101      	bne.n	8004dec <HAL_I2C_Mem_Write+0x5c>
 8004de8:	2302      	movs	r3, #2
 8004dea:	e0f8      	b.n	8004fde <HAL_I2C_Mem_Write+0x24e>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2240      	movs	r2, #64	; 0x40
 8004df0:	2101      	movs	r1, #1
 8004df2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004df4:	f7fe fad2 	bl	800339c <HAL_GetTick>
 8004df8:	0003      	movs	r3, r0
 8004dfa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004dfc:	2380      	movs	r3, #128	; 0x80
 8004dfe:	0219      	lsls	r1, r3, #8
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	2319      	movs	r3, #25
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f000 f975 	bl	80050f8 <I2C_WaitOnFlagUntilTimeout>
 8004e0e:	1e03      	subs	r3, r0, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e0e3      	b.n	8004fde <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2241      	movs	r2, #65	; 0x41
 8004e1a:	2121      	movs	r1, #33	; 0x21
 8004e1c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2242      	movs	r2, #66	; 0x42
 8004e22:	2140      	movs	r1, #64	; 0x40
 8004e24:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	222c      	movs	r2, #44	; 0x2c
 8004e36:	18ba      	adds	r2, r7, r2
 8004e38:	8812      	ldrh	r2, [r2, #0]
 8004e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e42:	1dbb      	adds	r3, r7, #6
 8004e44:	881c      	ldrh	r4, [r3, #0]
 8004e46:	2308      	movs	r3, #8
 8004e48:	18fb      	adds	r3, r7, r3
 8004e4a:	881a      	ldrh	r2, [r3, #0]
 8004e4c:	230a      	movs	r3, #10
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	8819      	ldrh	r1, [r3, #0]
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	9301      	str	r3, [sp, #4]
 8004e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	0023      	movs	r3, r4
 8004e5e:	f000 f8c5 	bl	8004fec <I2C_RequestMemoryWrite>
 8004e62:	1e03      	subs	r3, r0, #0
 8004e64:	d005      	beq.n	8004e72 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2240      	movs	r2, #64	; 0x40
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e0b5      	b.n	8004fde <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2bff      	cmp	r3, #255	; 0xff
 8004e7a:	d911      	bls.n	8004ea0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	22ff      	movs	r2, #255	; 0xff
 8004e80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	2380      	movs	r3, #128	; 0x80
 8004e8a:	045c      	lsls	r4, r3, #17
 8004e8c:	230a      	movs	r3, #10
 8004e8e:	18fb      	adds	r3, r7, r3
 8004e90:	8819      	ldrh	r1, [r3, #0]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	2300      	movs	r3, #0
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	0023      	movs	r3, r4
 8004e9a:	f000 fa4d 	bl	8005338 <I2C_TransferConfig>
 8004e9e:	e012      	b.n	8004ec6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	2380      	movs	r3, #128	; 0x80
 8004eb2:	049c      	lsls	r4, r3, #18
 8004eb4:	230a      	movs	r3, #10
 8004eb6:	18fb      	adds	r3, r7, r3
 8004eb8:	8819      	ldrh	r1, [r3, #0]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	9300      	str	r3, [sp, #0]
 8004ec0:	0023      	movs	r3, r4
 8004ec2:	f000 fa39 	bl	8005338 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	0018      	movs	r0, r3
 8004ece:	f000 f952 	bl	8005176 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ed2:	1e03      	subs	r3, r0, #0
 8004ed4:	d001      	beq.n	8004eda <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e081      	b.n	8004fde <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	781a      	ldrb	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eea:	1c5a      	adds	r2, r3, #1
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d03a      	beq.n	8004f8a <HAL_I2C_Mem_Write+0x1fa>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d136      	bne.n	8004f8a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	9300      	str	r3, [sp, #0]
 8004f24:	0013      	movs	r3, r2
 8004f26:	2200      	movs	r2, #0
 8004f28:	2180      	movs	r1, #128	; 0x80
 8004f2a:	f000 f8e5 	bl	80050f8 <I2C_WaitOnFlagUntilTimeout>
 8004f2e:	1e03      	subs	r3, r0, #0
 8004f30:	d001      	beq.n	8004f36 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e053      	b.n	8004fde <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	2bff      	cmp	r3, #255	; 0xff
 8004f3e:	d911      	bls.n	8004f64 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	22ff      	movs	r2, #255	; 0xff
 8004f44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	2380      	movs	r3, #128	; 0x80
 8004f4e:	045c      	lsls	r4, r3, #17
 8004f50:	230a      	movs	r3, #10
 8004f52:	18fb      	adds	r3, r7, r3
 8004f54:	8819      	ldrh	r1, [r3, #0]
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	0023      	movs	r3, r4
 8004f5e:	f000 f9eb 	bl	8005338 <I2C_TransferConfig>
 8004f62:	e012      	b.n	8004f8a <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f72:	b2da      	uxtb	r2, r3
 8004f74:	2380      	movs	r3, #128	; 0x80
 8004f76:	049c      	lsls	r4, r3, #18
 8004f78:	230a      	movs	r3, #10
 8004f7a:	18fb      	adds	r3, r7, r3
 8004f7c:	8819      	ldrh	r1, [r3, #0]
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	2300      	movs	r3, #0
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	0023      	movs	r3, r4
 8004f86:	f000 f9d7 	bl	8005338 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d198      	bne.n	8004ec6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f94:	697a      	ldr	r2, [r7, #20]
 8004f96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	f000 f92a 	bl	80051f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004fa0:	1e03      	subs	r3, r0, #0
 8004fa2:	d001      	beq.n	8004fa8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e01a      	b.n	8004fde <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2220      	movs	r2, #32
 8004fae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	490b      	ldr	r1, [pc, #44]	; (8004fe8 <HAL_I2C_Mem_Write+0x258>)
 8004fbc:	400a      	ands	r2, r1
 8004fbe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2241      	movs	r2, #65	; 0x41
 8004fc4:	2120      	movs	r1, #32
 8004fc6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2242      	movs	r2, #66	; 0x42
 8004fcc:	2100      	movs	r1, #0
 8004fce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2240      	movs	r2, #64	; 0x40
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	e000      	b.n	8004fde <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004fdc:	2302      	movs	r3, #2
  }
}
 8004fde:	0018      	movs	r0, r3
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	b007      	add	sp, #28
 8004fe4:	bd90      	pop	{r4, r7, pc}
 8004fe6:	46c0      	nop			; (mov r8, r8)
 8004fe8:	fe00e800 	.word	0xfe00e800

08004fec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fec:	b5b0      	push	{r4, r5, r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af02      	add	r7, sp, #8
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	000c      	movs	r4, r1
 8004ff6:	0010      	movs	r0, r2
 8004ff8:	0019      	movs	r1, r3
 8004ffa:	250a      	movs	r5, #10
 8004ffc:	197b      	adds	r3, r7, r5
 8004ffe:	1c22      	adds	r2, r4, #0
 8005000:	801a      	strh	r2, [r3, #0]
 8005002:	2308      	movs	r3, #8
 8005004:	18fb      	adds	r3, r7, r3
 8005006:	1c02      	adds	r2, r0, #0
 8005008:	801a      	strh	r2, [r3, #0]
 800500a:	1dbb      	adds	r3, r7, #6
 800500c:	1c0a      	adds	r2, r1, #0
 800500e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005010:	1dbb      	adds	r3, r7, #6
 8005012:	881b      	ldrh	r3, [r3, #0]
 8005014:	b2da      	uxtb	r2, r3
 8005016:	2380      	movs	r3, #128	; 0x80
 8005018:	045c      	lsls	r4, r3, #17
 800501a:	197b      	adds	r3, r7, r5
 800501c:	8819      	ldrh	r1, [r3, #0]
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	4b23      	ldr	r3, [pc, #140]	; (80050b0 <I2C_RequestMemoryWrite+0xc4>)
 8005022:	9300      	str	r3, [sp, #0]
 8005024:	0023      	movs	r3, r4
 8005026:	f000 f987 	bl	8005338 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800502a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502c:	6a39      	ldr	r1, [r7, #32]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	0018      	movs	r0, r3
 8005032:	f000 f8a0 	bl	8005176 <I2C_WaitOnTXISFlagUntilTimeout>
 8005036:	1e03      	subs	r3, r0, #0
 8005038:	d001      	beq.n	800503e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e033      	b.n	80050a6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800503e:	1dbb      	adds	r3, r7, #6
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d107      	bne.n	8005056 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005046:	2308      	movs	r3, #8
 8005048:	18fb      	adds	r3, r7, r3
 800504a:	881b      	ldrh	r3, [r3, #0]
 800504c:	b2da      	uxtb	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	629a      	str	r2, [r3, #40]	; 0x28
 8005054:	e019      	b.n	800508a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005056:	2308      	movs	r3, #8
 8005058:	18fb      	adds	r3, r7, r3
 800505a:	881b      	ldrh	r3, [r3, #0]
 800505c:	0a1b      	lsrs	r3, r3, #8
 800505e:	b29b      	uxth	r3, r3
 8005060:	b2da      	uxtb	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506a:	6a39      	ldr	r1, [r7, #32]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	0018      	movs	r0, r3
 8005070:	f000 f881 	bl	8005176 <I2C_WaitOnTXISFlagUntilTimeout>
 8005074:	1e03      	subs	r3, r0, #0
 8005076:	d001      	beq.n	800507c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e014      	b.n	80050a6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800507c:	2308      	movs	r3, #8
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	881b      	ldrh	r3, [r3, #0]
 8005082:	b2da      	uxtb	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800508a:	6a3a      	ldr	r2, [r7, #32]
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	0013      	movs	r3, r2
 8005094:	2200      	movs	r2, #0
 8005096:	2180      	movs	r1, #128	; 0x80
 8005098:	f000 f82e 	bl	80050f8 <I2C_WaitOnFlagUntilTimeout>
 800509c:	1e03      	subs	r3, r0, #0
 800509e:	d001      	beq.n	80050a4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	0018      	movs	r0, r3
 80050a8:	46bd      	mov	sp, r7
 80050aa:	b004      	add	sp, #16
 80050ac:	bdb0      	pop	{r4, r5, r7, pc}
 80050ae:	46c0      	nop			; (mov r8, r8)
 80050b0:	80002000 	.word	0x80002000

080050b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	699b      	ldr	r3, [r3, #24]
 80050c2:	2202      	movs	r2, #2
 80050c4:	4013      	ands	r3, r2
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d103      	bne.n	80050d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2200      	movs	r2, #0
 80050d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	2201      	movs	r2, #1
 80050da:	4013      	ands	r3, r2
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d007      	beq.n	80050f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2101      	movs	r1, #1
 80050ec:	430a      	orrs	r2, r1
 80050ee:	619a      	str	r2, [r3, #24]
  }
}
 80050f0:	46c0      	nop			; (mov r8, r8)
 80050f2:	46bd      	mov	sp, r7
 80050f4:	b002      	add	sp, #8
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	603b      	str	r3, [r7, #0]
 8005104:	1dfb      	adds	r3, r7, #7
 8005106:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005108:	e021      	b.n	800514e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	3301      	adds	r3, #1
 800510e:	d01e      	beq.n	800514e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005110:	f7fe f944 	bl	800339c <HAL_GetTick>
 8005114:	0002      	movs	r2, r0
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d302      	bcc.n	8005126 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d113      	bne.n	800514e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	2220      	movs	r2, #32
 800512c:	431a      	orrs	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2241      	movs	r2, #65	; 0x41
 8005136:	2120      	movs	r1, #32
 8005138:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2242      	movs	r2, #66	; 0x42
 800513e:	2100      	movs	r1, #0
 8005140:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2240      	movs	r2, #64	; 0x40
 8005146:	2100      	movs	r1, #0
 8005148:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e00f      	b.n	800516e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	4013      	ands	r3, r2
 8005158:	68ba      	ldr	r2, [r7, #8]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	425a      	negs	r2, r3
 800515e:	4153      	adcs	r3, r2
 8005160:	b2db      	uxtb	r3, r3
 8005162:	001a      	movs	r2, r3
 8005164:	1dfb      	adds	r3, r7, #7
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	429a      	cmp	r2, r3
 800516a:	d0ce      	beq.n	800510a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	0018      	movs	r0, r3
 8005170:	46bd      	mov	sp, r7
 8005172:	b004      	add	sp, #16
 8005174:	bd80      	pop	{r7, pc}

08005176 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b084      	sub	sp, #16
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005182:	e02b      	b.n	80051dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	0018      	movs	r0, r3
 800518c:	f000 f86e 	bl	800526c <I2C_IsAcknowledgeFailed>
 8005190:	1e03      	subs	r3, r0, #0
 8005192:	d001      	beq.n	8005198 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e029      	b.n	80051ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	3301      	adds	r3, #1
 800519c:	d01e      	beq.n	80051dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800519e:	f7fe f8fd 	bl	800339c <HAL_GetTick>
 80051a2:	0002      	movs	r2, r0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d302      	bcc.n	80051b4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d113      	bne.n	80051dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051b8:	2220      	movs	r2, #32
 80051ba:	431a      	orrs	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2241      	movs	r2, #65	; 0x41
 80051c4:	2120      	movs	r1, #32
 80051c6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2242      	movs	r2, #66	; 0x42
 80051cc:	2100      	movs	r1, #0
 80051ce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2240      	movs	r2, #64	; 0x40
 80051d4:	2100      	movs	r1, #0
 80051d6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e007      	b.n	80051ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	2202      	movs	r2, #2
 80051e4:	4013      	ands	r3, r2
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d1cc      	bne.n	8005184 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	0018      	movs	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	b004      	add	sp, #16
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005200:	e028      	b.n	8005254 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	0018      	movs	r0, r3
 800520a:	f000 f82f 	bl	800526c <I2C_IsAcknowledgeFailed>
 800520e:	1e03      	subs	r3, r0, #0
 8005210:	d001      	beq.n	8005216 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e026      	b.n	8005264 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005216:	f7fe f8c1 	bl	800339c <HAL_GetTick>
 800521a:	0002      	movs	r2, r0
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	429a      	cmp	r2, r3
 8005224:	d302      	bcc.n	800522c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d113      	bne.n	8005254 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005230:	2220      	movs	r2, #32
 8005232:	431a      	orrs	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2241      	movs	r2, #65	; 0x41
 800523c:	2120      	movs	r1, #32
 800523e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2242      	movs	r2, #66	; 0x42
 8005244:	2100      	movs	r1, #0
 8005246:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2240      	movs	r2, #64	; 0x40
 800524c:	2100      	movs	r1, #0
 800524e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e007      	b.n	8005264 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	2220      	movs	r2, #32
 800525c:	4013      	ands	r3, r2
 800525e:	2b20      	cmp	r3, #32
 8005260:	d1cf      	bne.n	8005202 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	0018      	movs	r0, r3
 8005266:	46bd      	mov	sp, r7
 8005268:	b004      	add	sp, #16
 800526a:	bd80      	pop	{r7, pc}

0800526c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	2210      	movs	r2, #16
 8005280:	4013      	ands	r3, r2
 8005282:	2b10      	cmp	r3, #16
 8005284:	d151      	bne.n	800532a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005286:	e021      	b.n	80052cc <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	3301      	adds	r3, #1
 800528c:	d01e      	beq.n	80052cc <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528e:	f7fe f885 	bl	800339c <HAL_GetTick>
 8005292:	0002      	movs	r2, r0
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	429a      	cmp	r2, r3
 800529c:	d302      	bcc.n	80052a4 <I2C_IsAcknowledgeFailed+0x38>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d113      	bne.n	80052cc <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a8:	2220      	movs	r2, #32
 80052aa:	431a      	orrs	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2241      	movs	r2, #65	; 0x41
 80052b4:	2120      	movs	r1, #32
 80052b6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2242      	movs	r2, #66	; 0x42
 80052bc:	2100      	movs	r1, #0
 80052be:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2240      	movs	r2, #64	; 0x40
 80052c4:	2100      	movs	r1, #0
 80052c6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e02f      	b.n	800532c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	2220      	movs	r2, #32
 80052d4:	4013      	ands	r3, r2
 80052d6:	2b20      	cmp	r3, #32
 80052d8:	d1d6      	bne.n	8005288 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2210      	movs	r2, #16
 80052e0:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2220      	movs	r2, #32
 80052e8:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	0018      	movs	r0, r3
 80052ee:	f7ff fee1 	bl	80050b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	490d      	ldr	r1, [pc, #52]	; (8005334 <I2C_IsAcknowledgeFailed+0xc8>)
 80052fe:	400a      	ands	r2, r1
 8005300:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005306:	2204      	movs	r2, #4
 8005308:	431a      	orrs	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2241      	movs	r2, #65	; 0x41
 8005312:	2120      	movs	r1, #32
 8005314:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2242      	movs	r2, #66	; 0x42
 800531a:	2100      	movs	r1, #0
 800531c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2240      	movs	r2, #64	; 0x40
 8005322:	2100      	movs	r1, #0
 8005324:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e000      	b.n	800532c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	0018      	movs	r0, r3
 800532e:	46bd      	mov	sp, r7
 8005330:	b004      	add	sp, #16
 8005332:	bd80      	pop	{r7, pc}
 8005334:	fe00e800 	.word	0xfe00e800

08005338 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8005338:	b590      	push	{r4, r7, lr}
 800533a:	b085      	sub	sp, #20
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	0008      	movs	r0, r1
 8005342:	0011      	movs	r1, r2
 8005344:	607b      	str	r3, [r7, #4]
 8005346:	240a      	movs	r4, #10
 8005348:	193b      	adds	r3, r7, r4
 800534a:	1c02      	adds	r2, r0, #0
 800534c:	801a      	strh	r2, [r3, #0]
 800534e:	2009      	movs	r0, #9
 8005350:	183b      	adds	r3, r7, r0
 8005352:	1c0a      	adds	r2, r1, #0
 8005354:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	6a3a      	ldr	r2, [r7, #32]
 800535e:	0d51      	lsrs	r1, r2, #21
 8005360:	2280      	movs	r2, #128	; 0x80
 8005362:	00d2      	lsls	r2, r2, #3
 8005364:	400a      	ands	r2, r1
 8005366:	490e      	ldr	r1, [pc, #56]	; (80053a0 <I2C_TransferConfig+0x68>)
 8005368:	430a      	orrs	r2, r1
 800536a:	43d2      	mvns	r2, r2
 800536c:	401a      	ands	r2, r3
 800536e:	0011      	movs	r1, r2
 8005370:	193b      	adds	r3, r7, r4
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	059b      	lsls	r3, r3, #22
 8005376:	0d9a      	lsrs	r2, r3, #22
 8005378:	183b      	adds	r3, r7, r0
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	0418      	lsls	r0, r3, #16
 800537e:	23ff      	movs	r3, #255	; 0xff
 8005380:	041b      	lsls	r3, r3, #16
 8005382:	4003      	ands	r3, r0
 8005384:	431a      	orrs	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	431a      	orrs	r2, r3
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	431a      	orrs	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	46bd      	mov	sp, r7
 800539a:	b005      	add	sp, #20
 800539c:	bd90      	pop	{r4, r7, pc}
 800539e:	46c0      	nop			; (mov r8, r8)
 80053a0:	03ff63ff 	.word	0x03ff63ff

080053a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b082      	sub	sp, #8
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2241      	movs	r2, #65	; 0x41
 80053b2:	5c9b      	ldrb	r3, [r3, r2]
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b20      	cmp	r3, #32
 80053b8:	d138      	bne.n	800542c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2240      	movs	r2, #64	; 0x40
 80053be:	5c9b      	ldrb	r3, [r3, r2]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d101      	bne.n	80053c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80053c4:	2302      	movs	r3, #2
 80053c6:	e032      	b.n	800542e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2240      	movs	r2, #64	; 0x40
 80053cc:	2101      	movs	r1, #1
 80053ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2241      	movs	r2, #65	; 0x41
 80053d4:	2124      	movs	r1, #36	; 0x24
 80053d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2101      	movs	r1, #1
 80053e4:	438a      	bics	r2, r1
 80053e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4911      	ldr	r1, [pc, #68]	; (8005438 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80053f4:	400a      	ands	r2, r1
 80053f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6819      	ldr	r1, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	683a      	ldr	r2, [r7, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2101      	movs	r1, #1
 8005414:	430a      	orrs	r2, r1
 8005416:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2241      	movs	r2, #65	; 0x41
 800541c:	2120      	movs	r1, #32
 800541e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2240      	movs	r2, #64	; 0x40
 8005424:	2100      	movs	r1, #0
 8005426:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005428:	2300      	movs	r3, #0
 800542a:	e000      	b.n	800542e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800542c:	2302      	movs	r3, #2
  }
}
 800542e:	0018      	movs	r0, r3
 8005430:	46bd      	mov	sp, r7
 8005432:	b002      	add	sp, #8
 8005434:	bd80      	pop	{r7, pc}
 8005436:	46c0      	nop			; (mov r8, r8)
 8005438:	ffffefff 	.word	0xffffefff

0800543c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2241      	movs	r2, #65	; 0x41
 800544a:	5c9b      	ldrb	r3, [r3, r2]
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b20      	cmp	r3, #32
 8005450:	d139      	bne.n	80054c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2240      	movs	r2, #64	; 0x40
 8005456:	5c9b      	ldrb	r3, [r3, r2]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d101      	bne.n	8005460 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800545c:	2302      	movs	r3, #2
 800545e:	e033      	b.n	80054c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2240      	movs	r2, #64	; 0x40
 8005464:	2101      	movs	r1, #1
 8005466:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2241      	movs	r2, #65	; 0x41
 800546c:	2124      	movs	r1, #36	; 0x24
 800546e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2101      	movs	r1, #1
 800547c:	438a      	bics	r2, r1
 800547e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4a11      	ldr	r2, [pc, #68]	; (80054d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800548c:	4013      	ands	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	021b      	lsls	r3, r3, #8
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2101      	movs	r1, #1
 80054ae:	430a      	orrs	r2, r1
 80054b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2241      	movs	r2, #65	; 0x41
 80054b6:	2120      	movs	r1, #32
 80054b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2240      	movs	r2, #64	; 0x40
 80054be:	2100      	movs	r1, #0
 80054c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80054c2:	2300      	movs	r3, #0
 80054c4:	e000      	b.n	80054c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80054c6:	2302      	movs	r3, #2
  }
}
 80054c8:	0018      	movs	r0, r3
 80054ca:	46bd      	mov	sp, r7
 80054cc:	b004      	add	sp, #16
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	fffff0ff 	.word	0xfffff0ff

080054d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80054dc:	4b19      	ldr	r3, [pc, #100]	; (8005544 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a19      	ldr	r2, [pc, #100]	; (8005548 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80054e2:	4013      	ands	r3, r2
 80054e4:	0019      	movs	r1, r3
 80054e6:	4b17      	ldr	r3, [pc, #92]	; (8005544 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	430a      	orrs	r2, r1
 80054ec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	2380      	movs	r3, #128	; 0x80
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d11f      	bne.n	8005538 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80054f8:	4b14      	ldr	r3, [pc, #80]	; (800554c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	0013      	movs	r3, r2
 80054fe:	005b      	lsls	r3, r3, #1
 8005500:	189b      	adds	r3, r3, r2
 8005502:	005b      	lsls	r3, r3, #1
 8005504:	4912      	ldr	r1, [pc, #72]	; (8005550 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005506:	0018      	movs	r0, r3
 8005508:	f7fa fe18 	bl	800013c <__udivsi3>
 800550c:	0003      	movs	r3, r0
 800550e:	3301      	adds	r3, #1
 8005510:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005512:	e008      	b.n	8005526 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3b01      	subs	r3, #1
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	e001      	b.n	8005526 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e009      	b.n	800553a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005526:	4b07      	ldr	r3, [pc, #28]	; (8005544 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005528:	695a      	ldr	r2, [r3, #20]
 800552a:	2380      	movs	r3, #128	; 0x80
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	401a      	ands	r2, r3
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	429a      	cmp	r2, r3
 8005536:	d0ed      	beq.n	8005514 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	0018      	movs	r0, r3
 800553c:	46bd      	mov	sp, r7
 800553e:	b004      	add	sp, #16
 8005540:	bd80      	pop	{r7, pc}
 8005542:	46c0      	nop			; (mov r8, r8)
 8005544:	40007000 	.word	0x40007000
 8005548:	fffff9ff 	.word	0xfffff9ff
 800554c:	20000008 	.word	0x20000008
 8005550:	000f4240 	.word	0x000f4240

08005554 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d101      	bne.n	8005566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e304      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2201      	movs	r2, #1
 800556c:	4013      	ands	r3, r2
 800556e:	d100      	bne.n	8005572 <HAL_RCC_OscConfig+0x1e>
 8005570:	e07c      	b.n	800566c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005572:	4bc3      	ldr	r3, [pc, #780]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	2238      	movs	r2, #56	; 0x38
 8005578:	4013      	ands	r3, r2
 800557a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800557c:	4bc0      	ldr	r3, [pc, #768]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	2203      	movs	r2, #3
 8005582:	4013      	ands	r3, r2
 8005584:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	2b10      	cmp	r3, #16
 800558a:	d102      	bne.n	8005592 <HAL_RCC_OscConfig+0x3e>
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	2b03      	cmp	r3, #3
 8005590:	d002      	beq.n	8005598 <HAL_RCC_OscConfig+0x44>
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	2b08      	cmp	r3, #8
 8005596:	d10b      	bne.n	80055b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005598:	4bb9      	ldr	r3, [pc, #740]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	2380      	movs	r3, #128	; 0x80
 800559e:	029b      	lsls	r3, r3, #10
 80055a0:	4013      	ands	r3, r2
 80055a2:	d062      	beq.n	800566a <HAL_RCC_OscConfig+0x116>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d15e      	bne.n	800566a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e2df      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	2380      	movs	r3, #128	; 0x80
 80055b6:	025b      	lsls	r3, r3, #9
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d107      	bne.n	80055cc <HAL_RCC_OscConfig+0x78>
 80055bc:	4bb0      	ldr	r3, [pc, #704]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	4baf      	ldr	r3, [pc, #700]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 80055c2:	2180      	movs	r1, #128	; 0x80
 80055c4:	0249      	lsls	r1, r1, #9
 80055c6:	430a      	orrs	r2, r1
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e020      	b.n	800560e <HAL_RCC_OscConfig+0xba>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	23a0      	movs	r3, #160	; 0xa0
 80055d2:	02db      	lsls	r3, r3, #11
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d10e      	bne.n	80055f6 <HAL_RCC_OscConfig+0xa2>
 80055d8:	4ba9      	ldr	r3, [pc, #676]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	4ba8      	ldr	r3, [pc, #672]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 80055de:	2180      	movs	r1, #128	; 0x80
 80055e0:	02c9      	lsls	r1, r1, #11
 80055e2:	430a      	orrs	r2, r1
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	4ba6      	ldr	r3, [pc, #664]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	4ba5      	ldr	r3, [pc, #660]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 80055ec:	2180      	movs	r1, #128	; 0x80
 80055ee:	0249      	lsls	r1, r1, #9
 80055f0:	430a      	orrs	r2, r1
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	e00b      	b.n	800560e <HAL_RCC_OscConfig+0xba>
 80055f6:	4ba2      	ldr	r3, [pc, #648]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4ba1      	ldr	r3, [pc, #644]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 80055fc:	49a1      	ldr	r1, [pc, #644]	; (8005884 <HAL_RCC_OscConfig+0x330>)
 80055fe:	400a      	ands	r2, r1
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	4b9f      	ldr	r3, [pc, #636]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	4b9e      	ldr	r3, [pc, #632]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 8005608:	499f      	ldr	r1, [pc, #636]	; (8005888 <HAL_RCC_OscConfig+0x334>)
 800560a:	400a      	ands	r2, r1
 800560c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d014      	beq.n	8005640 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005616:	f7fd fec1 	bl	800339c <HAL_GetTick>
 800561a:	0003      	movs	r3, r0
 800561c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005620:	f7fd febc 	bl	800339c <HAL_GetTick>
 8005624:	0002      	movs	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b64      	cmp	r3, #100	; 0x64
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e29e      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005632:	4b93      	ldr	r3, [pc, #588]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	2380      	movs	r3, #128	; 0x80
 8005638:	029b      	lsls	r3, r3, #10
 800563a:	4013      	ands	r3, r2
 800563c:	d0f0      	beq.n	8005620 <HAL_RCC_OscConfig+0xcc>
 800563e:	e015      	b.n	800566c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005640:	f7fd feac 	bl	800339c <HAL_GetTick>
 8005644:	0003      	movs	r3, r0
 8005646:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800564a:	f7fd fea7 	bl	800339c <HAL_GetTick>
 800564e:	0002      	movs	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b64      	cmp	r3, #100	; 0x64
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e289      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800565c:	4b88      	ldr	r3, [pc, #544]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	2380      	movs	r3, #128	; 0x80
 8005662:	029b      	lsls	r3, r3, #10
 8005664:	4013      	ands	r3, r2
 8005666:	d1f0      	bne.n	800564a <HAL_RCC_OscConfig+0xf6>
 8005668:	e000      	b.n	800566c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800566a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2202      	movs	r2, #2
 8005672:	4013      	ands	r3, r2
 8005674:	d100      	bne.n	8005678 <HAL_RCC_OscConfig+0x124>
 8005676:	e099      	b.n	80057ac <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005678:	4b81      	ldr	r3, [pc, #516]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2238      	movs	r2, #56	; 0x38
 800567e:	4013      	ands	r3, r2
 8005680:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005682:	4b7f      	ldr	r3, [pc, #508]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	2203      	movs	r2, #3
 8005688:	4013      	ands	r3, r2
 800568a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	2b10      	cmp	r3, #16
 8005690:	d102      	bne.n	8005698 <HAL_RCC_OscConfig+0x144>
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b02      	cmp	r3, #2
 8005696:	d002      	beq.n	800569e <HAL_RCC_OscConfig+0x14a>
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d135      	bne.n	800570a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800569e:	4b78      	ldr	r3, [pc, #480]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	2380      	movs	r3, #128	; 0x80
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	4013      	ands	r3, r2
 80056a8:	d005      	beq.n	80056b6 <HAL_RCC_OscConfig+0x162>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e25c      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056b6:	4b72      	ldr	r3, [pc, #456]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	4a74      	ldr	r2, [pc, #464]	; (800588c <HAL_RCC_OscConfig+0x338>)
 80056bc:	4013      	ands	r3, r2
 80056be:	0019      	movs	r1, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	021a      	lsls	r2, r3, #8
 80056c6:	4b6e      	ldr	r3, [pc, #440]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 80056c8:	430a      	orrs	r2, r1
 80056ca:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d112      	bne.n	80056f8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80056d2:	4b6b      	ldr	r3, [pc, #428]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a6e      	ldr	r2, [pc, #440]	; (8005890 <HAL_RCC_OscConfig+0x33c>)
 80056d8:	4013      	ands	r3, r2
 80056da:	0019      	movs	r1, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691a      	ldr	r2, [r3, #16]
 80056e0:	4b67      	ldr	r3, [pc, #412]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 80056e2:	430a      	orrs	r2, r1
 80056e4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80056e6:	4b66      	ldr	r3, [pc, #408]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	0adb      	lsrs	r3, r3, #11
 80056ec:	2207      	movs	r2, #7
 80056ee:	4013      	ands	r3, r2
 80056f0:	4a68      	ldr	r2, [pc, #416]	; (8005894 <HAL_RCC_OscConfig+0x340>)
 80056f2:	40da      	lsrs	r2, r3
 80056f4:	4b68      	ldr	r3, [pc, #416]	; (8005898 <HAL_RCC_OscConfig+0x344>)
 80056f6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80056f8:	4b68      	ldr	r3, [pc, #416]	; (800589c <HAL_RCC_OscConfig+0x348>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	0018      	movs	r0, r3
 80056fe:	f7fd fdf1 	bl	80032e4 <HAL_InitTick>
 8005702:	1e03      	subs	r3, r0, #0
 8005704:	d051      	beq.n	80057aa <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e232      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d030      	beq.n	8005774 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005712:	4b5b      	ldr	r3, [pc, #364]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a5e      	ldr	r2, [pc, #376]	; (8005890 <HAL_RCC_OscConfig+0x33c>)
 8005718:	4013      	ands	r3, r2
 800571a:	0019      	movs	r1, r3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	4b57      	ldr	r3, [pc, #348]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 8005722:	430a      	orrs	r2, r1
 8005724:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005726:	4b56      	ldr	r3, [pc, #344]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	4b55      	ldr	r3, [pc, #340]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 800572c:	2180      	movs	r1, #128	; 0x80
 800572e:	0049      	lsls	r1, r1, #1
 8005730:	430a      	orrs	r2, r1
 8005732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005734:	f7fd fe32 	bl	800339c <HAL_GetTick>
 8005738:	0003      	movs	r3, r0
 800573a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800573c:	e008      	b.n	8005750 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800573e:	f7fd fe2d 	bl	800339c <HAL_GetTick>
 8005742:	0002      	movs	r2, r0
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e20f      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005750:	4b4b      	ldr	r3, [pc, #300]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	2380      	movs	r3, #128	; 0x80
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	4013      	ands	r3, r2
 800575a:	d0f0      	beq.n	800573e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800575c:	4b48      	ldr	r3, [pc, #288]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	4a4a      	ldr	r2, [pc, #296]	; (800588c <HAL_RCC_OscConfig+0x338>)
 8005762:	4013      	ands	r3, r2
 8005764:	0019      	movs	r1, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	021a      	lsls	r2, r3, #8
 800576c:	4b44      	ldr	r3, [pc, #272]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 800576e:	430a      	orrs	r2, r1
 8005770:	605a      	str	r2, [r3, #4]
 8005772:	e01b      	b.n	80057ac <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005774:	4b42      	ldr	r3, [pc, #264]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	4b41      	ldr	r3, [pc, #260]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 800577a:	4949      	ldr	r1, [pc, #292]	; (80058a0 <HAL_RCC_OscConfig+0x34c>)
 800577c:	400a      	ands	r2, r1
 800577e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005780:	f7fd fe0c 	bl	800339c <HAL_GetTick>
 8005784:	0003      	movs	r3, r0
 8005786:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005788:	e008      	b.n	800579c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800578a:	f7fd fe07 	bl	800339c <HAL_GetTick>
 800578e:	0002      	movs	r2, r0
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b02      	cmp	r3, #2
 8005796:	d901      	bls.n	800579c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e1e9      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800579c:	4b38      	ldr	r3, [pc, #224]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	2380      	movs	r3, #128	; 0x80
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	4013      	ands	r3, r2
 80057a6:	d1f0      	bne.n	800578a <HAL_RCC_OscConfig+0x236>
 80057a8:	e000      	b.n	80057ac <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057aa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2208      	movs	r2, #8
 80057b2:	4013      	ands	r3, r2
 80057b4:	d047      	beq.n	8005846 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80057b6:	4b32      	ldr	r3, [pc, #200]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	2238      	movs	r2, #56	; 0x38
 80057bc:	4013      	ands	r3, r2
 80057be:	2b18      	cmp	r3, #24
 80057c0:	d10a      	bne.n	80057d8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80057c2:	4b2f      	ldr	r3, [pc, #188]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 80057c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c6:	2202      	movs	r2, #2
 80057c8:	4013      	ands	r3, r2
 80057ca:	d03c      	beq.n	8005846 <HAL_RCC_OscConfig+0x2f2>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d138      	bne.n	8005846 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e1cb      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d019      	beq.n	8005814 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80057e0:	4b27      	ldr	r3, [pc, #156]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 80057e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057e4:	4b26      	ldr	r3, [pc, #152]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 80057e6:	2101      	movs	r1, #1
 80057e8:	430a      	orrs	r2, r1
 80057ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ec:	f7fd fdd6 	bl	800339c <HAL_GetTick>
 80057f0:	0003      	movs	r3, r0
 80057f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f6:	f7fd fdd1 	bl	800339c <HAL_GetTick>
 80057fa:	0002      	movs	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e1b3      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005808:	4b1d      	ldr	r3, [pc, #116]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 800580a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800580c:	2202      	movs	r2, #2
 800580e:	4013      	ands	r3, r2
 8005810:	d0f1      	beq.n	80057f6 <HAL_RCC_OscConfig+0x2a2>
 8005812:	e018      	b.n	8005846 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005814:	4b1a      	ldr	r3, [pc, #104]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 8005816:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005818:	4b19      	ldr	r3, [pc, #100]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 800581a:	2101      	movs	r1, #1
 800581c:	438a      	bics	r2, r1
 800581e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005820:	f7fd fdbc 	bl	800339c <HAL_GetTick>
 8005824:	0003      	movs	r3, r0
 8005826:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005828:	e008      	b.n	800583c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800582a:	f7fd fdb7 	bl	800339c <HAL_GetTick>
 800582e:	0002      	movs	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e199      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800583c:	4b10      	ldr	r3, [pc, #64]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 800583e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005840:	2202      	movs	r2, #2
 8005842:	4013      	ands	r3, r2
 8005844:	d1f1      	bne.n	800582a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2204      	movs	r2, #4
 800584c:	4013      	ands	r3, r2
 800584e:	d100      	bne.n	8005852 <HAL_RCC_OscConfig+0x2fe>
 8005850:	e0c6      	b.n	80059e0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005852:	231f      	movs	r3, #31
 8005854:	18fb      	adds	r3, r7, r3
 8005856:	2200      	movs	r2, #0
 8005858:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800585a:	4b09      	ldr	r3, [pc, #36]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2238      	movs	r2, #56	; 0x38
 8005860:	4013      	ands	r3, r2
 8005862:	2b20      	cmp	r3, #32
 8005864:	d11e      	bne.n	80058a4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005866:	4b06      	ldr	r3, [pc, #24]	; (8005880 <HAL_RCC_OscConfig+0x32c>)
 8005868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800586a:	2202      	movs	r2, #2
 800586c:	4013      	ands	r3, r2
 800586e:	d100      	bne.n	8005872 <HAL_RCC_OscConfig+0x31e>
 8005870:	e0b6      	b.n	80059e0 <HAL_RCC_OscConfig+0x48c>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d000      	beq.n	800587c <HAL_RCC_OscConfig+0x328>
 800587a:	e0b1      	b.n	80059e0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	e177      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>
 8005880:	40021000 	.word	0x40021000
 8005884:	fffeffff 	.word	0xfffeffff
 8005888:	fffbffff 	.word	0xfffbffff
 800588c:	ffff80ff 	.word	0xffff80ff
 8005890:	ffffc7ff 	.word	0xffffc7ff
 8005894:	00f42400 	.word	0x00f42400
 8005898:	20000008 	.word	0x20000008
 800589c:	2000000c 	.word	0x2000000c
 80058a0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80058a4:	4bb4      	ldr	r3, [pc, #720]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 80058a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058a8:	2380      	movs	r3, #128	; 0x80
 80058aa:	055b      	lsls	r3, r3, #21
 80058ac:	4013      	ands	r3, r2
 80058ae:	d101      	bne.n	80058b4 <HAL_RCC_OscConfig+0x360>
 80058b0:	2301      	movs	r3, #1
 80058b2:	e000      	b.n	80058b6 <HAL_RCC_OscConfig+0x362>
 80058b4:	2300      	movs	r3, #0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d011      	beq.n	80058de <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80058ba:	4baf      	ldr	r3, [pc, #700]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 80058bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058be:	4bae      	ldr	r3, [pc, #696]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 80058c0:	2180      	movs	r1, #128	; 0x80
 80058c2:	0549      	lsls	r1, r1, #21
 80058c4:	430a      	orrs	r2, r1
 80058c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80058c8:	4bab      	ldr	r3, [pc, #684]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 80058ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058cc:	2380      	movs	r3, #128	; 0x80
 80058ce:	055b      	lsls	r3, r3, #21
 80058d0:	4013      	ands	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80058d6:	231f      	movs	r3, #31
 80058d8:	18fb      	adds	r3, r7, r3
 80058da:	2201      	movs	r2, #1
 80058dc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058de:	4ba7      	ldr	r3, [pc, #668]	; (8005b7c <HAL_RCC_OscConfig+0x628>)
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	2380      	movs	r3, #128	; 0x80
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	4013      	ands	r3, r2
 80058e8:	d11a      	bne.n	8005920 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058ea:	4ba4      	ldr	r3, [pc, #656]	; (8005b7c <HAL_RCC_OscConfig+0x628>)
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	4ba3      	ldr	r3, [pc, #652]	; (8005b7c <HAL_RCC_OscConfig+0x628>)
 80058f0:	2180      	movs	r1, #128	; 0x80
 80058f2:	0049      	lsls	r1, r1, #1
 80058f4:	430a      	orrs	r2, r1
 80058f6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80058f8:	f7fd fd50 	bl	800339c <HAL_GetTick>
 80058fc:	0003      	movs	r3, r0
 80058fe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005900:	e008      	b.n	8005914 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005902:	f7fd fd4b 	bl	800339c <HAL_GetTick>
 8005906:	0002      	movs	r2, r0
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b02      	cmp	r3, #2
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e12d      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005914:	4b99      	ldr	r3, [pc, #612]	; (8005b7c <HAL_RCC_OscConfig+0x628>)
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	2380      	movs	r3, #128	; 0x80
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	4013      	ands	r3, r2
 800591e:	d0f0      	beq.n	8005902 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	2b01      	cmp	r3, #1
 8005926:	d106      	bne.n	8005936 <HAL_RCC_OscConfig+0x3e2>
 8005928:	4b93      	ldr	r3, [pc, #588]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 800592a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800592c:	4b92      	ldr	r3, [pc, #584]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 800592e:	2101      	movs	r1, #1
 8005930:	430a      	orrs	r2, r1
 8005932:	65da      	str	r2, [r3, #92]	; 0x5c
 8005934:	e01c      	b.n	8005970 <HAL_RCC_OscConfig+0x41c>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	2b05      	cmp	r3, #5
 800593c:	d10c      	bne.n	8005958 <HAL_RCC_OscConfig+0x404>
 800593e:	4b8e      	ldr	r3, [pc, #568]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005940:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005942:	4b8d      	ldr	r3, [pc, #564]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005944:	2104      	movs	r1, #4
 8005946:	430a      	orrs	r2, r1
 8005948:	65da      	str	r2, [r3, #92]	; 0x5c
 800594a:	4b8b      	ldr	r3, [pc, #556]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 800594c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800594e:	4b8a      	ldr	r3, [pc, #552]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005950:	2101      	movs	r1, #1
 8005952:	430a      	orrs	r2, r1
 8005954:	65da      	str	r2, [r3, #92]	; 0x5c
 8005956:	e00b      	b.n	8005970 <HAL_RCC_OscConfig+0x41c>
 8005958:	4b87      	ldr	r3, [pc, #540]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 800595a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800595c:	4b86      	ldr	r3, [pc, #536]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 800595e:	2101      	movs	r1, #1
 8005960:	438a      	bics	r2, r1
 8005962:	65da      	str	r2, [r3, #92]	; 0x5c
 8005964:	4b84      	ldr	r3, [pc, #528]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005966:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005968:	4b83      	ldr	r3, [pc, #524]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 800596a:	2104      	movs	r1, #4
 800596c:	438a      	bics	r2, r1
 800596e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d014      	beq.n	80059a2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005978:	f7fd fd10 	bl	800339c <HAL_GetTick>
 800597c:	0003      	movs	r3, r0
 800597e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005980:	e009      	b.n	8005996 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005982:	f7fd fd0b 	bl	800339c <HAL_GetTick>
 8005986:	0002      	movs	r2, r0
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	4a7c      	ldr	r2, [pc, #496]	; (8005b80 <HAL_RCC_OscConfig+0x62c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d901      	bls.n	8005996 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e0ec      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005996:	4b78      	ldr	r3, [pc, #480]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800599a:	2202      	movs	r2, #2
 800599c:	4013      	ands	r3, r2
 800599e:	d0f0      	beq.n	8005982 <HAL_RCC_OscConfig+0x42e>
 80059a0:	e013      	b.n	80059ca <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a2:	f7fd fcfb 	bl	800339c <HAL_GetTick>
 80059a6:	0003      	movs	r3, r0
 80059a8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059aa:	e009      	b.n	80059c0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ac:	f7fd fcf6 	bl	800339c <HAL_GetTick>
 80059b0:	0002      	movs	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	4a72      	ldr	r2, [pc, #456]	; (8005b80 <HAL_RCC_OscConfig+0x62c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e0d7      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80059c0:	4b6d      	ldr	r3, [pc, #436]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 80059c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c4:	2202      	movs	r2, #2
 80059c6:	4013      	ands	r3, r2
 80059c8:	d1f0      	bne.n	80059ac <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80059ca:	231f      	movs	r3, #31
 80059cc:	18fb      	adds	r3, r7, r3
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d105      	bne.n	80059e0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80059d4:	4b68      	ldr	r3, [pc, #416]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 80059d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059d8:	4b67      	ldr	r3, [pc, #412]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 80059da:	496a      	ldr	r1, [pc, #424]	; (8005b84 <HAL_RCC_OscConfig+0x630>)
 80059dc:	400a      	ands	r2, r1
 80059de:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d100      	bne.n	80059ea <HAL_RCC_OscConfig+0x496>
 80059e8:	e0c1      	b.n	8005b6e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059ea:	4b63      	ldr	r3, [pc, #396]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2238      	movs	r2, #56	; 0x38
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b10      	cmp	r3, #16
 80059f4:	d100      	bne.n	80059f8 <HAL_RCC_OscConfig+0x4a4>
 80059f6:	e081      	b.n	8005afc <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d156      	bne.n	8005aae <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a00:	4b5d      	ldr	r3, [pc, #372]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	4b5c      	ldr	r3, [pc, #368]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005a06:	4960      	ldr	r1, [pc, #384]	; (8005b88 <HAL_RCC_OscConfig+0x634>)
 8005a08:	400a      	ands	r2, r1
 8005a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0c:	f7fd fcc6 	bl	800339c <HAL_GetTick>
 8005a10:	0003      	movs	r3, r0
 8005a12:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a14:	e008      	b.n	8005a28 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a16:	f7fd fcc1 	bl	800339c <HAL_GetTick>
 8005a1a:	0002      	movs	r2, r0
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d901      	bls.n	8005a28 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e0a3      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a28:	4b53      	ldr	r3, [pc, #332]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	2380      	movs	r3, #128	; 0x80
 8005a2e:	049b      	lsls	r3, r3, #18
 8005a30:	4013      	ands	r3, r2
 8005a32:	d1f0      	bne.n	8005a16 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a34:	4b50      	ldr	r3, [pc, #320]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	4a54      	ldr	r2, [pc, #336]	; (8005b8c <HAL_RCC_OscConfig+0x638>)
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	0019      	movs	r1, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1a      	ldr	r2, [r3, #32]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4c:	021b      	lsls	r3, r3, #8
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	431a      	orrs	r2, r3
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a60:	431a      	orrs	r2, r3
 8005a62:	4b45      	ldr	r3, [pc, #276]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005a64:	430a      	orrs	r2, r1
 8005a66:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a68:	4b43      	ldr	r3, [pc, #268]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	4b42      	ldr	r3, [pc, #264]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005a6e:	2180      	movs	r1, #128	; 0x80
 8005a70:	0449      	lsls	r1, r1, #17
 8005a72:	430a      	orrs	r2, r1
 8005a74:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005a76:	4b40      	ldr	r3, [pc, #256]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	4b3f      	ldr	r3, [pc, #252]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005a7c:	2180      	movs	r1, #128	; 0x80
 8005a7e:	0549      	lsls	r1, r1, #21
 8005a80:	430a      	orrs	r2, r1
 8005a82:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a84:	f7fd fc8a 	bl	800339c <HAL_GetTick>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a8e:	f7fd fc85 	bl	800339c <HAL_GetTick>
 8005a92:	0002      	movs	r2, r0
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e067      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aa0:	4b35      	ldr	r3, [pc, #212]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	2380      	movs	r3, #128	; 0x80
 8005aa6:	049b      	lsls	r3, r3, #18
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	d0f0      	beq.n	8005a8e <HAL_RCC_OscConfig+0x53a>
 8005aac:	e05f      	b.n	8005b6e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005aae:	4b32      	ldr	r3, [pc, #200]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	4b31      	ldr	r3, [pc, #196]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005ab4:	4934      	ldr	r1, [pc, #208]	; (8005b88 <HAL_RCC_OscConfig+0x634>)
 8005ab6:	400a      	ands	r2, r1
 8005ab8:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005aba:	4b2f      	ldr	r3, [pc, #188]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	4b2e      	ldr	r3, [pc, #184]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005ac0:	2103      	movs	r1, #3
 8005ac2:	438a      	bics	r2, r1
 8005ac4:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005ac6:	4b2c      	ldr	r3, [pc, #176]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	4b2b      	ldr	r3, [pc, #172]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005acc:	4930      	ldr	r1, [pc, #192]	; (8005b90 <HAL_RCC_OscConfig+0x63c>)
 8005ace:	400a      	ands	r2, r1
 8005ad0:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad2:	f7fd fc63 	bl	800339c <HAL_GetTick>
 8005ad6:	0003      	movs	r3, r0
 8005ad8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005adc:	f7fd fc5e 	bl	800339c <HAL_GetTick>
 8005ae0:	0002      	movs	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e040      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aee:	4b22      	ldr	r3, [pc, #136]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	2380      	movs	r3, #128	; 0x80
 8005af4:	049b      	lsls	r3, r3, #18
 8005af6:	4013      	ands	r3, r2
 8005af8:	d1f0      	bne.n	8005adc <HAL_RCC_OscConfig+0x588>
 8005afa:	e038      	b.n	8005b6e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	69db      	ldr	r3, [r3, #28]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d101      	bne.n	8005b08 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e033      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005b08:	4b1b      	ldr	r3, [pc, #108]	; (8005b78 <HAL_RCC_OscConfig+0x624>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2203      	movs	r2, #3
 8005b12:	401a      	ands	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d126      	bne.n	8005b6a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2270      	movs	r2, #112	; 0x70
 8005b20:	401a      	ands	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d11f      	bne.n	8005b6a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	23fe      	movs	r3, #254	; 0xfe
 8005b2e:	01db      	lsls	r3, r3, #7
 8005b30:	401a      	ands	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b36:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d116      	bne.n	8005b6a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005b3c:	697a      	ldr	r2, [r7, #20]
 8005b3e:	23f8      	movs	r3, #248	; 0xf8
 8005b40:	039b      	lsls	r3, r3, #14
 8005b42:	401a      	ands	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d10e      	bne.n	8005b6a <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	23e0      	movs	r3, #224	; 0xe0
 8005b50:	051b      	lsls	r3, r3, #20
 8005b52:	401a      	ands	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d106      	bne.n	8005b6a <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	0f5b      	lsrs	r3, r3, #29
 8005b60:	075a      	lsls	r2, r3, #29
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d001      	beq.n	8005b6e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	0018      	movs	r0, r3
 8005b72:	46bd      	mov	sp, r7
 8005b74:	b008      	add	sp, #32
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	40007000 	.word	0x40007000
 8005b80:	00001388 	.word	0x00001388
 8005b84:	efffffff 	.word	0xefffffff
 8005b88:	feffffff 	.word	0xfeffffff
 8005b8c:	11c1808c 	.word	0x11c1808c
 8005b90:	eefeffff 	.word	0xeefeffff

08005b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e0e9      	b.n	8005d7c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ba8:	4b76      	ldr	r3, [pc, #472]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2207      	movs	r2, #7
 8005bae:	4013      	ands	r3, r2
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d91e      	bls.n	8005bf4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bb6:	4b73      	ldr	r3, [pc, #460]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2207      	movs	r2, #7
 8005bbc:	4393      	bics	r3, r2
 8005bbe:	0019      	movs	r1, r3
 8005bc0:	4b70      	ldr	r3, [pc, #448]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005bc8:	f7fd fbe8 	bl	800339c <HAL_GetTick>
 8005bcc:	0003      	movs	r3, r0
 8005bce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005bd0:	e009      	b.n	8005be6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bd2:	f7fd fbe3 	bl	800339c <HAL_GetTick>
 8005bd6:	0002      	movs	r2, r0
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	4a6a      	ldr	r2, [pc, #424]	; (8005d88 <HAL_RCC_ClockConfig+0x1f4>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d901      	bls.n	8005be6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	e0ca      	b.n	8005d7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005be6:	4b67      	ldr	r3, [pc, #412]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2207      	movs	r2, #7
 8005bec:	4013      	ands	r3, r2
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d1ee      	bne.n	8005bd2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d015      	beq.n	8005c2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2204      	movs	r2, #4
 8005c04:	4013      	ands	r3, r2
 8005c06:	d006      	beq.n	8005c16 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005c08:	4b60      	ldr	r3, [pc, #384]	; (8005d8c <HAL_RCC_ClockConfig+0x1f8>)
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	4b5f      	ldr	r3, [pc, #380]	; (8005d8c <HAL_RCC_ClockConfig+0x1f8>)
 8005c0e:	21e0      	movs	r1, #224	; 0xe0
 8005c10:	01c9      	lsls	r1, r1, #7
 8005c12:	430a      	orrs	r2, r1
 8005c14:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c16:	4b5d      	ldr	r3, [pc, #372]	; (8005d8c <HAL_RCC_ClockConfig+0x1f8>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	4a5d      	ldr	r2, [pc, #372]	; (8005d90 <HAL_RCC_ClockConfig+0x1fc>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	0019      	movs	r1, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	4b59      	ldr	r3, [pc, #356]	; (8005d8c <HAL_RCC_ClockConfig+0x1f8>)
 8005c26:	430a      	orrs	r2, r1
 8005c28:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	4013      	ands	r3, r2
 8005c32:	d057      	beq.n	8005ce4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d107      	bne.n	8005c4c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c3c:	4b53      	ldr	r3, [pc, #332]	; (8005d8c <HAL_RCC_ClockConfig+0x1f8>)
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	2380      	movs	r3, #128	; 0x80
 8005c42:	029b      	lsls	r3, r3, #10
 8005c44:	4013      	ands	r3, r2
 8005c46:	d12b      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e097      	b.n	8005d7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d107      	bne.n	8005c64 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c54:	4b4d      	ldr	r3, [pc, #308]	; (8005d8c <HAL_RCC_ClockConfig+0x1f8>)
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	2380      	movs	r3, #128	; 0x80
 8005c5a:	049b      	lsls	r3, r3, #18
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	d11f      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e08b      	b.n	8005d7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d107      	bne.n	8005c7c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c6c:	4b47      	ldr	r3, [pc, #284]	; (8005d8c <HAL_RCC_ClockConfig+0x1f8>)
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	2380      	movs	r3, #128	; 0x80
 8005c72:	00db      	lsls	r3, r3, #3
 8005c74:	4013      	ands	r3, r2
 8005c76:	d113      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e07f      	b.n	8005d7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	2b03      	cmp	r3, #3
 8005c82:	d106      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c84:	4b41      	ldr	r3, [pc, #260]	; (8005d8c <HAL_RCC_ClockConfig+0x1f8>)
 8005c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c88:	2202      	movs	r2, #2
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	d108      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e074      	b.n	8005d7c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c92:	4b3e      	ldr	r3, [pc, #248]	; (8005d8c <HAL_RCC_ClockConfig+0x1f8>)
 8005c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c96:	2202      	movs	r2, #2
 8005c98:	4013      	ands	r3, r2
 8005c9a:	d101      	bne.n	8005ca0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e06d      	b.n	8005d7c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ca0:	4b3a      	ldr	r3, [pc, #232]	; (8005d8c <HAL_RCC_ClockConfig+0x1f8>)
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	2207      	movs	r2, #7
 8005ca6:	4393      	bics	r3, r2
 8005ca8:	0019      	movs	r1, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	4b37      	ldr	r3, [pc, #220]	; (8005d8c <HAL_RCC_ClockConfig+0x1f8>)
 8005cb0:	430a      	orrs	r2, r1
 8005cb2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cb4:	f7fd fb72 	bl	800339c <HAL_GetTick>
 8005cb8:	0003      	movs	r3, r0
 8005cba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cbc:	e009      	b.n	8005cd2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cbe:	f7fd fb6d 	bl	800339c <HAL_GetTick>
 8005cc2:	0002      	movs	r2, r0
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	4a2f      	ldr	r2, [pc, #188]	; (8005d88 <HAL_RCC_ClockConfig+0x1f4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e054      	b.n	8005d7c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd2:	4b2e      	ldr	r3, [pc, #184]	; (8005d8c <HAL_RCC_ClockConfig+0x1f8>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2238      	movs	r2, #56	; 0x38
 8005cd8:	401a      	ands	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d1ec      	bne.n	8005cbe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ce4:	4b27      	ldr	r3, [pc, #156]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2207      	movs	r2, #7
 8005cea:	4013      	ands	r3, r2
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d21e      	bcs.n	8005d30 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf2:	4b24      	ldr	r3, [pc, #144]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2207      	movs	r2, #7
 8005cf8:	4393      	bics	r3, r2
 8005cfa:	0019      	movs	r1, r3
 8005cfc:	4b21      	ldr	r3, [pc, #132]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d04:	f7fd fb4a 	bl	800339c <HAL_GetTick>
 8005d08:	0003      	movs	r3, r0
 8005d0a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d0c:	e009      	b.n	8005d22 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d0e:	f7fd fb45 	bl	800339c <HAL_GetTick>
 8005d12:	0002      	movs	r2, r0
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	4a1b      	ldr	r2, [pc, #108]	; (8005d88 <HAL_RCC_ClockConfig+0x1f4>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e02c      	b.n	8005d7c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d22:	4b18      	ldr	r3, [pc, #96]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2207      	movs	r2, #7
 8005d28:	4013      	ands	r3, r2
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d1ee      	bne.n	8005d0e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2204      	movs	r2, #4
 8005d36:	4013      	ands	r3, r2
 8005d38:	d009      	beq.n	8005d4e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005d3a:	4b14      	ldr	r3, [pc, #80]	; (8005d8c <HAL_RCC_ClockConfig+0x1f8>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	4a15      	ldr	r2, [pc, #84]	; (8005d94 <HAL_RCC_ClockConfig+0x200>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	0019      	movs	r1, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	4b10      	ldr	r3, [pc, #64]	; (8005d8c <HAL_RCC_ClockConfig+0x1f8>)
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005d4e:	f000 f829 	bl	8005da4 <HAL_RCC_GetSysClockFreq>
 8005d52:	0001      	movs	r1, r0
 8005d54:	4b0d      	ldr	r3, [pc, #52]	; (8005d8c <HAL_RCC_ClockConfig+0x1f8>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	0a1b      	lsrs	r3, r3, #8
 8005d5a:	220f      	movs	r2, #15
 8005d5c:	401a      	ands	r2, r3
 8005d5e:	4b0e      	ldr	r3, [pc, #56]	; (8005d98 <HAL_RCC_ClockConfig+0x204>)
 8005d60:	0092      	lsls	r2, r2, #2
 8005d62:	58d3      	ldr	r3, [r2, r3]
 8005d64:	221f      	movs	r2, #31
 8005d66:	4013      	ands	r3, r2
 8005d68:	000a      	movs	r2, r1
 8005d6a:	40da      	lsrs	r2, r3
 8005d6c:	4b0b      	ldr	r3, [pc, #44]	; (8005d9c <HAL_RCC_ClockConfig+0x208>)
 8005d6e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d70:	4b0b      	ldr	r3, [pc, #44]	; (8005da0 <HAL_RCC_ClockConfig+0x20c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	0018      	movs	r0, r3
 8005d76:	f7fd fab5 	bl	80032e4 <HAL_InitTick>
 8005d7a:	0003      	movs	r3, r0
}
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	b004      	add	sp, #16
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	40022000 	.word	0x40022000
 8005d88:	00001388 	.word	0x00001388
 8005d8c:	40021000 	.word	0x40021000
 8005d90:	fffff0ff 	.word	0xfffff0ff
 8005d94:	ffff8fff 	.word	0xffff8fff
 8005d98:	08009d18 	.word	0x08009d18
 8005d9c:	20000008 	.word	0x20000008
 8005da0:	2000000c 	.word	0x2000000c

08005da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005daa:	4b3c      	ldr	r3, [pc, #240]	; (8005e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	2238      	movs	r2, #56	; 0x38
 8005db0:	4013      	ands	r3, r2
 8005db2:	d10f      	bne.n	8005dd4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005db4:	4b39      	ldr	r3, [pc, #228]	; (8005e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	0adb      	lsrs	r3, r3, #11
 8005dba:	2207      	movs	r2, #7
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	409a      	lsls	r2, r3
 8005dc2:	0013      	movs	r3, r2
 8005dc4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005dc6:	6839      	ldr	r1, [r7, #0]
 8005dc8:	4835      	ldr	r0, [pc, #212]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005dca:	f7fa f9b7 	bl	800013c <__udivsi3>
 8005dce:	0003      	movs	r3, r0
 8005dd0:	613b      	str	r3, [r7, #16]
 8005dd2:	e05d      	b.n	8005e90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005dd4:	4b31      	ldr	r3, [pc, #196]	; (8005e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dd6:	689b      	ldr	r3, [r3, #8]
 8005dd8:	2238      	movs	r2, #56	; 0x38
 8005dda:	4013      	ands	r3, r2
 8005ddc:	2b08      	cmp	r3, #8
 8005dde:	d102      	bne.n	8005de6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005de0:	4b30      	ldr	r3, [pc, #192]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005de2:	613b      	str	r3, [r7, #16]
 8005de4:	e054      	b.n	8005e90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005de6:	4b2d      	ldr	r3, [pc, #180]	; (8005e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	2238      	movs	r2, #56	; 0x38
 8005dec:	4013      	ands	r3, r2
 8005dee:	2b10      	cmp	r3, #16
 8005df0:	d138      	bne.n	8005e64 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005df2:	4b2a      	ldr	r3, [pc, #168]	; (8005e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	2203      	movs	r2, #3
 8005df8:	4013      	ands	r3, r2
 8005dfa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dfc:	4b27      	ldr	r3, [pc, #156]	; (8005e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	2207      	movs	r2, #7
 8005e04:	4013      	ands	r3, r2
 8005e06:	3301      	adds	r3, #1
 8005e08:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d10d      	bne.n	8005e2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	4824      	ldr	r0, [pc, #144]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x100>)
 8005e14:	f7fa f992 	bl	800013c <__udivsi3>
 8005e18:	0003      	movs	r3, r0
 8005e1a:	0019      	movs	r1, r3
 8005e1c:	4b1f      	ldr	r3, [pc, #124]	; (8005e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	0a1b      	lsrs	r3, r3, #8
 8005e22:	227f      	movs	r2, #127	; 0x7f
 8005e24:	4013      	ands	r3, r2
 8005e26:	434b      	muls	r3, r1
 8005e28:	617b      	str	r3, [r7, #20]
        break;
 8005e2a:	e00d      	b.n	8005e48 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	481c      	ldr	r0, [pc, #112]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005e30:	f7fa f984 	bl	800013c <__udivsi3>
 8005e34:	0003      	movs	r3, r0
 8005e36:	0019      	movs	r1, r3
 8005e38:	4b18      	ldr	r3, [pc, #96]	; (8005e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	0a1b      	lsrs	r3, r3, #8
 8005e3e:	227f      	movs	r2, #127	; 0x7f
 8005e40:	4013      	ands	r3, r2
 8005e42:	434b      	muls	r3, r1
 8005e44:	617b      	str	r3, [r7, #20]
        break;
 8005e46:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005e48:	4b14      	ldr	r3, [pc, #80]	; (8005e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	0f5b      	lsrs	r3, r3, #29
 8005e4e:	2207      	movs	r2, #7
 8005e50:	4013      	ands	r3, r2
 8005e52:	3301      	adds	r3, #1
 8005e54:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	6978      	ldr	r0, [r7, #20]
 8005e5a:	f7fa f96f 	bl	800013c <__udivsi3>
 8005e5e:	0003      	movs	r3, r0
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	e015      	b.n	8005e90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005e64:	4b0d      	ldr	r3, [pc, #52]	; (8005e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	2238      	movs	r2, #56	; 0x38
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	2b20      	cmp	r3, #32
 8005e6e:	d103      	bne.n	8005e78 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005e70:	2380      	movs	r3, #128	; 0x80
 8005e72:	021b      	lsls	r3, r3, #8
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	e00b      	b.n	8005e90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005e78:	4b08      	ldr	r3, [pc, #32]	; (8005e9c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	2238      	movs	r2, #56	; 0x38
 8005e7e:	4013      	ands	r3, r2
 8005e80:	2b18      	cmp	r3, #24
 8005e82:	d103      	bne.n	8005e8c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005e84:	23fa      	movs	r3, #250	; 0xfa
 8005e86:	01db      	lsls	r3, r3, #7
 8005e88:	613b      	str	r3, [r7, #16]
 8005e8a:	e001      	b.n	8005e90 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e90:	693b      	ldr	r3, [r7, #16]
}
 8005e92:	0018      	movs	r0, r3
 8005e94:	46bd      	mov	sp, r7
 8005e96:	b006      	add	sp, #24
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	46c0      	nop			; (mov r8, r8)
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	00f42400 	.word	0x00f42400
 8005ea4:	007a1200 	.word	0x007a1200

08005ea8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005eb0:	2313      	movs	r3, #19
 8005eb2:	18fb      	adds	r3, r7, r3
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005eb8:	2312      	movs	r3, #18
 8005eba:	18fb      	adds	r3, r7, r3
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	2380      	movs	r3, #128	; 0x80
 8005ec6:	029b      	lsls	r3, r3, #10
 8005ec8:	4013      	ands	r3, r2
 8005eca:	d100      	bne.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005ecc:	e0a3      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ece:	2011      	movs	r0, #17
 8005ed0:	183b      	adds	r3, r7, r0
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ed6:	4ba5      	ldr	r3, [pc, #660]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ed8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eda:	2380      	movs	r3, #128	; 0x80
 8005edc:	055b      	lsls	r3, r3, #21
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d110      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ee2:	4ba2      	ldr	r3, [pc, #648]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ee4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ee6:	4ba1      	ldr	r3, [pc, #644]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ee8:	2180      	movs	r1, #128	; 0x80
 8005eea:	0549      	lsls	r1, r1, #21
 8005eec:	430a      	orrs	r2, r1
 8005eee:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ef0:	4b9e      	ldr	r3, [pc, #632]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005ef2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ef4:	2380      	movs	r3, #128	; 0x80
 8005ef6:	055b      	lsls	r3, r3, #21
 8005ef8:	4013      	ands	r3, r2
 8005efa:	60bb      	str	r3, [r7, #8]
 8005efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005efe:	183b      	adds	r3, r7, r0
 8005f00:	2201      	movs	r2, #1
 8005f02:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f04:	4b9a      	ldr	r3, [pc, #616]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	4b99      	ldr	r3, [pc, #612]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005f0a:	2180      	movs	r1, #128	; 0x80
 8005f0c:	0049      	lsls	r1, r1, #1
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f12:	f7fd fa43 	bl	800339c <HAL_GetTick>
 8005f16:	0003      	movs	r3, r0
 8005f18:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f1a:	e00b      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f1c:	f7fd fa3e 	bl	800339c <HAL_GetTick>
 8005f20:	0002      	movs	r2, r0
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d904      	bls.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005f2a:	2313      	movs	r3, #19
 8005f2c:	18fb      	adds	r3, r7, r3
 8005f2e:	2203      	movs	r2, #3
 8005f30:	701a      	strb	r2, [r3, #0]
        break;
 8005f32:	e005      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f34:	4b8e      	ldr	r3, [pc, #568]	; (8006170 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	2380      	movs	r3, #128	; 0x80
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	d0ed      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005f40:	2313      	movs	r3, #19
 8005f42:	18fb      	adds	r3, r7, r3
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d154      	bne.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f4a:	4b88      	ldr	r3, [pc, #544]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f4e:	23c0      	movs	r3, #192	; 0xc0
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4013      	ands	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d019      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d014      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f66:	4b81      	ldr	r3, [pc, #516]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6a:	4a82      	ldr	r2, [pc, #520]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f70:	4b7e      	ldr	r3, [pc, #504]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f74:	4b7d      	ldr	r3, [pc, #500]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f76:	2180      	movs	r1, #128	; 0x80
 8005f78:	0249      	lsls	r1, r1, #9
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f7e:	4b7b      	ldr	r3, [pc, #492]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f82:	4b7a      	ldr	r3, [pc, #488]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f84:	497c      	ldr	r1, [pc, #496]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005f86:	400a      	ands	r2, r1
 8005f88:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f8a:	4b78      	ldr	r3, [pc, #480]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	2201      	movs	r2, #1
 8005f94:	4013      	ands	r3, r2
 8005f96:	d016      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f98:	f7fd fa00 	bl	800339c <HAL_GetTick>
 8005f9c:	0003      	movs	r3, r0
 8005f9e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fa0:	e00c      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fa2:	f7fd f9fb 	bl	800339c <HAL_GetTick>
 8005fa6:	0002      	movs	r2, r0
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	4a73      	ldr	r2, [pc, #460]	; (800617c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d904      	bls.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005fb2:	2313      	movs	r3, #19
 8005fb4:	18fb      	adds	r3, r7, r3
 8005fb6:	2203      	movs	r2, #3
 8005fb8:	701a      	strb	r2, [r3, #0]
            break;
 8005fba:	e004      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fbc:	4b6b      	ldr	r3, [pc, #428]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	d0ed      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005fc6:	2313      	movs	r3, #19
 8005fc8:	18fb      	adds	r3, r7, r3
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10a      	bne.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fd0:	4b66      	ldr	r3, [pc, #408]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fd4:	4a67      	ldr	r2, [pc, #412]	; (8006174 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	0019      	movs	r1, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fde:	4b63      	ldr	r3, [pc, #396]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	65da      	str	r2, [r3, #92]	; 0x5c
 8005fe4:	e00c      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fe6:	2312      	movs	r3, #18
 8005fe8:	18fb      	adds	r3, r7, r3
 8005fea:	2213      	movs	r2, #19
 8005fec:	18ba      	adds	r2, r7, r2
 8005fee:	7812      	ldrb	r2, [r2, #0]
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	e005      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff4:	2312      	movs	r3, #18
 8005ff6:	18fb      	adds	r3, r7, r3
 8005ff8:	2213      	movs	r2, #19
 8005ffa:	18ba      	adds	r2, r7, r2
 8005ffc:	7812      	ldrb	r2, [r2, #0]
 8005ffe:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006000:	2311      	movs	r3, #17
 8006002:	18fb      	adds	r3, r7, r3
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d105      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800600a:	4b58      	ldr	r3, [pc, #352]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800600c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800600e:	4b57      	ldr	r3, [pc, #348]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006010:	495b      	ldr	r1, [pc, #364]	; (8006180 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8006012:	400a      	ands	r2, r1
 8006014:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2201      	movs	r2, #1
 800601c:	4013      	ands	r3, r2
 800601e:	d009      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006020:	4b52      	ldr	r3, [pc, #328]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006024:	2203      	movs	r2, #3
 8006026:	4393      	bics	r3, r2
 8006028:	0019      	movs	r1, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685a      	ldr	r2, [r3, #4]
 800602e:	4b4f      	ldr	r3, [pc, #316]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006030:	430a      	orrs	r2, r1
 8006032:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2210      	movs	r2, #16
 800603a:	4013      	ands	r3, r2
 800603c:	d009      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800603e:	4b4b      	ldr	r3, [pc, #300]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006042:	4a50      	ldr	r2, [pc, #320]	; (8006184 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8006044:	4013      	ands	r3, r2
 8006046:	0019      	movs	r1, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	4b47      	ldr	r3, [pc, #284]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800604e:	430a      	orrs	r2, r1
 8006050:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	2380      	movs	r3, #128	; 0x80
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4013      	ands	r3, r2
 800605c:	d009      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800605e:	4b43      	ldr	r3, [pc, #268]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006062:	4a49      	ldr	r2, [pc, #292]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8006064:	4013      	ands	r3, r2
 8006066:	0019      	movs	r1, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	695a      	ldr	r2, [r3, #20]
 800606c:	4b3f      	ldr	r3, [pc, #252]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800606e:	430a      	orrs	r2, r1
 8006070:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	2380      	movs	r3, #128	; 0x80
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	4013      	ands	r3, r2
 800607c:	d009      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800607e:	4b3b      	ldr	r3, [pc, #236]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006082:	4a42      	ldr	r2, [pc, #264]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8006084:	4013      	ands	r3, r2
 8006086:	0019      	movs	r1, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	699a      	ldr	r2, [r3, #24]
 800608c:	4b37      	ldr	r3, [pc, #220]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800608e:	430a      	orrs	r2, r1
 8006090:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2220      	movs	r2, #32
 8006098:	4013      	ands	r3, r2
 800609a:	d009      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800609c:	4b33      	ldr	r3, [pc, #204]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800609e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a0:	4a3b      	ldr	r2, [pc, #236]	; (8006190 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80060a2:	4013      	ands	r3, r2
 80060a4:	0019      	movs	r1, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	4b30      	ldr	r3, [pc, #192]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060ac:	430a      	orrs	r2, r1
 80060ae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	2380      	movs	r3, #128	; 0x80
 80060b6:	01db      	lsls	r3, r3, #7
 80060b8:	4013      	ands	r3, r2
 80060ba:	d015      	beq.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060bc:	4b2b      	ldr	r3, [pc, #172]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	0899      	lsrs	r1, r3, #2
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	69da      	ldr	r2, [r3, #28]
 80060c8:	4b28      	ldr	r3, [pc, #160]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060ca:	430a      	orrs	r2, r1
 80060cc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	69da      	ldr	r2, [r3, #28]
 80060d2:	2380      	movs	r3, #128	; 0x80
 80060d4:	05db      	lsls	r3, r3, #23
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d106      	bne.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80060da:	4b24      	ldr	r3, [pc, #144]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	4b23      	ldr	r3, [pc, #140]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060e0:	2180      	movs	r1, #128	; 0x80
 80060e2:	0249      	lsls	r1, r1, #9
 80060e4:	430a      	orrs	r2, r1
 80060e6:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	2380      	movs	r3, #128	; 0x80
 80060ee:	039b      	lsls	r3, r3, #14
 80060f0:	4013      	ands	r3, r2
 80060f2:	d016      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80060f4:	4b1d      	ldr	r3, [pc, #116]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80060f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f8:	4a26      	ldr	r2, [pc, #152]	; (8006194 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80060fa:	4013      	ands	r3, r2
 80060fc:	0019      	movs	r1, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6a1a      	ldr	r2, [r3, #32]
 8006102:	4b1a      	ldr	r3, [pc, #104]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006104:	430a      	orrs	r2, r1
 8006106:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a1a      	ldr	r2, [r3, #32]
 800610c:	2380      	movs	r3, #128	; 0x80
 800610e:	03db      	lsls	r3, r3, #15
 8006110:	429a      	cmp	r2, r3
 8006112:	d106      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006114:	4b15      	ldr	r3, [pc, #84]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006116:	68da      	ldr	r2, [r3, #12]
 8006118:	4b14      	ldr	r3, [pc, #80]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800611a:	2180      	movs	r1, #128	; 0x80
 800611c:	0449      	lsls	r1, r1, #17
 800611e:	430a      	orrs	r2, r1
 8006120:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	2380      	movs	r3, #128	; 0x80
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	4013      	ands	r3, r2
 800612c:	d016      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800612e:	4b0f      	ldr	r3, [pc, #60]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006132:	4a19      	ldr	r2, [pc, #100]	; (8006198 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8006134:	4013      	ands	r3, r2
 8006136:	0019      	movs	r1, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	4b0b      	ldr	r3, [pc, #44]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800613e:	430a      	orrs	r2, r1
 8006140:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691a      	ldr	r2, [r3, #16]
 8006146:	2380      	movs	r3, #128	; 0x80
 8006148:	01db      	lsls	r3, r3, #7
 800614a:	429a      	cmp	r2, r3
 800614c:	d106      	bne.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800614e:	4b07      	ldr	r3, [pc, #28]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	4b06      	ldr	r3, [pc, #24]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8006154:	2180      	movs	r1, #128	; 0x80
 8006156:	0249      	lsls	r1, r1, #9
 8006158:	430a      	orrs	r2, r1
 800615a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800615c:	2312      	movs	r3, #18
 800615e:	18fb      	adds	r3, r7, r3
 8006160:	781b      	ldrb	r3, [r3, #0]
}
 8006162:	0018      	movs	r0, r3
 8006164:	46bd      	mov	sp, r7
 8006166:	b006      	add	sp, #24
 8006168:	bd80      	pop	{r7, pc}
 800616a:	46c0      	nop			; (mov r8, r8)
 800616c:	40021000 	.word	0x40021000
 8006170:	40007000 	.word	0x40007000
 8006174:	fffffcff 	.word	0xfffffcff
 8006178:	fffeffff 	.word	0xfffeffff
 800617c:	00001388 	.word	0x00001388
 8006180:	efffffff 	.word	0xefffffff
 8006184:	fffff3ff 	.word	0xfffff3ff
 8006188:	fff3ffff 	.word	0xfff3ffff
 800618c:	ffcfffff 	.word	0xffcfffff
 8006190:	ffffcfff 	.word	0xffffcfff
 8006194:	ffbfffff 	.word	0xffbfffff
 8006198:	ffff3fff 	.word	0xffff3fff

0800619c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e04a      	b.n	8006244 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	223d      	movs	r2, #61	; 0x3d
 80061b2:	5c9b      	ldrb	r3, [r3, r2]
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d107      	bne.n	80061ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	223c      	movs	r2, #60	; 0x3c
 80061be:	2100      	movs	r1, #0
 80061c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	0018      	movs	r0, r3
 80061c6:	f7fc fed3 	bl	8002f70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	223d      	movs	r2, #61	; 0x3d
 80061ce:	2102      	movs	r1, #2
 80061d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	3304      	adds	r3, #4
 80061da:	0019      	movs	r1, r3
 80061dc:	0010      	movs	r0, r2
 80061de:	f000 f9e3 	bl	80065a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2248      	movs	r2, #72	; 0x48
 80061e6:	2101      	movs	r1, #1
 80061e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	223e      	movs	r2, #62	; 0x3e
 80061ee:	2101      	movs	r1, #1
 80061f0:	5499      	strb	r1, [r3, r2]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	223f      	movs	r2, #63	; 0x3f
 80061f6:	2101      	movs	r1, #1
 80061f8:	5499      	strb	r1, [r3, r2]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2240      	movs	r2, #64	; 0x40
 80061fe:	2101      	movs	r1, #1
 8006200:	5499      	strb	r1, [r3, r2]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2241      	movs	r2, #65	; 0x41
 8006206:	2101      	movs	r1, #1
 8006208:	5499      	strb	r1, [r3, r2]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2242      	movs	r2, #66	; 0x42
 800620e:	2101      	movs	r1, #1
 8006210:	5499      	strb	r1, [r3, r2]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2243      	movs	r2, #67	; 0x43
 8006216:	2101      	movs	r1, #1
 8006218:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2244      	movs	r2, #68	; 0x44
 800621e:	2101      	movs	r1, #1
 8006220:	5499      	strb	r1, [r3, r2]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2245      	movs	r2, #69	; 0x45
 8006226:	2101      	movs	r1, #1
 8006228:	5499      	strb	r1, [r3, r2]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2246      	movs	r2, #70	; 0x46
 800622e:	2101      	movs	r1, #1
 8006230:	5499      	strb	r1, [r3, r2]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2247      	movs	r2, #71	; 0x47
 8006236:	2101      	movs	r1, #1
 8006238:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	223d      	movs	r2, #61	; 0x3d
 800623e:	2101      	movs	r1, #1
 8006240:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	0018      	movs	r0, r3
 8006246:	46bd      	mov	sp, r7
 8006248:	b002      	add	sp, #8
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	223d      	movs	r2, #61	; 0x3d
 8006258:	5c9b      	ldrb	r3, [r3, r2]
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b01      	cmp	r3, #1
 800625e:	d001      	beq.n	8006264 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e03d      	b.n	80062e0 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	223d      	movs	r2, #61	; 0x3d
 8006268:	2102      	movs	r1, #2
 800626a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68da      	ldr	r2, [r3, #12]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2101      	movs	r1, #1
 8006278:	430a      	orrs	r2, r1
 800627a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a19      	ldr	r2, [pc, #100]	; (80062e8 <HAL_TIM_Base_Start_IT+0x9c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00a      	beq.n	800629c <HAL_TIM_Base_Start_IT+0x50>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	2380      	movs	r3, #128	; 0x80
 800628c:	05db      	lsls	r3, r3, #23
 800628e:	429a      	cmp	r2, r3
 8006290:	d004      	beq.n	800629c <HAL_TIM_Base_Start_IT+0x50>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a15      	ldr	r2, [pc, #84]	; (80062ec <HAL_TIM_Base_Start_IT+0xa0>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d116      	bne.n	80062ca <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	4a13      	ldr	r2, [pc, #76]	; (80062f0 <HAL_TIM_Base_Start_IT+0xa4>)
 80062a4:	4013      	ands	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b06      	cmp	r3, #6
 80062ac:	d016      	beq.n	80062dc <HAL_TIM_Base_Start_IT+0x90>
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	2380      	movs	r3, #128	; 0x80
 80062b2:	025b      	lsls	r3, r3, #9
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d011      	beq.n	80062dc <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2101      	movs	r1, #1
 80062c4:	430a      	orrs	r2, r1
 80062c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c8:	e008      	b.n	80062dc <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2101      	movs	r1, #1
 80062d6:	430a      	orrs	r2, r1
 80062d8:	601a      	str	r2, [r3, #0]
 80062da:	e000      	b.n	80062de <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062dc:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	0018      	movs	r0, r3
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b004      	add	sp, #16
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	40012c00 	.word	0x40012c00
 80062ec:	40000400 	.word	0x40000400
 80062f0:	00010007 	.word	0x00010007

080062f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	2202      	movs	r2, #2
 8006304:	4013      	ands	r3, r2
 8006306:	2b02      	cmp	r3, #2
 8006308:	d124      	bne.n	8006354 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	2202      	movs	r2, #2
 8006312:	4013      	ands	r3, r2
 8006314:	2b02      	cmp	r3, #2
 8006316:	d11d      	bne.n	8006354 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2203      	movs	r2, #3
 800631e:	4252      	negs	r2, r2
 8006320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	2203      	movs	r2, #3
 8006330:	4013      	ands	r3, r2
 8006332:	d004      	beq.n	800633e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	0018      	movs	r0, r3
 8006338:	f000 f91e 	bl	8006578 <HAL_TIM_IC_CaptureCallback>
 800633c:	e007      	b.n	800634e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	0018      	movs	r0, r3
 8006342:	f000 f911 	bl	8006568 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	0018      	movs	r0, r3
 800634a:	f000 f91d 	bl	8006588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2204      	movs	r2, #4
 800635c:	4013      	ands	r3, r2
 800635e:	2b04      	cmp	r3, #4
 8006360:	d125      	bne.n	80063ae <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	2204      	movs	r2, #4
 800636a:	4013      	ands	r3, r2
 800636c:	2b04      	cmp	r3, #4
 800636e:	d11e      	bne.n	80063ae <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2205      	movs	r2, #5
 8006376:	4252      	negs	r2, r2
 8006378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2202      	movs	r2, #2
 800637e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699a      	ldr	r2, [r3, #24]
 8006386:	23c0      	movs	r3, #192	; 0xc0
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4013      	ands	r3, r2
 800638c:	d004      	beq.n	8006398 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	0018      	movs	r0, r3
 8006392:	f000 f8f1 	bl	8006578 <HAL_TIM_IC_CaptureCallback>
 8006396:	e007      	b.n	80063a8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	0018      	movs	r0, r3
 800639c:	f000 f8e4 	bl	8006568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	0018      	movs	r0, r3
 80063a4:	f000 f8f0 	bl	8006588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	2208      	movs	r2, #8
 80063b6:	4013      	ands	r3, r2
 80063b8:	2b08      	cmp	r3, #8
 80063ba:	d124      	bne.n	8006406 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	2208      	movs	r2, #8
 80063c4:	4013      	ands	r3, r2
 80063c6:	2b08      	cmp	r3, #8
 80063c8:	d11d      	bne.n	8006406 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2209      	movs	r2, #9
 80063d0:	4252      	negs	r2, r2
 80063d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2204      	movs	r2, #4
 80063d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	69db      	ldr	r3, [r3, #28]
 80063e0:	2203      	movs	r2, #3
 80063e2:	4013      	ands	r3, r2
 80063e4:	d004      	beq.n	80063f0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f000 f8c5 	bl	8006578 <HAL_TIM_IC_CaptureCallback>
 80063ee:	e007      	b.n	8006400 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	0018      	movs	r0, r3
 80063f4:	f000 f8b8 	bl	8006568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	0018      	movs	r0, r3
 80063fc:	f000 f8c4 	bl	8006588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2210      	movs	r2, #16
 800640e:	4013      	ands	r3, r2
 8006410:	2b10      	cmp	r3, #16
 8006412:	d125      	bne.n	8006460 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	2210      	movs	r2, #16
 800641c:	4013      	ands	r3, r2
 800641e:	2b10      	cmp	r3, #16
 8006420:	d11e      	bne.n	8006460 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2211      	movs	r2, #17
 8006428:	4252      	negs	r2, r2
 800642a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2208      	movs	r2, #8
 8006430:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	69da      	ldr	r2, [r3, #28]
 8006438:	23c0      	movs	r3, #192	; 0xc0
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4013      	ands	r3, r2
 800643e:	d004      	beq.n	800644a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	0018      	movs	r0, r3
 8006444:	f000 f898 	bl	8006578 <HAL_TIM_IC_CaptureCallback>
 8006448:	e007      	b.n	800645a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	0018      	movs	r0, r3
 800644e:	f000 f88b 	bl	8006568 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	0018      	movs	r0, r3
 8006456:	f000 f897 	bl	8006588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	2201      	movs	r2, #1
 8006468:	4013      	ands	r3, r2
 800646a:	2b01      	cmp	r3, #1
 800646c:	d10f      	bne.n	800648e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	2201      	movs	r2, #1
 8006476:	4013      	ands	r3, r2
 8006478:	2b01      	cmp	r3, #1
 800647a:	d108      	bne.n	800648e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2202      	movs	r2, #2
 8006482:	4252      	negs	r2, r2
 8006484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	0018      	movs	r0, r3
 800648a:	f000 f865 	bl	8006558 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2280      	movs	r2, #128	; 0x80
 8006496:	4013      	ands	r3, r2
 8006498:	2b80      	cmp	r3, #128	; 0x80
 800649a:	d10f      	bne.n	80064bc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	2280      	movs	r2, #128	; 0x80
 80064a4:	4013      	ands	r3, r2
 80064a6:	2b80      	cmp	r3, #128	; 0x80
 80064a8:	d108      	bne.n	80064bc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2281      	movs	r2, #129	; 0x81
 80064b0:	4252      	negs	r2, r2
 80064b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	0018      	movs	r0, r3
 80064b8:	f000 f8f4 	bl	80066a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691a      	ldr	r2, [r3, #16]
 80064c2:	2380      	movs	r3, #128	; 0x80
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	401a      	ands	r2, r3
 80064c8:	2380      	movs	r3, #128	; 0x80
 80064ca:	005b      	lsls	r3, r3, #1
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d10e      	bne.n	80064ee <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	2280      	movs	r2, #128	; 0x80
 80064d8:	4013      	ands	r3, r2
 80064da:	2b80      	cmp	r3, #128	; 0x80
 80064dc:	d107      	bne.n	80064ee <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a1c      	ldr	r2, [pc, #112]	; (8006554 <HAL_TIM_IRQHandler+0x260>)
 80064e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	0018      	movs	r0, r3
 80064ea:	f000 f8e3 	bl	80066b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	2240      	movs	r2, #64	; 0x40
 80064f6:	4013      	ands	r3, r2
 80064f8:	2b40      	cmp	r3, #64	; 0x40
 80064fa:	d10f      	bne.n	800651c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	2240      	movs	r2, #64	; 0x40
 8006504:	4013      	ands	r3, r2
 8006506:	2b40      	cmp	r3, #64	; 0x40
 8006508:	d108      	bne.n	800651c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2241      	movs	r2, #65	; 0x41
 8006510:	4252      	negs	r2, r2
 8006512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	0018      	movs	r0, r3
 8006518:	f000 f83e 	bl	8006598 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	2220      	movs	r2, #32
 8006524:	4013      	ands	r3, r2
 8006526:	2b20      	cmp	r3, #32
 8006528:	d10f      	bne.n	800654a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	2220      	movs	r2, #32
 8006532:	4013      	ands	r3, r2
 8006534:	2b20      	cmp	r3, #32
 8006536:	d108      	bne.n	800654a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2221      	movs	r2, #33	; 0x21
 800653e:	4252      	negs	r2, r2
 8006540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	0018      	movs	r0, r3
 8006546:	f000 f8a5 	bl	8006694 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800654a:	46c0      	nop			; (mov r8, r8)
 800654c:	46bd      	mov	sp, r7
 800654e:	b002      	add	sp, #8
 8006550:	bd80      	pop	{r7, pc}
 8006552:	46c0      	nop			; (mov r8, r8)
 8006554:	fffffeff 	.word	0xfffffeff

08006558 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006560:	46c0      	nop			; (mov r8, r8)
 8006562:	46bd      	mov	sp, r7
 8006564:	b002      	add	sp, #8
 8006566:	bd80      	pop	{r7, pc}

08006568 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006570:	46c0      	nop			; (mov r8, r8)
 8006572:	46bd      	mov	sp, r7
 8006574:	b002      	add	sp, #8
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006580:	46c0      	nop			; (mov r8, r8)
 8006582:	46bd      	mov	sp, r7
 8006584:	b002      	add	sp, #8
 8006586:	bd80      	pop	{r7, pc}

08006588 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006590:	46c0      	nop			; (mov r8, r8)
 8006592:	46bd      	mov	sp, r7
 8006594:	b002      	add	sp, #8
 8006596:	bd80      	pop	{r7, pc}

08006598 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065a0:	46c0      	nop			; (mov r8, r8)
 80065a2:	46bd      	mov	sp, r7
 80065a4:	b002      	add	sp, #8
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a30      	ldr	r2, [pc, #192]	; (800667c <TIM_Base_SetConfig+0xd4>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d008      	beq.n	80065d2 <TIM_Base_SetConfig+0x2a>
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	2380      	movs	r3, #128	; 0x80
 80065c4:	05db      	lsls	r3, r3, #23
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d003      	beq.n	80065d2 <TIM_Base_SetConfig+0x2a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a2c      	ldr	r2, [pc, #176]	; (8006680 <TIM_Base_SetConfig+0xd8>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d108      	bne.n	80065e4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2270      	movs	r2, #112	; 0x70
 80065d6:	4393      	bics	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	68fa      	ldr	r2, [r7, #12]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a25      	ldr	r2, [pc, #148]	; (800667c <TIM_Base_SetConfig+0xd4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d014      	beq.n	8006616 <TIM_Base_SetConfig+0x6e>
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	2380      	movs	r3, #128	; 0x80
 80065f0:	05db      	lsls	r3, r3, #23
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d00f      	beq.n	8006616 <TIM_Base_SetConfig+0x6e>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a21      	ldr	r2, [pc, #132]	; (8006680 <TIM_Base_SetConfig+0xd8>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00b      	beq.n	8006616 <TIM_Base_SetConfig+0x6e>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a20      	ldr	r2, [pc, #128]	; (8006684 <TIM_Base_SetConfig+0xdc>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d007      	beq.n	8006616 <TIM_Base_SetConfig+0x6e>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a1f      	ldr	r2, [pc, #124]	; (8006688 <TIM_Base_SetConfig+0xe0>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d003      	beq.n	8006616 <TIM_Base_SetConfig+0x6e>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a1e      	ldr	r2, [pc, #120]	; (800668c <TIM_Base_SetConfig+0xe4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d108      	bne.n	8006628 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	4a1d      	ldr	r2, [pc, #116]	; (8006690 <TIM_Base_SetConfig+0xe8>)
 800661a:	4013      	ands	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2280      	movs	r2, #128	; 0x80
 800662c:	4393      	bics	r3, r2
 800662e:	001a      	movs	r2, r3
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	4313      	orrs	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a0a      	ldr	r2, [pc, #40]	; (800667c <TIM_Base_SetConfig+0xd4>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d007      	beq.n	8006666 <TIM_Base_SetConfig+0xbe>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a0b      	ldr	r2, [pc, #44]	; (8006688 <TIM_Base_SetConfig+0xe0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d003      	beq.n	8006666 <TIM_Base_SetConfig+0xbe>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a0a      	ldr	r2, [pc, #40]	; (800668c <TIM_Base_SetConfig+0xe4>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d103      	bne.n	800666e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	691a      	ldr	r2, [r3, #16]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	615a      	str	r2, [r3, #20]
}
 8006674:	46c0      	nop			; (mov r8, r8)
 8006676:	46bd      	mov	sp, r7
 8006678:	b004      	add	sp, #16
 800667a:	bd80      	pop	{r7, pc}
 800667c:	40012c00 	.word	0x40012c00
 8006680:	40000400 	.word	0x40000400
 8006684:	40002000 	.word	0x40002000
 8006688:	40014400 	.word	0x40014400
 800668c:	40014800 	.word	0x40014800
 8006690:	fffffcff 	.word	0xfffffcff

08006694 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800669c:	46c0      	nop			; (mov r8, r8)
 800669e:	46bd      	mov	sp, r7
 80066a0:	b002      	add	sp, #8
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066ac:	46c0      	nop			; (mov r8, r8)
 80066ae:	46bd      	mov	sp, r7
 80066b0:	b002      	add	sp, #8
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80066bc:	46c0      	nop			; (mov r8, r8)
 80066be:	46bd      	mov	sp, r7
 80066c0:	b002      	add	sp, #8
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <__errno>:
 80066c4:	4b01      	ldr	r3, [pc, #4]	; (80066cc <__errno+0x8>)
 80066c6:	6818      	ldr	r0, [r3, #0]
 80066c8:	4770      	bx	lr
 80066ca:	46c0      	nop			; (mov r8, r8)
 80066cc:	20000014 	.word	0x20000014

080066d0 <__libc_init_array>:
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	2600      	movs	r6, #0
 80066d4:	4d0c      	ldr	r5, [pc, #48]	; (8006708 <__libc_init_array+0x38>)
 80066d6:	4c0d      	ldr	r4, [pc, #52]	; (800670c <__libc_init_array+0x3c>)
 80066d8:	1b64      	subs	r4, r4, r5
 80066da:	10a4      	asrs	r4, r4, #2
 80066dc:	42a6      	cmp	r6, r4
 80066de:	d109      	bne.n	80066f4 <__libc_init_array+0x24>
 80066e0:	2600      	movs	r6, #0
 80066e2:	f002 ff6f 	bl	80095c4 <_init>
 80066e6:	4d0a      	ldr	r5, [pc, #40]	; (8006710 <__libc_init_array+0x40>)
 80066e8:	4c0a      	ldr	r4, [pc, #40]	; (8006714 <__libc_init_array+0x44>)
 80066ea:	1b64      	subs	r4, r4, r5
 80066ec:	10a4      	asrs	r4, r4, #2
 80066ee:	42a6      	cmp	r6, r4
 80066f0:	d105      	bne.n	80066fe <__libc_init_array+0x2e>
 80066f2:	bd70      	pop	{r4, r5, r6, pc}
 80066f4:	00b3      	lsls	r3, r6, #2
 80066f6:	58eb      	ldr	r3, [r5, r3]
 80066f8:	4798      	blx	r3
 80066fa:	3601      	adds	r6, #1
 80066fc:	e7ee      	b.n	80066dc <__libc_init_array+0xc>
 80066fe:	00b3      	lsls	r3, r6, #2
 8006700:	58eb      	ldr	r3, [r5, r3]
 8006702:	4798      	blx	r3
 8006704:	3601      	adds	r6, #1
 8006706:	e7f2      	b.n	80066ee <__libc_init_array+0x1e>
 8006708:	0800a13c 	.word	0x0800a13c
 800670c:	0800a13c 	.word	0x0800a13c
 8006710:	0800a13c 	.word	0x0800a13c
 8006714:	0800a140 	.word	0x0800a140

08006718 <memcpy>:
 8006718:	2300      	movs	r3, #0
 800671a:	b510      	push	{r4, lr}
 800671c:	429a      	cmp	r2, r3
 800671e:	d100      	bne.n	8006722 <memcpy+0xa>
 8006720:	bd10      	pop	{r4, pc}
 8006722:	5ccc      	ldrb	r4, [r1, r3]
 8006724:	54c4      	strb	r4, [r0, r3]
 8006726:	3301      	adds	r3, #1
 8006728:	e7f8      	b.n	800671c <memcpy+0x4>

0800672a <memset>:
 800672a:	0003      	movs	r3, r0
 800672c:	1882      	adds	r2, r0, r2
 800672e:	4293      	cmp	r3, r2
 8006730:	d100      	bne.n	8006734 <memset+0xa>
 8006732:	4770      	bx	lr
 8006734:	7019      	strb	r1, [r3, #0]
 8006736:	3301      	adds	r3, #1
 8006738:	e7f9      	b.n	800672e <memset+0x4>

0800673a <__cvt>:
 800673a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800673c:	001e      	movs	r6, r3
 800673e:	2300      	movs	r3, #0
 8006740:	0014      	movs	r4, r2
 8006742:	b08b      	sub	sp, #44	; 0x2c
 8006744:	429e      	cmp	r6, r3
 8006746:	da04      	bge.n	8006752 <__cvt+0x18>
 8006748:	2180      	movs	r1, #128	; 0x80
 800674a:	0609      	lsls	r1, r1, #24
 800674c:	1873      	adds	r3, r6, r1
 800674e:	001e      	movs	r6, r3
 8006750:	232d      	movs	r3, #45	; 0x2d
 8006752:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006754:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006756:	7013      	strb	r3, [r2, #0]
 8006758:	2320      	movs	r3, #32
 800675a:	2203      	movs	r2, #3
 800675c:	439f      	bics	r7, r3
 800675e:	2f46      	cmp	r7, #70	; 0x46
 8006760:	d007      	beq.n	8006772 <__cvt+0x38>
 8006762:	003b      	movs	r3, r7
 8006764:	3b45      	subs	r3, #69	; 0x45
 8006766:	4259      	negs	r1, r3
 8006768:	414b      	adcs	r3, r1
 800676a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800676c:	3a01      	subs	r2, #1
 800676e:	18cb      	adds	r3, r1, r3
 8006770:	9310      	str	r3, [sp, #64]	; 0x40
 8006772:	ab09      	add	r3, sp, #36	; 0x24
 8006774:	9304      	str	r3, [sp, #16]
 8006776:	ab08      	add	r3, sp, #32
 8006778:	9303      	str	r3, [sp, #12]
 800677a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800677c:	9200      	str	r2, [sp, #0]
 800677e:	9302      	str	r3, [sp, #8]
 8006780:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006782:	0022      	movs	r2, r4
 8006784:	9301      	str	r3, [sp, #4]
 8006786:	0033      	movs	r3, r6
 8006788:	f000 fcfe 	bl	8007188 <_dtoa_r>
 800678c:	0005      	movs	r5, r0
 800678e:	2f47      	cmp	r7, #71	; 0x47
 8006790:	d102      	bne.n	8006798 <__cvt+0x5e>
 8006792:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006794:	07db      	lsls	r3, r3, #31
 8006796:	d528      	bpl.n	80067ea <__cvt+0xb0>
 8006798:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800679a:	18eb      	adds	r3, r5, r3
 800679c:	9307      	str	r3, [sp, #28]
 800679e:	2f46      	cmp	r7, #70	; 0x46
 80067a0:	d114      	bne.n	80067cc <__cvt+0x92>
 80067a2:	782b      	ldrb	r3, [r5, #0]
 80067a4:	2b30      	cmp	r3, #48	; 0x30
 80067a6:	d10c      	bne.n	80067c2 <__cvt+0x88>
 80067a8:	2200      	movs	r2, #0
 80067aa:	2300      	movs	r3, #0
 80067ac:	0020      	movs	r0, r4
 80067ae:	0031      	movs	r1, r6
 80067b0:	f7f9 fe4a 	bl	8000448 <__aeabi_dcmpeq>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	d104      	bne.n	80067c2 <__cvt+0x88>
 80067b8:	2301      	movs	r3, #1
 80067ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067bc:	1a9b      	subs	r3, r3, r2
 80067be:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067c0:	6013      	str	r3, [r2, #0]
 80067c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067c4:	9a07      	ldr	r2, [sp, #28]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	18d3      	adds	r3, r2, r3
 80067ca:	9307      	str	r3, [sp, #28]
 80067cc:	2200      	movs	r2, #0
 80067ce:	2300      	movs	r3, #0
 80067d0:	0020      	movs	r0, r4
 80067d2:	0031      	movs	r1, r6
 80067d4:	f7f9 fe38 	bl	8000448 <__aeabi_dcmpeq>
 80067d8:	2800      	cmp	r0, #0
 80067da:	d001      	beq.n	80067e0 <__cvt+0xa6>
 80067dc:	9b07      	ldr	r3, [sp, #28]
 80067de:	9309      	str	r3, [sp, #36]	; 0x24
 80067e0:	2230      	movs	r2, #48	; 0x30
 80067e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e4:	9907      	ldr	r1, [sp, #28]
 80067e6:	428b      	cmp	r3, r1
 80067e8:	d306      	bcc.n	80067f8 <__cvt+0xbe>
 80067ea:	0028      	movs	r0, r5
 80067ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80067f0:	1b5b      	subs	r3, r3, r5
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	b00b      	add	sp, #44	; 0x2c
 80067f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067f8:	1c59      	adds	r1, r3, #1
 80067fa:	9109      	str	r1, [sp, #36]	; 0x24
 80067fc:	701a      	strb	r2, [r3, #0]
 80067fe:	e7f0      	b.n	80067e2 <__cvt+0xa8>

08006800 <__exponent>:
 8006800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006802:	1c83      	adds	r3, r0, #2
 8006804:	b087      	sub	sp, #28
 8006806:	9303      	str	r3, [sp, #12]
 8006808:	0005      	movs	r5, r0
 800680a:	000c      	movs	r4, r1
 800680c:	232b      	movs	r3, #43	; 0x2b
 800680e:	7002      	strb	r2, [r0, #0]
 8006810:	2900      	cmp	r1, #0
 8006812:	da01      	bge.n	8006818 <__exponent+0x18>
 8006814:	424c      	negs	r4, r1
 8006816:	3302      	adds	r3, #2
 8006818:	706b      	strb	r3, [r5, #1]
 800681a:	2c09      	cmp	r4, #9
 800681c:	dd31      	ble.n	8006882 <__exponent+0x82>
 800681e:	270a      	movs	r7, #10
 8006820:	ab04      	add	r3, sp, #16
 8006822:	1dde      	adds	r6, r3, #7
 8006824:	0020      	movs	r0, r4
 8006826:	0039      	movs	r1, r7
 8006828:	9601      	str	r6, [sp, #4]
 800682a:	f7f9 fdf7 	bl	800041c <__aeabi_idivmod>
 800682e:	3e01      	subs	r6, #1
 8006830:	3130      	adds	r1, #48	; 0x30
 8006832:	0020      	movs	r0, r4
 8006834:	7031      	strb	r1, [r6, #0]
 8006836:	0039      	movs	r1, r7
 8006838:	9402      	str	r4, [sp, #8]
 800683a:	f7f9 fd09 	bl	8000250 <__divsi3>
 800683e:	9b02      	ldr	r3, [sp, #8]
 8006840:	0004      	movs	r4, r0
 8006842:	2b63      	cmp	r3, #99	; 0x63
 8006844:	dcee      	bgt.n	8006824 <__exponent+0x24>
 8006846:	9b01      	ldr	r3, [sp, #4]
 8006848:	3430      	adds	r4, #48	; 0x30
 800684a:	1e9a      	subs	r2, r3, #2
 800684c:	0013      	movs	r3, r2
 800684e:	9903      	ldr	r1, [sp, #12]
 8006850:	7014      	strb	r4, [r2, #0]
 8006852:	a804      	add	r0, sp, #16
 8006854:	3007      	adds	r0, #7
 8006856:	4298      	cmp	r0, r3
 8006858:	d80e      	bhi.n	8006878 <__exponent+0x78>
 800685a:	ab04      	add	r3, sp, #16
 800685c:	3307      	adds	r3, #7
 800685e:	2000      	movs	r0, #0
 8006860:	429a      	cmp	r2, r3
 8006862:	d804      	bhi.n	800686e <__exponent+0x6e>
 8006864:	ab04      	add	r3, sp, #16
 8006866:	3009      	adds	r0, #9
 8006868:	18c0      	adds	r0, r0, r3
 800686a:	9b01      	ldr	r3, [sp, #4]
 800686c:	1ac0      	subs	r0, r0, r3
 800686e:	9b03      	ldr	r3, [sp, #12]
 8006870:	1818      	adds	r0, r3, r0
 8006872:	1b40      	subs	r0, r0, r5
 8006874:	b007      	add	sp, #28
 8006876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006878:	7818      	ldrb	r0, [r3, #0]
 800687a:	3301      	adds	r3, #1
 800687c:	7008      	strb	r0, [r1, #0]
 800687e:	3101      	adds	r1, #1
 8006880:	e7e7      	b.n	8006852 <__exponent+0x52>
 8006882:	2330      	movs	r3, #48	; 0x30
 8006884:	18e4      	adds	r4, r4, r3
 8006886:	70ab      	strb	r3, [r5, #2]
 8006888:	1d28      	adds	r0, r5, #4
 800688a:	70ec      	strb	r4, [r5, #3]
 800688c:	e7f1      	b.n	8006872 <__exponent+0x72>
	...

08006890 <_printf_float>:
 8006890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006892:	b095      	sub	sp, #84	; 0x54
 8006894:	000c      	movs	r4, r1
 8006896:	9208      	str	r2, [sp, #32]
 8006898:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800689a:	9309      	str	r3, [sp, #36]	; 0x24
 800689c:	0007      	movs	r7, r0
 800689e:	f001 fa91 	bl	8007dc4 <_localeconv_r>
 80068a2:	6803      	ldr	r3, [r0, #0]
 80068a4:	0018      	movs	r0, r3
 80068a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80068a8:	f7f9 fc2c 	bl	8000104 <strlen>
 80068ac:	2300      	movs	r3, #0
 80068ae:	9312      	str	r3, [sp, #72]	; 0x48
 80068b0:	7e23      	ldrb	r3, [r4, #24]
 80068b2:	2207      	movs	r2, #7
 80068b4:	001e      	movs	r6, r3
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	900d      	str	r0, [sp, #52]	; 0x34
 80068ba:	930c      	str	r3, [sp, #48]	; 0x30
 80068bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80068be:	682b      	ldr	r3, [r5, #0]
 80068c0:	05c9      	lsls	r1, r1, #23
 80068c2:	d547      	bpl.n	8006954 <_printf_float+0xc4>
 80068c4:	189b      	adds	r3, r3, r2
 80068c6:	4393      	bics	r3, r2
 80068c8:	001a      	movs	r2, r3
 80068ca:	3208      	adds	r2, #8
 80068cc:	602a      	str	r2, [r5, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	64a2      	str	r2, [r4, #72]	; 0x48
 80068d4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80068d6:	2201      	movs	r2, #1
 80068d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80068da:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80068dc:	930a      	str	r3, [sp, #40]	; 0x28
 80068de:	006b      	lsls	r3, r5, #1
 80068e0:	085b      	lsrs	r3, r3, #1
 80068e2:	930e      	str	r3, [sp, #56]	; 0x38
 80068e4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80068e6:	4ba8      	ldr	r3, [pc, #672]	; (8006b88 <_printf_float+0x2f8>)
 80068e8:	990e      	ldr	r1, [sp, #56]	; 0x38
 80068ea:	4252      	negs	r2, r2
 80068ec:	f7fb fc90 	bl	8002210 <__aeabi_dcmpun>
 80068f0:	2800      	cmp	r0, #0
 80068f2:	d131      	bne.n	8006958 <_printf_float+0xc8>
 80068f4:	2201      	movs	r2, #1
 80068f6:	4ba4      	ldr	r3, [pc, #656]	; (8006b88 <_printf_float+0x2f8>)
 80068f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80068fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80068fc:	4252      	negs	r2, r2
 80068fe:	f7f9 fdb3 	bl	8000468 <__aeabi_dcmple>
 8006902:	2800      	cmp	r0, #0
 8006904:	d128      	bne.n	8006958 <_printf_float+0xc8>
 8006906:	2200      	movs	r2, #0
 8006908:	2300      	movs	r3, #0
 800690a:	0029      	movs	r1, r5
 800690c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800690e:	f7f9 fda1 	bl	8000454 <__aeabi_dcmplt>
 8006912:	2800      	cmp	r0, #0
 8006914:	d003      	beq.n	800691e <_printf_float+0x8e>
 8006916:	0023      	movs	r3, r4
 8006918:	222d      	movs	r2, #45	; 0x2d
 800691a:	3343      	adds	r3, #67	; 0x43
 800691c:	701a      	strb	r2, [r3, #0]
 800691e:	4d9b      	ldr	r5, [pc, #620]	; (8006b8c <_printf_float+0x2fc>)
 8006920:	2e47      	cmp	r6, #71	; 0x47
 8006922:	d900      	bls.n	8006926 <_printf_float+0x96>
 8006924:	4d9a      	ldr	r5, [pc, #616]	; (8006b90 <_printf_float+0x300>)
 8006926:	2303      	movs	r3, #3
 8006928:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800692a:	6123      	str	r3, [r4, #16]
 800692c:	3301      	adds	r3, #1
 800692e:	439a      	bics	r2, r3
 8006930:	2300      	movs	r3, #0
 8006932:	6022      	str	r2, [r4, #0]
 8006934:	930a      	str	r3, [sp, #40]	; 0x28
 8006936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006938:	0021      	movs	r1, r4
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	0038      	movs	r0, r7
 800693e:	9b08      	ldr	r3, [sp, #32]
 8006940:	aa13      	add	r2, sp, #76	; 0x4c
 8006942:	f000 f9f3 	bl	8006d2c <_printf_common>
 8006946:	1c43      	adds	r3, r0, #1
 8006948:	d000      	beq.n	800694c <_printf_float+0xbc>
 800694a:	e09e      	b.n	8006a8a <_printf_float+0x1fa>
 800694c:	2001      	movs	r0, #1
 800694e:	4240      	negs	r0, r0
 8006950:	b015      	add	sp, #84	; 0x54
 8006952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006954:	3307      	adds	r3, #7
 8006956:	e7b6      	b.n	80068c6 <_printf_float+0x36>
 8006958:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800695a:	002b      	movs	r3, r5
 800695c:	0010      	movs	r0, r2
 800695e:	0029      	movs	r1, r5
 8006960:	f7fb fc56 	bl	8002210 <__aeabi_dcmpun>
 8006964:	2800      	cmp	r0, #0
 8006966:	d00a      	beq.n	800697e <_printf_float+0xee>
 8006968:	2d00      	cmp	r5, #0
 800696a:	da03      	bge.n	8006974 <_printf_float+0xe4>
 800696c:	0023      	movs	r3, r4
 800696e:	222d      	movs	r2, #45	; 0x2d
 8006970:	3343      	adds	r3, #67	; 0x43
 8006972:	701a      	strb	r2, [r3, #0]
 8006974:	4d87      	ldr	r5, [pc, #540]	; (8006b94 <_printf_float+0x304>)
 8006976:	2e47      	cmp	r6, #71	; 0x47
 8006978:	d9d5      	bls.n	8006926 <_printf_float+0x96>
 800697a:	4d87      	ldr	r5, [pc, #540]	; (8006b98 <_printf_float+0x308>)
 800697c:	e7d3      	b.n	8006926 <_printf_float+0x96>
 800697e:	2220      	movs	r2, #32
 8006980:	0031      	movs	r1, r6
 8006982:	6863      	ldr	r3, [r4, #4]
 8006984:	4391      	bics	r1, r2
 8006986:	910e      	str	r1, [sp, #56]	; 0x38
 8006988:	1c5a      	adds	r2, r3, #1
 800698a:	d147      	bne.n	8006a1c <_printf_float+0x18c>
 800698c:	3307      	adds	r3, #7
 800698e:	6063      	str	r3, [r4, #4]
 8006990:	2380      	movs	r3, #128	; 0x80
 8006992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006994:	00db      	lsls	r3, r3, #3
 8006996:	4313      	orrs	r3, r2
 8006998:	2200      	movs	r2, #0
 800699a:	9206      	str	r2, [sp, #24]
 800699c:	aa12      	add	r2, sp, #72	; 0x48
 800699e:	9205      	str	r2, [sp, #20]
 80069a0:	aa11      	add	r2, sp, #68	; 0x44
 80069a2:	9203      	str	r2, [sp, #12]
 80069a4:	2223      	movs	r2, #35	; 0x23
 80069a6:	a908      	add	r1, sp, #32
 80069a8:	6023      	str	r3, [r4, #0]
 80069aa:	9301      	str	r3, [sp, #4]
 80069ac:	6863      	ldr	r3, [r4, #4]
 80069ae:	1852      	adds	r2, r2, r1
 80069b0:	9202      	str	r2, [sp, #8]
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	0038      	movs	r0, r7
 80069b6:	002b      	movs	r3, r5
 80069b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069ba:	9604      	str	r6, [sp, #16]
 80069bc:	f7ff febd 	bl	800673a <__cvt>
 80069c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069c2:	0005      	movs	r5, r0
 80069c4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80069c6:	2b47      	cmp	r3, #71	; 0x47
 80069c8:	d108      	bne.n	80069dc <_printf_float+0x14c>
 80069ca:	1ccb      	adds	r3, r1, #3
 80069cc:	db02      	blt.n	80069d4 <_printf_float+0x144>
 80069ce:	6863      	ldr	r3, [r4, #4]
 80069d0:	4299      	cmp	r1, r3
 80069d2:	dd46      	ble.n	8006a62 <_printf_float+0x1d2>
 80069d4:	0033      	movs	r3, r6
 80069d6:	3b02      	subs	r3, #2
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	001e      	movs	r6, r3
 80069dc:	2e65      	cmp	r6, #101	; 0x65
 80069de:	d824      	bhi.n	8006a2a <_printf_float+0x19a>
 80069e0:	0020      	movs	r0, r4
 80069e2:	0032      	movs	r2, r6
 80069e4:	3901      	subs	r1, #1
 80069e6:	3050      	adds	r0, #80	; 0x50
 80069e8:	9111      	str	r1, [sp, #68]	; 0x44
 80069ea:	f7ff ff09 	bl	8006800 <__exponent>
 80069ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069f0:	900a      	str	r0, [sp, #40]	; 0x28
 80069f2:	1813      	adds	r3, r2, r0
 80069f4:	6123      	str	r3, [r4, #16]
 80069f6:	2a01      	cmp	r2, #1
 80069f8:	dc02      	bgt.n	8006a00 <_printf_float+0x170>
 80069fa:	6822      	ldr	r2, [r4, #0]
 80069fc:	07d2      	lsls	r2, r2, #31
 80069fe:	d501      	bpl.n	8006a04 <_printf_float+0x174>
 8006a00:	3301      	adds	r3, #1
 8006a02:	6123      	str	r3, [r4, #16]
 8006a04:	2323      	movs	r3, #35	; 0x23
 8006a06:	aa08      	add	r2, sp, #32
 8006a08:	189b      	adds	r3, r3, r2
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d100      	bne.n	8006a12 <_printf_float+0x182>
 8006a10:	e791      	b.n	8006936 <_printf_float+0xa6>
 8006a12:	0023      	movs	r3, r4
 8006a14:	222d      	movs	r2, #45	; 0x2d
 8006a16:	3343      	adds	r3, #67	; 0x43
 8006a18:	701a      	strb	r2, [r3, #0]
 8006a1a:	e78c      	b.n	8006936 <_printf_float+0xa6>
 8006a1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a1e:	2a47      	cmp	r2, #71	; 0x47
 8006a20:	d1b6      	bne.n	8006990 <_printf_float+0x100>
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1b4      	bne.n	8006990 <_printf_float+0x100>
 8006a26:	3301      	adds	r3, #1
 8006a28:	e7b1      	b.n	800698e <_printf_float+0xfe>
 8006a2a:	2e66      	cmp	r6, #102	; 0x66
 8006a2c:	d11b      	bne.n	8006a66 <_printf_float+0x1d6>
 8006a2e:	6863      	ldr	r3, [r4, #4]
 8006a30:	2900      	cmp	r1, #0
 8006a32:	dd0d      	ble.n	8006a50 <_printf_float+0x1c0>
 8006a34:	6121      	str	r1, [r4, #16]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d102      	bne.n	8006a40 <_printf_float+0x1b0>
 8006a3a:	6822      	ldr	r2, [r4, #0]
 8006a3c:	07d2      	lsls	r2, r2, #31
 8006a3e:	d502      	bpl.n	8006a46 <_printf_float+0x1b6>
 8006a40:	3301      	adds	r3, #1
 8006a42:	1859      	adds	r1, r3, r1
 8006a44:	6121      	str	r1, [r4, #16]
 8006a46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a48:	65a3      	str	r3, [r4, #88]	; 0x58
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	930a      	str	r3, [sp, #40]	; 0x28
 8006a4e:	e7d9      	b.n	8006a04 <_printf_float+0x174>
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d103      	bne.n	8006a5c <_printf_float+0x1cc>
 8006a54:	2201      	movs	r2, #1
 8006a56:	6821      	ldr	r1, [r4, #0]
 8006a58:	4211      	tst	r1, r2
 8006a5a:	d000      	beq.n	8006a5e <_printf_float+0x1ce>
 8006a5c:	1c9a      	adds	r2, r3, #2
 8006a5e:	6122      	str	r2, [r4, #16]
 8006a60:	e7f1      	b.n	8006a46 <_printf_float+0x1b6>
 8006a62:	2367      	movs	r3, #103	; 0x67
 8006a64:	001e      	movs	r6, r3
 8006a66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	db06      	blt.n	8006a7c <_printf_float+0x1ec>
 8006a6e:	6822      	ldr	r2, [r4, #0]
 8006a70:	6123      	str	r3, [r4, #16]
 8006a72:	07d2      	lsls	r2, r2, #31
 8006a74:	d5e7      	bpl.n	8006a46 <_printf_float+0x1b6>
 8006a76:	3301      	adds	r3, #1
 8006a78:	6123      	str	r3, [r4, #16]
 8006a7a:	e7e4      	b.n	8006a46 <_printf_float+0x1b6>
 8006a7c:	2101      	movs	r1, #1
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	dc01      	bgt.n	8006a86 <_printf_float+0x1f6>
 8006a82:	1849      	adds	r1, r1, r1
 8006a84:	1ac9      	subs	r1, r1, r3
 8006a86:	1852      	adds	r2, r2, r1
 8006a88:	e7e9      	b.n	8006a5e <_printf_float+0x1ce>
 8006a8a:	6822      	ldr	r2, [r4, #0]
 8006a8c:	0553      	lsls	r3, r2, #21
 8006a8e:	d408      	bmi.n	8006aa2 <_printf_float+0x212>
 8006a90:	6923      	ldr	r3, [r4, #16]
 8006a92:	002a      	movs	r2, r5
 8006a94:	0038      	movs	r0, r7
 8006a96:	9908      	ldr	r1, [sp, #32]
 8006a98:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006a9a:	47a8      	blx	r5
 8006a9c:	1c43      	adds	r3, r0, #1
 8006a9e:	d129      	bne.n	8006af4 <_printf_float+0x264>
 8006aa0:	e754      	b.n	800694c <_printf_float+0xbc>
 8006aa2:	2e65      	cmp	r6, #101	; 0x65
 8006aa4:	d800      	bhi.n	8006aa8 <_printf_float+0x218>
 8006aa6:	e0ec      	b.n	8006c82 <_printf_float+0x3f2>
 8006aa8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006aaa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006aac:	2200      	movs	r2, #0
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f7f9 fcca 	bl	8000448 <__aeabi_dcmpeq>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	d034      	beq.n	8006b22 <_printf_float+0x292>
 8006ab8:	2301      	movs	r3, #1
 8006aba:	0038      	movs	r0, r7
 8006abc:	4a37      	ldr	r2, [pc, #220]	; (8006b9c <_printf_float+0x30c>)
 8006abe:	9908      	ldr	r1, [sp, #32]
 8006ac0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006ac2:	47a8      	blx	r5
 8006ac4:	1c43      	adds	r3, r0, #1
 8006ac6:	d100      	bne.n	8006aca <_printf_float+0x23a>
 8006ac8:	e740      	b.n	800694c <_printf_float+0xbc>
 8006aca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006acc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	db02      	blt.n	8006ad8 <_printf_float+0x248>
 8006ad2:	6823      	ldr	r3, [r4, #0]
 8006ad4:	07db      	lsls	r3, r3, #31
 8006ad6:	d50d      	bpl.n	8006af4 <_printf_float+0x264>
 8006ad8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006ada:	0038      	movs	r0, r7
 8006adc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ade:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ae0:	9908      	ldr	r1, [sp, #32]
 8006ae2:	47a8      	blx	r5
 8006ae4:	2500      	movs	r5, #0
 8006ae6:	1c43      	adds	r3, r0, #1
 8006ae8:	d100      	bne.n	8006aec <_printf_float+0x25c>
 8006aea:	e72f      	b.n	800694c <_printf_float+0xbc>
 8006aec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006aee:	3b01      	subs	r3, #1
 8006af0:	42ab      	cmp	r3, r5
 8006af2:	dc0a      	bgt.n	8006b0a <_printf_float+0x27a>
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	079b      	lsls	r3, r3, #30
 8006af8:	d500      	bpl.n	8006afc <_printf_float+0x26c>
 8006afa:	e114      	b.n	8006d26 <_printf_float+0x496>
 8006afc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006afe:	68e0      	ldr	r0, [r4, #12]
 8006b00:	4298      	cmp	r0, r3
 8006b02:	db00      	blt.n	8006b06 <_printf_float+0x276>
 8006b04:	e724      	b.n	8006950 <_printf_float+0xc0>
 8006b06:	0018      	movs	r0, r3
 8006b08:	e722      	b.n	8006950 <_printf_float+0xc0>
 8006b0a:	0022      	movs	r2, r4
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	0038      	movs	r0, r7
 8006b10:	9908      	ldr	r1, [sp, #32]
 8006b12:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006b14:	321a      	adds	r2, #26
 8006b16:	47b0      	blx	r6
 8006b18:	1c43      	adds	r3, r0, #1
 8006b1a:	d100      	bne.n	8006b1e <_printf_float+0x28e>
 8006b1c:	e716      	b.n	800694c <_printf_float+0xbc>
 8006b1e:	3501      	adds	r5, #1
 8006b20:	e7e4      	b.n	8006aec <_printf_float+0x25c>
 8006b22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	dc3b      	bgt.n	8006ba0 <_printf_float+0x310>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	0038      	movs	r0, r7
 8006b2c:	4a1b      	ldr	r2, [pc, #108]	; (8006b9c <_printf_float+0x30c>)
 8006b2e:	9908      	ldr	r1, [sp, #32]
 8006b30:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006b32:	47b0      	blx	r6
 8006b34:	1c43      	adds	r3, r0, #1
 8006b36:	d100      	bne.n	8006b3a <_printf_float+0x2aa>
 8006b38:	e708      	b.n	800694c <_printf_float+0xbc>
 8006b3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	d102      	bne.n	8006b48 <_printf_float+0x2b8>
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	07db      	lsls	r3, r3, #31
 8006b46:	d5d5      	bpl.n	8006af4 <_printf_float+0x264>
 8006b48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b4a:	0038      	movs	r0, r7
 8006b4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b4e:	9908      	ldr	r1, [sp, #32]
 8006b50:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006b52:	47b0      	blx	r6
 8006b54:	1c43      	adds	r3, r0, #1
 8006b56:	d100      	bne.n	8006b5a <_printf_float+0x2ca>
 8006b58:	e6f8      	b.n	800694c <_printf_float+0xbc>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	930a      	str	r3, [sp, #40]	; 0x28
 8006b5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b62:	425b      	negs	r3, r3
 8006b64:	4293      	cmp	r3, r2
 8006b66:	dc01      	bgt.n	8006b6c <_printf_float+0x2dc>
 8006b68:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b6a:	e792      	b.n	8006a92 <_printf_float+0x202>
 8006b6c:	0022      	movs	r2, r4
 8006b6e:	2301      	movs	r3, #1
 8006b70:	0038      	movs	r0, r7
 8006b72:	9908      	ldr	r1, [sp, #32]
 8006b74:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006b76:	321a      	adds	r2, #26
 8006b78:	47b0      	blx	r6
 8006b7a:	1c43      	adds	r3, r0, #1
 8006b7c:	d100      	bne.n	8006b80 <_printf_float+0x2f0>
 8006b7e:	e6e5      	b.n	800694c <_printf_float+0xbc>
 8006b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b82:	3301      	adds	r3, #1
 8006b84:	e7ea      	b.n	8006b5c <_printf_float+0x2cc>
 8006b86:	46c0      	nop			; (mov r8, r8)
 8006b88:	7fefffff 	.word	0x7fefffff
 8006b8c:	08009d5c 	.word	0x08009d5c
 8006b90:	08009d60 	.word	0x08009d60
 8006b94:	08009d64 	.word	0x08009d64
 8006b98:	08009d68 	.word	0x08009d68
 8006b9c:	08009d6c 	.word	0x08009d6c
 8006ba0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ba2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ba4:	920a      	str	r2, [sp, #40]	; 0x28
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	dd00      	ble.n	8006bac <_printf_float+0x31c>
 8006baa:	930a      	str	r3, [sp, #40]	; 0x28
 8006bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	dc3d      	bgt.n	8006c2e <_printf_float+0x39e>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	930e      	str	r3, [sp, #56]	; 0x38
 8006bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bb8:	43db      	mvns	r3, r3
 8006bba:	17db      	asrs	r3, r3, #31
 8006bbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bc2:	930c      	str	r3, [sp, #48]	; 0x30
 8006bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	dc36      	bgt.n	8006c40 <_printf_float+0x3b0>
 8006bd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	db40      	blt.n	8006c5c <_printf_float+0x3cc>
 8006bda:	6823      	ldr	r3, [r4, #0]
 8006bdc:	07db      	lsls	r3, r3, #31
 8006bde:	d43d      	bmi.n	8006c5c <_printf_float+0x3cc>
 8006be0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006be2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006be4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	1a52      	subs	r2, r2, r1
 8006bea:	920a      	str	r2, [sp, #40]	; 0x28
 8006bec:	429a      	cmp	r2, r3
 8006bee:	dd00      	ble.n	8006bf2 <_printf_float+0x362>
 8006bf0:	930a      	str	r3, [sp, #40]	; 0x28
 8006bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	dc3a      	bgt.n	8006c6e <_printf_float+0x3de>
 8006bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bfa:	2500      	movs	r5, #0
 8006bfc:	43db      	mvns	r3, r3
 8006bfe:	17db      	asrs	r3, r3, #31
 8006c00:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006c04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c08:	1a9b      	subs	r3, r3, r2
 8006c0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c0c:	400a      	ands	r2, r1
 8006c0e:	1a9b      	subs	r3, r3, r2
 8006c10:	42ab      	cmp	r3, r5
 8006c12:	dc00      	bgt.n	8006c16 <_printf_float+0x386>
 8006c14:	e76e      	b.n	8006af4 <_printf_float+0x264>
 8006c16:	0022      	movs	r2, r4
 8006c18:	2301      	movs	r3, #1
 8006c1a:	0038      	movs	r0, r7
 8006c1c:	9908      	ldr	r1, [sp, #32]
 8006c1e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006c20:	321a      	adds	r2, #26
 8006c22:	47b0      	blx	r6
 8006c24:	1c43      	adds	r3, r0, #1
 8006c26:	d100      	bne.n	8006c2a <_printf_float+0x39a>
 8006c28:	e690      	b.n	800694c <_printf_float+0xbc>
 8006c2a:	3501      	adds	r5, #1
 8006c2c:	e7e9      	b.n	8006c02 <_printf_float+0x372>
 8006c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c30:	002a      	movs	r2, r5
 8006c32:	0038      	movs	r0, r7
 8006c34:	9908      	ldr	r1, [sp, #32]
 8006c36:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006c38:	47b0      	blx	r6
 8006c3a:	1c43      	adds	r3, r0, #1
 8006c3c:	d1b9      	bne.n	8006bb2 <_printf_float+0x322>
 8006c3e:	e685      	b.n	800694c <_printf_float+0xbc>
 8006c40:	0022      	movs	r2, r4
 8006c42:	2301      	movs	r3, #1
 8006c44:	0038      	movs	r0, r7
 8006c46:	9908      	ldr	r1, [sp, #32]
 8006c48:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006c4a:	321a      	adds	r2, #26
 8006c4c:	47b0      	blx	r6
 8006c4e:	1c43      	adds	r3, r0, #1
 8006c50:	d100      	bne.n	8006c54 <_printf_float+0x3c4>
 8006c52:	e67b      	b.n	800694c <_printf_float+0xbc>
 8006c54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c56:	3301      	adds	r3, #1
 8006c58:	930e      	str	r3, [sp, #56]	; 0x38
 8006c5a:	e7b0      	b.n	8006bbe <_printf_float+0x32e>
 8006c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c5e:	0038      	movs	r0, r7
 8006c60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006c62:	9908      	ldr	r1, [sp, #32]
 8006c64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006c66:	47b0      	blx	r6
 8006c68:	1c43      	adds	r3, r0, #1
 8006c6a:	d1b9      	bne.n	8006be0 <_printf_float+0x350>
 8006c6c:	e66e      	b.n	800694c <_printf_float+0xbc>
 8006c6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c70:	0038      	movs	r0, r7
 8006c72:	18ea      	adds	r2, r5, r3
 8006c74:	9908      	ldr	r1, [sp, #32]
 8006c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c78:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006c7a:	47a8      	blx	r5
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d1bb      	bne.n	8006bf8 <_printf_float+0x368>
 8006c80:	e664      	b.n	800694c <_printf_float+0xbc>
 8006c82:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	dc02      	bgt.n	8006c8e <_printf_float+0x3fe>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	421a      	tst	r2, r3
 8006c8c:	d038      	beq.n	8006d00 <_printf_float+0x470>
 8006c8e:	2301      	movs	r3, #1
 8006c90:	002a      	movs	r2, r5
 8006c92:	0038      	movs	r0, r7
 8006c94:	9908      	ldr	r1, [sp, #32]
 8006c96:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006c98:	47b0      	blx	r6
 8006c9a:	1c43      	adds	r3, r0, #1
 8006c9c:	d100      	bne.n	8006ca0 <_printf_float+0x410>
 8006c9e:	e655      	b.n	800694c <_printf_float+0xbc>
 8006ca0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ca2:	0038      	movs	r0, r7
 8006ca4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ca6:	9908      	ldr	r1, [sp, #32]
 8006ca8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006caa:	47b0      	blx	r6
 8006cac:	1c43      	adds	r3, r0, #1
 8006cae:	d100      	bne.n	8006cb2 <_printf_float+0x422>
 8006cb0:	e64c      	b.n	800694c <_printf_float+0xbc>
 8006cb2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006cb4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	2300      	movs	r3, #0
 8006cba:	f7f9 fbc5 	bl	8000448 <__aeabi_dcmpeq>
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	d11c      	bne.n	8006cfc <_printf_float+0x46c>
 8006cc2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cc4:	1c6a      	adds	r2, r5, #1
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	0038      	movs	r0, r7
 8006cca:	9908      	ldr	r1, [sp, #32]
 8006ccc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006cce:	47a8      	blx	r5
 8006cd0:	1c43      	adds	r3, r0, #1
 8006cd2:	d10f      	bne.n	8006cf4 <_printf_float+0x464>
 8006cd4:	e63a      	b.n	800694c <_printf_float+0xbc>
 8006cd6:	0022      	movs	r2, r4
 8006cd8:	2301      	movs	r3, #1
 8006cda:	0038      	movs	r0, r7
 8006cdc:	9908      	ldr	r1, [sp, #32]
 8006cde:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006ce0:	321a      	adds	r2, #26
 8006ce2:	47b0      	blx	r6
 8006ce4:	1c43      	adds	r3, r0, #1
 8006ce6:	d100      	bne.n	8006cea <_printf_float+0x45a>
 8006ce8:	e630      	b.n	800694c <_printf_float+0xbc>
 8006cea:	3501      	adds	r5, #1
 8006cec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	42ab      	cmp	r3, r5
 8006cf2:	dcf0      	bgt.n	8006cd6 <_printf_float+0x446>
 8006cf4:	0022      	movs	r2, r4
 8006cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cf8:	3250      	adds	r2, #80	; 0x50
 8006cfa:	e6cb      	b.n	8006a94 <_printf_float+0x204>
 8006cfc:	2500      	movs	r5, #0
 8006cfe:	e7f5      	b.n	8006cec <_printf_float+0x45c>
 8006d00:	002a      	movs	r2, r5
 8006d02:	e7e1      	b.n	8006cc8 <_printf_float+0x438>
 8006d04:	0022      	movs	r2, r4
 8006d06:	2301      	movs	r3, #1
 8006d08:	0038      	movs	r0, r7
 8006d0a:	9908      	ldr	r1, [sp, #32]
 8006d0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006d0e:	3219      	adds	r2, #25
 8006d10:	47b0      	blx	r6
 8006d12:	1c43      	adds	r3, r0, #1
 8006d14:	d100      	bne.n	8006d18 <_printf_float+0x488>
 8006d16:	e619      	b.n	800694c <_printf_float+0xbc>
 8006d18:	3501      	adds	r5, #1
 8006d1a:	68e3      	ldr	r3, [r4, #12]
 8006d1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d1e:	1a9b      	subs	r3, r3, r2
 8006d20:	42ab      	cmp	r3, r5
 8006d22:	dcef      	bgt.n	8006d04 <_printf_float+0x474>
 8006d24:	e6ea      	b.n	8006afc <_printf_float+0x26c>
 8006d26:	2500      	movs	r5, #0
 8006d28:	e7f7      	b.n	8006d1a <_printf_float+0x48a>
 8006d2a:	46c0      	nop			; (mov r8, r8)

08006d2c <_printf_common>:
 8006d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d2e:	0015      	movs	r5, r2
 8006d30:	9301      	str	r3, [sp, #4]
 8006d32:	688a      	ldr	r2, [r1, #8]
 8006d34:	690b      	ldr	r3, [r1, #16]
 8006d36:	000c      	movs	r4, r1
 8006d38:	9000      	str	r0, [sp, #0]
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	da00      	bge.n	8006d40 <_printf_common+0x14>
 8006d3e:	0013      	movs	r3, r2
 8006d40:	0022      	movs	r2, r4
 8006d42:	602b      	str	r3, [r5, #0]
 8006d44:	3243      	adds	r2, #67	; 0x43
 8006d46:	7812      	ldrb	r2, [r2, #0]
 8006d48:	2a00      	cmp	r2, #0
 8006d4a:	d001      	beq.n	8006d50 <_printf_common+0x24>
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	602b      	str	r3, [r5, #0]
 8006d50:	6823      	ldr	r3, [r4, #0]
 8006d52:	069b      	lsls	r3, r3, #26
 8006d54:	d502      	bpl.n	8006d5c <_printf_common+0x30>
 8006d56:	682b      	ldr	r3, [r5, #0]
 8006d58:	3302      	adds	r3, #2
 8006d5a:	602b      	str	r3, [r5, #0]
 8006d5c:	6822      	ldr	r2, [r4, #0]
 8006d5e:	2306      	movs	r3, #6
 8006d60:	0017      	movs	r7, r2
 8006d62:	401f      	ands	r7, r3
 8006d64:	421a      	tst	r2, r3
 8006d66:	d027      	beq.n	8006db8 <_printf_common+0x8c>
 8006d68:	0023      	movs	r3, r4
 8006d6a:	3343      	adds	r3, #67	; 0x43
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	1e5a      	subs	r2, r3, #1
 8006d70:	4193      	sbcs	r3, r2
 8006d72:	6822      	ldr	r2, [r4, #0]
 8006d74:	0692      	lsls	r2, r2, #26
 8006d76:	d430      	bmi.n	8006dda <_printf_common+0xae>
 8006d78:	0022      	movs	r2, r4
 8006d7a:	9901      	ldr	r1, [sp, #4]
 8006d7c:	9800      	ldr	r0, [sp, #0]
 8006d7e:	9e08      	ldr	r6, [sp, #32]
 8006d80:	3243      	adds	r2, #67	; 0x43
 8006d82:	47b0      	blx	r6
 8006d84:	1c43      	adds	r3, r0, #1
 8006d86:	d025      	beq.n	8006dd4 <_printf_common+0xa8>
 8006d88:	2306      	movs	r3, #6
 8006d8a:	6820      	ldr	r0, [r4, #0]
 8006d8c:	682a      	ldr	r2, [r5, #0]
 8006d8e:	68e1      	ldr	r1, [r4, #12]
 8006d90:	2500      	movs	r5, #0
 8006d92:	4003      	ands	r3, r0
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d103      	bne.n	8006da0 <_printf_common+0x74>
 8006d98:	1a8d      	subs	r5, r1, r2
 8006d9a:	43eb      	mvns	r3, r5
 8006d9c:	17db      	asrs	r3, r3, #31
 8006d9e:	401d      	ands	r5, r3
 8006da0:	68a3      	ldr	r3, [r4, #8]
 8006da2:	6922      	ldr	r2, [r4, #16]
 8006da4:	4293      	cmp	r3, r2
 8006da6:	dd01      	ble.n	8006dac <_printf_common+0x80>
 8006da8:	1a9b      	subs	r3, r3, r2
 8006daa:	18ed      	adds	r5, r5, r3
 8006dac:	2700      	movs	r7, #0
 8006dae:	42bd      	cmp	r5, r7
 8006db0:	d120      	bne.n	8006df4 <_printf_common+0xc8>
 8006db2:	2000      	movs	r0, #0
 8006db4:	e010      	b.n	8006dd8 <_printf_common+0xac>
 8006db6:	3701      	adds	r7, #1
 8006db8:	68e3      	ldr	r3, [r4, #12]
 8006dba:	682a      	ldr	r2, [r5, #0]
 8006dbc:	1a9b      	subs	r3, r3, r2
 8006dbe:	42bb      	cmp	r3, r7
 8006dc0:	ddd2      	ble.n	8006d68 <_printf_common+0x3c>
 8006dc2:	0022      	movs	r2, r4
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	9901      	ldr	r1, [sp, #4]
 8006dc8:	9800      	ldr	r0, [sp, #0]
 8006dca:	9e08      	ldr	r6, [sp, #32]
 8006dcc:	3219      	adds	r2, #25
 8006dce:	47b0      	blx	r6
 8006dd0:	1c43      	adds	r3, r0, #1
 8006dd2:	d1f0      	bne.n	8006db6 <_printf_common+0x8a>
 8006dd4:	2001      	movs	r0, #1
 8006dd6:	4240      	negs	r0, r0
 8006dd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006dda:	2030      	movs	r0, #48	; 0x30
 8006ddc:	18e1      	adds	r1, r4, r3
 8006dde:	3143      	adds	r1, #67	; 0x43
 8006de0:	7008      	strb	r0, [r1, #0]
 8006de2:	0021      	movs	r1, r4
 8006de4:	1c5a      	adds	r2, r3, #1
 8006de6:	3145      	adds	r1, #69	; 0x45
 8006de8:	7809      	ldrb	r1, [r1, #0]
 8006dea:	18a2      	adds	r2, r4, r2
 8006dec:	3243      	adds	r2, #67	; 0x43
 8006dee:	3302      	adds	r3, #2
 8006df0:	7011      	strb	r1, [r2, #0]
 8006df2:	e7c1      	b.n	8006d78 <_printf_common+0x4c>
 8006df4:	0022      	movs	r2, r4
 8006df6:	2301      	movs	r3, #1
 8006df8:	9901      	ldr	r1, [sp, #4]
 8006dfa:	9800      	ldr	r0, [sp, #0]
 8006dfc:	9e08      	ldr	r6, [sp, #32]
 8006dfe:	321a      	adds	r2, #26
 8006e00:	47b0      	blx	r6
 8006e02:	1c43      	adds	r3, r0, #1
 8006e04:	d0e6      	beq.n	8006dd4 <_printf_common+0xa8>
 8006e06:	3701      	adds	r7, #1
 8006e08:	e7d1      	b.n	8006dae <_printf_common+0x82>
	...

08006e0c <_printf_i>:
 8006e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e0e:	b08b      	sub	sp, #44	; 0x2c
 8006e10:	9206      	str	r2, [sp, #24]
 8006e12:	000a      	movs	r2, r1
 8006e14:	3243      	adds	r2, #67	; 0x43
 8006e16:	9307      	str	r3, [sp, #28]
 8006e18:	9005      	str	r0, [sp, #20]
 8006e1a:	9204      	str	r2, [sp, #16]
 8006e1c:	7e0a      	ldrb	r2, [r1, #24]
 8006e1e:	000c      	movs	r4, r1
 8006e20:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e22:	2a78      	cmp	r2, #120	; 0x78
 8006e24:	d806      	bhi.n	8006e34 <_printf_i+0x28>
 8006e26:	2a62      	cmp	r2, #98	; 0x62
 8006e28:	d808      	bhi.n	8006e3c <_printf_i+0x30>
 8006e2a:	2a00      	cmp	r2, #0
 8006e2c:	d100      	bne.n	8006e30 <_printf_i+0x24>
 8006e2e:	e0c0      	b.n	8006fb2 <_printf_i+0x1a6>
 8006e30:	2a58      	cmp	r2, #88	; 0x58
 8006e32:	d052      	beq.n	8006eda <_printf_i+0xce>
 8006e34:	0026      	movs	r6, r4
 8006e36:	3642      	adds	r6, #66	; 0x42
 8006e38:	7032      	strb	r2, [r6, #0]
 8006e3a:	e022      	b.n	8006e82 <_printf_i+0x76>
 8006e3c:	0010      	movs	r0, r2
 8006e3e:	3863      	subs	r0, #99	; 0x63
 8006e40:	2815      	cmp	r0, #21
 8006e42:	d8f7      	bhi.n	8006e34 <_printf_i+0x28>
 8006e44:	f7f9 f970 	bl	8000128 <__gnu_thumb1_case_shi>
 8006e48:	001f0016 	.word	0x001f0016
 8006e4c:	fff6fff6 	.word	0xfff6fff6
 8006e50:	fff6fff6 	.word	0xfff6fff6
 8006e54:	fff6001f 	.word	0xfff6001f
 8006e58:	fff6fff6 	.word	0xfff6fff6
 8006e5c:	00a8fff6 	.word	0x00a8fff6
 8006e60:	009a0036 	.word	0x009a0036
 8006e64:	fff6fff6 	.word	0xfff6fff6
 8006e68:	fff600b9 	.word	0xfff600b9
 8006e6c:	fff60036 	.word	0xfff60036
 8006e70:	009efff6 	.word	0x009efff6
 8006e74:	0026      	movs	r6, r4
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	3642      	adds	r6, #66	; 0x42
 8006e7a:	1d11      	adds	r1, r2, #4
 8006e7c:	6019      	str	r1, [r3, #0]
 8006e7e:	6813      	ldr	r3, [r2, #0]
 8006e80:	7033      	strb	r3, [r6, #0]
 8006e82:	2301      	movs	r3, #1
 8006e84:	e0a7      	b.n	8006fd6 <_printf_i+0x1ca>
 8006e86:	6808      	ldr	r0, [r1, #0]
 8006e88:	6819      	ldr	r1, [r3, #0]
 8006e8a:	1d0a      	adds	r2, r1, #4
 8006e8c:	0605      	lsls	r5, r0, #24
 8006e8e:	d50b      	bpl.n	8006ea8 <_printf_i+0x9c>
 8006e90:	680d      	ldr	r5, [r1, #0]
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	2d00      	cmp	r5, #0
 8006e96:	da03      	bge.n	8006ea0 <_printf_i+0x94>
 8006e98:	232d      	movs	r3, #45	; 0x2d
 8006e9a:	9a04      	ldr	r2, [sp, #16]
 8006e9c:	426d      	negs	r5, r5
 8006e9e:	7013      	strb	r3, [r2, #0]
 8006ea0:	4b61      	ldr	r3, [pc, #388]	; (8007028 <_printf_i+0x21c>)
 8006ea2:	270a      	movs	r7, #10
 8006ea4:	9303      	str	r3, [sp, #12]
 8006ea6:	e032      	b.n	8006f0e <_printf_i+0x102>
 8006ea8:	680d      	ldr	r5, [r1, #0]
 8006eaa:	601a      	str	r2, [r3, #0]
 8006eac:	0641      	lsls	r1, r0, #25
 8006eae:	d5f1      	bpl.n	8006e94 <_printf_i+0x88>
 8006eb0:	b22d      	sxth	r5, r5
 8006eb2:	e7ef      	b.n	8006e94 <_printf_i+0x88>
 8006eb4:	680d      	ldr	r5, [r1, #0]
 8006eb6:	6819      	ldr	r1, [r3, #0]
 8006eb8:	1d08      	adds	r0, r1, #4
 8006eba:	6018      	str	r0, [r3, #0]
 8006ebc:	062e      	lsls	r6, r5, #24
 8006ebe:	d501      	bpl.n	8006ec4 <_printf_i+0xb8>
 8006ec0:	680d      	ldr	r5, [r1, #0]
 8006ec2:	e003      	b.n	8006ecc <_printf_i+0xc0>
 8006ec4:	066d      	lsls	r5, r5, #25
 8006ec6:	d5fb      	bpl.n	8006ec0 <_printf_i+0xb4>
 8006ec8:	680d      	ldr	r5, [r1, #0]
 8006eca:	b2ad      	uxth	r5, r5
 8006ecc:	4b56      	ldr	r3, [pc, #344]	; (8007028 <_printf_i+0x21c>)
 8006ece:	270a      	movs	r7, #10
 8006ed0:	9303      	str	r3, [sp, #12]
 8006ed2:	2a6f      	cmp	r2, #111	; 0x6f
 8006ed4:	d117      	bne.n	8006f06 <_printf_i+0xfa>
 8006ed6:	2708      	movs	r7, #8
 8006ed8:	e015      	b.n	8006f06 <_printf_i+0xfa>
 8006eda:	3145      	adds	r1, #69	; 0x45
 8006edc:	700a      	strb	r2, [r1, #0]
 8006ede:	4a52      	ldr	r2, [pc, #328]	; (8007028 <_printf_i+0x21c>)
 8006ee0:	9203      	str	r2, [sp, #12]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	6821      	ldr	r1, [r4, #0]
 8006ee6:	ca20      	ldmia	r2!, {r5}
 8006ee8:	601a      	str	r2, [r3, #0]
 8006eea:	0608      	lsls	r0, r1, #24
 8006eec:	d550      	bpl.n	8006f90 <_printf_i+0x184>
 8006eee:	07cb      	lsls	r3, r1, #31
 8006ef0:	d502      	bpl.n	8006ef8 <_printf_i+0xec>
 8006ef2:	2320      	movs	r3, #32
 8006ef4:	4319      	orrs	r1, r3
 8006ef6:	6021      	str	r1, [r4, #0]
 8006ef8:	2710      	movs	r7, #16
 8006efa:	2d00      	cmp	r5, #0
 8006efc:	d103      	bne.n	8006f06 <_printf_i+0xfa>
 8006efe:	2320      	movs	r3, #32
 8006f00:	6822      	ldr	r2, [r4, #0]
 8006f02:	439a      	bics	r2, r3
 8006f04:	6022      	str	r2, [r4, #0]
 8006f06:	0023      	movs	r3, r4
 8006f08:	2200      	movs	r2, #0
 8006f0a:	3343      	adds	r3, #67	; 0x43
 8006f0c:	701a      	strb	r2, [r3, #0]
 8006f0e:	6863      	ldr	r3, [r4, #4]
 8006f10:	60a3      	str	r3, [r4, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	db03      	blt.n	8006f1e <_printf_i+0x112>
 8006f16:	2204      	movs	r2, #4
 8006f18:	6821      	ldr	r1, [r4, #0]
 8006f1a:	4391      	bics	r1, r2
 8006f1c:	6021      	str	r1, [r4, #0]
 8006f1e:	2d00      	cmp	r5, #0
 8006f20:	d102      	bne.n	8006f28 <_printf_i+0x11c>
 8006f22:	9e04      	ldr	r6, [sp, #16]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00c      	beq.n	8006f42 <_printf_i+0x136>
 8006f28:	9e04      	ldr	r6, [sp, #16]
 8006f2a:	0028      	movs	r0, r5
 8006f2c:	0039      	movs	r1, r7
 8006f2e:	f7f9 f98b 	bl	8000248 <__aeabi_uidivmod>
 8006f32:	9b03      	ldr	r3, [sp, #12]
 8006f34:	3e01      	subs	r6, #1
 8006f36:	5c5b      	ldrb	r3, [r3, r1]
 8006f38:	7033      	strb	r3, [r6, #0]
 8006f3a:	002b      	movs	r3, r5
 8006f3c:	0005      	movs	r5, r0
 8006f3e:	429f      	cmp	r7, r3
 8006f40:	d9f3      	bls.n	8006f2a <_printf_i+0x11e>
 8006f42:	2f08      	cmp	r7, #8
 8006f44:	d109      	bne.n	8006f5a <_printf_i+0x14e>
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	07db      	lsls	r3, r3, #31
 8006f4a:	d506      	bpl.n	8006f5a <_printf_i+0x14e>
 8006f4c:	6863      	ldr	r3, [r4, #4]
 8006f4e:	6922      	ldr	r2, [r4, #16]
 8006f50:	4293      	cmp	r3, r2
 8006f52:	dc02      	bgt.n	8006f5a <_printf_i+0x14e>
 8006f54:	2330      	movs	r3, #48	; 0x30
 8006f56:	3e01      	subs	r6, #1
 8006f58:	7033      	strb	r3, [r6, #0]
 8006f5a:	9b04      	ldr	r3, [sp, #16]
 8006f5c:	1b9b      	subs	r3, r3, r6
 8006f5e:	6123      	str	r3, [r4, #16]
 8006f60:	9b07      	ldr	r3, [sp, #28]
 8006f62:	0021      	movs	r1, r4
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	9805      	ldr	r0, [sp, #20]
 8006f68:	9b06      	ldr	r3, [sp, #24]
 8006f6a:	aa09      	add	r2, sp, #36	; 0x24
 8006f6c:	f7ff fede 	bl	8006d2c <_printf_common>
 8006f70:	1c43      	adds	r3, r0, #1
 8006f72:	d135      	bne.n	8006fe0 <_printf_i+0x1d4>
 8006f74:	2001      	movs	r0, #1
 8006f76:	4240      	negs	r0, r0
 8006f78:	b00b      	add	sp, #44	; 0x2c
 8006f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	6809      	ldr	r1, [r1, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	6022      	str	r2, [r4, #0]
 8006f84:	0022      	movs	r2, r4
 8006f86:	2178      	movs	r1, #120	; 0x78
 8006f88:	3245      	adds	r2, #69	; 0x45
 8006f8a:	7011      	strb	r1, [r2, #0]
 8006f8c:	4a27      	ldr	r2, [pc, #156]	; (800702c <_printf_i+0x220>)
 8006f8e:	e7a7      	b.n	8006ee0 <_printf_i+0xd4>
 8006f90:	0648      	lsls	r0, r1, #25
 8006f92:	d5ac      	bpl.n	8006eee <_printf_i+0xe2>
 8006f94:	b2ad      	uxth	r5, r5
 8006f96:	e7aa      	b.n	8006eee <_printf_i+0xe2>
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	680d      	ldr	r5, [r1, #0]
 8006f9c:	1d10      	adds	r0, r2, #4
 8006f9e:	6949      	ldr	r1, [r1, #20]
 8006fa0:	6018      	str	r0, [r3, #0]
 8006fa2:	6813      	ldr	r3, [r2, #0]
 8006fa4:	062e      	lsls	r6, r5, #24
 8006fa6:	d501      	bpl.n	8006fac <_printf_i+0x1a0>
 8006fa8:	6019      	str	r1, [r3, #0]
 8006faa:	e002      	b.n	8006fb2 <_printf_i+0x1a6>
 8006fac:	066d      	lsls	r5, r5, #25
 8006fae:	d5fb      	bpl.n	8006fa8 <_printf_i+0x19c>
 8006fb0:	8019      	strh	r1, [r3, #0]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	9e04      	ldr	r6, [sp, #16]
 8006fb6:	6123      	str	r3, [r4, #16]
 8006fb8:	e7d2      	b.n	8006f60 <_printf_i+0x154>
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	1d11      	adds	r1, r2, #4
 8006fbe:	6019      	str	r1, [r3, #0]
 8006fc0:	6816      	ldr	r6, [r2, #0]
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	0030      	movs	r0, r6
 8006fc6:	6862      	ldr	r2, [r4, #4]
 8006fc8:	f000 ff0a 	bl	8007de0 <memchr>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d001      	beq.n	8006fd4 <_printf_i+0x1c8>
 8006fd0:	1b80      	subs	r0, r0, r6
 8006fd2:	6060      	str	r0, [r4, #4]
 8006fd4:	6863      	ldr	r3, [r4, #4]
 8006fd6:	6123      	str	r3, [r4, #16]
 8006fd8:	2300      	movs	r3, #0
 8006fda:	9a04      	ldr	r2, [sp, #16]
 8006fdc:	7013      	strb	r3, [r2, #0]
 8006fde:	e7bf      	b.n	8006f60 <_printf_i+0x154>
 8006fe0:	6923      	ldr	r3, [r4, #16]
 8006fe2:	0032      	movs	r2, r6
 8006fe4:	9906      	ldr	r1, [sp, #24]
 8006fe6:	9805      	ldr	r0, [sp, #20]
 8006fe8:	9d07      	ldr	r5, [sp, #28]
 8006fea:	47a8      	blx	r5
 8006fec:	1c43      	adds	r3, r0, #1
 8006fee:	d0c1      	beq.n	8006f74 <_printf_i+0x168>
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	079b      	lsls	r3, r3, #30
 8006ff4:	d415      	bmi.n	8007022 <_printf_i+0x216>
 8006ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff8:	68e0      	ldr	r0, [r4, #12]
 8006ffa:	4298      	cmp	r0, r3
 8006ffc:	dabc      	bge.n	8006f78 <_printf_i+0x16c>
 8006ffe:	0018      	movs	r0, r3
 8007000:	e7ba      	b.n	8006f78 <_printf_i+0x16c>
 8007002:	0022      	movs	r2, r4
 8007004:	2301      	movs	r3, #1
 8007006:	9906      	ldr	r1, [sp, #24]
 8007008:	9805      	ldr	r0, [sp, #20]
 800700a:	9e07      	ldr	r6, [sp, #28]
 800700c:	3219      	adds	r2, #25
 800700e:	47b0      	blx	r6
 8007010:	1c43      	adds	r3, r0, #1
 8007012:	d0af      	beq.n	8006f74 <_printf_i+0x168>
 8007014:	3501      	adds	r5, #1
 8007016:	68e3      	ldr	r3, [r4, #12]
 8007018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800701a:	1a9b      	subs	r3, r3, r2
 800701c:	42ab      	cmp	r3, r5
 800701e:	dcf0      	bgt.n	8007002 <_printf_i+0x1f6>
 8007020:	e7e9      	b.n	8006ff6 <_printf_i+0x1ea>
 8007022:	2500      	movs	r5, #0
 8007024:	e7f7      	b.n	8007016 <_printf_i+0x20a>
 8007026:	46c0      	nop			; (mov r8, r8)
 8007028:	08009d6e 	.word	0x08009d6e
 800702c:	08009d7f 	.word	0x08009d7f

08007030 <siprintf>:
 8007030:	b40e      	push	{r1, r2, r3}
 8007032:	b500      	push	{lr}
 8007034:	490b      	ldr	r1, [pc, #44]	; (8007064 <siprintf+0x34>)
 8007036:	b09c      	sub	sp, #112	; 0x70
 8007038:	ab1d      	add	r3, sp, #116	; 0x74
 800703a:	9002      	str	r0, [sp, #8]
 800703c:	9006      	str	r0, [sp, #24]
 800703e:	9107      	str	r1, [sp, #28]
 8007040:	9104      	str	r1, [sp, #16]
 8007042:	4809      	ldr	r0, [pc, #36]	; (8007068 <siprintf+0x38>)
 8007044:	4909      	ldr	r1, [pc, #36]	; (800706c <siprintf+0x3c>)
 8007046:	cb04      	ldmia	r3!, {r2}
 8007048:	9105      	str	r1, [sp, #20]
 800704a:	6800      	ldr	r0, [r0, #0]
 800704c:	a902      	add	r1, sp, #8
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	f001 fb88 	bl	8008764 <_svfiprintf_r>
 8007054:	2300      	movs	r3, #0
 8007056:	9a02      	ldr	r2, [sp, #8]
 8007058:	7013      	strb	r3, [r2, #0]
 800705a:	b01c      	add	sp, #112	; 0x70
 800705c:	bc08      	pop	{r3}
 800705e:	b003      	add	sp, #12
 8007060:	4718      	bx	r3
 8007062:	46c0      	nop			; (mov r8, r8)
 8007064:	7fffffff 	.word	0x7fffffff
 8007068:	20000014 	.word	0x20000014
 800706c:	ffff0208 	.word	0xffff0208

08007070 <quorem>:
 8007070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007072:	0006      	movs	r6, r0
 8007074:	690d      	ldr	r5, [r1, #16]
 8007076:	6933      	ldr	r3, [r6, #16]
 8007078:	b087      	sub	sp, #28
 800707a:	2000      	movs	r0, #0
 800707c:	9102      	str	r1, [sp, #8]
 800707e:	42ab      	cmp	r3, r5
 8007080:	db6b      	blt.n	800715a <quorem+0xea>
 8007082:	000b      	movs	r3, r1
 8007084:	3d01      	subs	r5, #1
 8007086:	00ac      	lsls	r4, r5, #2
 8007088:	3314      	adds	r3, #20
 800708a:	9305      	str	r3, [sp, #20]
 800708c:	191b      	adds	r3, r3, r4
 800708e:	9303      	str	r3, [sp, #12]
 8007090:	0033      	movs	r3, r6
 8007092:	3314      	adds	r3, #20
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	191c      	adds	r4, r3, r4
 8007098:	9b03      	ldr	r3, [sp, #12]
 800709a:	6827      	ldr	r7, [r4, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	0038      	movs	r0, r7
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	3301      	adds	r3, #1
 80070a4:	0019      	movs	r1, r3
 80070a6:	9304      	str	r3, [sp, #16]
 80070a8:	f7f9 f848 	bl	800013c <__udivsi3>
 80070ac:	9b04      	ldr	r3, [sp, #16]
 80070ae:	9000      	str	r0, [sp, #0]
 80070b0:	429f      	cmp	r7, r3
 80070b2:	d329      	bcc.n	8007108 <quorem+0x98>
 80070b4:	2300      	movs	r3, #0
 80070b6:	469c      	mov	ip, r3
 80070b8:	9801      	ldr	r0, [sp, #4]
 80070ba:	9f05      	ldr	r7, [sp, #20]
 80070bc:	9304      	str	r3, [sp, #16]
 80070be:	cf08      	ldmia	r7!, {r3}
 80070c0:	9a00      	ldr	r2, [sp, #0]
 80070c2:	b299      	uxth	r1, r3
 80070c4:	4351      	muls	r1, r2
 80070c6:	0c1b      	lsrs	r3, r3, #16
 80070c8:	4353      	muls	r3, r2
 80070ca:	4461      	add	r1, ip
 80070cc:	0c0a      	lsrs	r2, r1, #16
 80070ce:	189b      	adds	r3, r3, r2
 80070d0:	0c1a      	lsrs	r2, r3, #16
 80070d2:	9305      	str	r3, [sp, #20]
 80070d4:	6803      	ldr	r3, [r0, #0]
 80070d6:	4694      	mov	ip, r2
 80070d8:	b29a      	uxth	r2, r3
 80070da:	9b04      	ldr	r3, [sp, #16]
 80070dc:	b289      	uxth	r1, r1
 80070de:	18d2      	adds	r2, r2, r3
 80070e0:	6803      	ldr	r3, [r0, #0]
 80070e2:	1a52      	subs	r2, r2, r1
 80070e4:	0c19      	lsrs	r1, r3, #16
 80070e6:	466b      	mov	r3, sp
 80070e8:	8a9b      	ldrh	r3, [r3, #20]
 80070ea:	1acb      	subs	r3, r1, r3
 80070ec:	1411      	asrs	r1, r2, #16
 80070ee:	185b      	adds	r3, r3, r1
 80070f0:	1419      	asrs	r1, r3, #16
 80070f2:	b292      	uxth	r2, r2
 80070f4:	041b      	lsls	r3, r3, #16
 80070f6:	431a      	orrs	r2, r3
 80070f8:	9b03      	ldr	r3, [sp, #12]
 80070fa:	9104      	str	r1, [sp, #16]
 80070fc:	c004      	stmia	r0!, {r2}
 80070fe:	42bb      	cmp	r3, r7
 8007100:	d2dd      	bcs.n	80070be <quorem+0x4e>
 8007102:	6823      	ldr	r3, [r4, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d02e      	beq.n	8007166 <quorem+0xf6>
 8007108:	0030      	movs	r0, r6
 800710a:	9902      	ldr	r1, [sp, #8]
 800710c:	f001 f8fa 	bl	8008304 <__mcmp>
 8007110:	2800      	cmp	r0, #0
 8007112:	db21      	blt.n	8007158 <quorem+0xe8>
 8007114:	0030      	movs	r0, r6
 8007116:	2400      	movs	r4, #0
 8007118:	9b00      	ldr	r3, [sp, #0]
 800711a:	9902      	ldr	r1, [sp, #8]
 800711c:	3301      	adds	r3, #1
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	3014      	adds	r0, #20
 8007122:	3114      	adds	r1, #20
 8007124:	6802      	ldr	r2, [r0, #0]
 8007126:	c908      	ldmia	r1!, {r3}
 8007128:	b292      	uxth	r2, r2
 800712a:	1914      	adds	r4, r2, r4
 800712c:	b29a      	uxth	r2, r3
 800712e:	1aa2      	subs	r2, r4, r2
 8007130:	6804      	ldr	r4, [r0, #0]
 8007132:	0c1b      	lsrs	r3, r3, #16
 8007134:	0c24      	lsrs	r4, r4, #16
 8007136:	1ae3      	subs	r3, r4, r3
 8007138:	1414      	asrs	r4, r2, #16
 800713a:	191b      	adds	r3, r3, r4
 800713c:	141c      	asrs	r4, r3, #16
 800713e:	b292      	uxth	r2, r2
 8007140:	041b      	lsls	r3, r3, #16
 8007142:	4313      	orrs	r3, r2
 8007144:	c008      	stmia	r0!, {r3}
 8007146:	9b03      	ldr	r3, [sp, #12]
 8007148:	428b      	cmp	r3, r1
 800714a:	d2eb      	bcs.n	8007124 <quorem+0xb4>
 800714c:	9a01      	ldr	r2, [sp, #4]
 800714e:	00ab      	lsls	r3, r5, #2
 8007150:	18d3      	adds	r3, r2, r3
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	2a00      	cmp	r2, #0
 8007156:	d010      	beq.n	800717a <quorem+0x10a>
 8007158:	9800      	ldr	r0, [sp, #0]
 800715a:	b007      	add	sp, #28
 800715c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800715e:	6823      	ldr	r3, [r4, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d104      	bne.n	800716e <quorem+0xfe>
 8007164:	3d01      	subs	r5, #1
 8007166:	9b01      	ldr	r3, [sp, #4]
 8007168:	3c04      	subs	r4, #4
 800716a:	42a3      	cmp	r3, r4
 800716c:	d3f7      	bcc.n	800715e <quorem+0xee>
 800716e:	6135      	str	r5, [r6, #16]
 8007170:	e7ca      	b.n	8007108 <quorem+0x98>
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	2a00      	cmp	r2, #0
 8007176:	d104      	bne.n	8007182 <quorem+0x112>
 8007178:	3d01      	subs	r5, #1
 800717a:	9a01      	ldr	r2, [sp, #4]
 800717c:	3b04      	subs	r3, #4
 800717e:	429a      	cmp	r2, r3
 8007180:	d3f7      	bcc.n	8007172 <quorem+0x102>
 8007182:	6135      	str	r5, [r6, #16]
 8007184:	e7e8      	b.n	8007158 <quorem+0xe8>
	...

08007188 <_dtoa_r>:
 8007188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800718a:	b09d      	sub	sp, #116	; 0x74
 800718c:	9202      	str	r2, [sp, #8]
 800718e:	9303      	str	r3, [sp, #12]
 8007190:	9b02      	ldr	r3, [sp, #8]
 8007192:	9c03      	ldr	r4, [sp, #12]
 8007194:	930a      	str	r3, [sp, #40]	; 0x28
 8007196:	940b      	str	r4, [sp, #44]	; 0x2c
 8007198:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800719a:	0007      	movs	r7, r0
 800719c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800719e:	2c00      	cmp	r4, #0
 80071a0:	d10e      	bne.n	80071c0 <_dtoa_r+0x38>
 80071a2:	2010      	movs	r0, #16
 80071a4:	f000 fe12 	bl	8007dcc <malloc>
 80071a8:	1e02      	subs	r2, r0, #0
 80071aa:	6278      	str	r0, [r7, #36]	; 0x24
 80071ac:	d104      	bne.n	80071b8 <_dtoa_r+0x30>
 80071ae:	21ea      	movs	r1, #234	; 0xea
 80071b0:	4bc0      	ldr	r3, [pc, #768]	; (80074b4 <_dtoa_r+0x32c>)
 80071b2:	48c1      	ldr	r0, [pc, #772]	; (80074b8 <_dtoa_r+0x330>)
 80071b4:	f001 fbe8 	bl	8008988 <__assert_func>
 80071b8:	6044      	str	r4, [r0, #4]
 80071ba:	6084      	str	r4, [r0, #8]
 80071bc:	6004      	str	r4, [r0, #0]
 80071be:	60c4      	str	r4, [r0, #12]
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	6819      	ldr	r1, [r3, #0]
 80071c4:	2900      	cmp	r1, #0
 80071c6:	d00a      	beq.n	80071de <_dtoa_r+0x56>
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	2301      	movs	r3, #1
 80071cc:	4093      	lsls	r3, r2
 80071ce:	604a      	str	r2, [r1, #4]
 80071d0:	608b      	str	r3, [r1, #8]
 80071d2:	0038      	movs	r0, r7
 80071d4:	f000 fe54 	bl	8007e80 <_Bfree>
 80071d8:	2200      	movs	r2, #0
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	601a      	str	r2, [r3, #0]
 80071de:	9b03      	ldr	r3, [sp, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	da21      	bge.n	8007228 <_dtoa_r+0xa0>
 80071e4:	2301      	movs	r3, #1
 80071e6:	602b      	str	r3, [r5, #0]
 80071e8:	9b03      	ldr	r3, [sp, #12]
 80071ea:	005b      	lsls	r3, r3, #1
 80071ec:	085b      	lsrs	r3, r3, #1
 80071ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80071f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80071f2:	4bb2      	ldr	r3, [pc, #712]	; (80074bc <_dtoa_r+0x334>)
 80071f4:	002a      	movs	r2, r5
 80071f6:	9318      	str	r3, [sp, #96]	; 0x60
 80071f8:	401a      	ands	r2, r3
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d117      	bne.n	800722e <_dtoa_r+0xa6>
 80071fe:	4bb0      	ldr	r3, [pc, #704]	; (80074c0 <_dtoa_r+0x338>)
 8007200:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007202:	0328      	lsls	r0, r5, #12
 8007204:	6013      	str	r3, [r2, #0]
 8007206:	9b02      	ldr	r3, [sp, #8]
 8007208:	0b00      	lsrs	r0, r0, #12
 800720a:	4318      	orrs	r0, r3
 800720c:	d101      	bne.n	8007212 <_dtoa_r+0x8a>
 800720e:	f000 fdc3 	bl	8007d98 <_dtoa_r+0xc10>
 8007212:	48ac      	ldr	r0, [pc, #688]	; (80074c4 <_dtoa_r+0x33c>)
 8007214:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007216:	9005      	str	r0, [sp, #20]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <_dtoa_r+0x9a>
 800721c:	4baa      	ldr	r3, [pc, #680]	; (80074c8 <_dtoa_r+0x340>)
 800721e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007220:	6013      	str	r3, [r2, #0]
 8007222:	9805      	ldr	r0, [sp, #20]
 8007224:	b01d      	add	sp, #116	; 0x74
 8007226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007228:	2300      	movs	r3, #0
 800722a:	602b      	str	r3, [r5, #0]
 800722c:	e7e0      	b.n	80071f0 <_dtoa_r+0x68>
 800722e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007230:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007232:	9312      	str	r3, [sp, #72]	; 0x48
 8007234:	9413      	str	r4, [sp, #76]	; 0x4c
 8007236:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007238:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800723a:	2200      	movs	r2, #0
 800723c:	2300      	movs	r3, #0
 800723e:	f7f9 f903 	bl	8000448 <__aeabi_dcmpeq>
 8007242:	1e04      	subs	r4, r0, #0
 8007244:	d00b      	beq.n	800725e <_dtoa_r+0xd6>
 8007246:	2301      	movs	r3, #1
 8007248:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	4b9f      	ldr	r3, [pc, #636]	; (80074cc <_dtoa_r+0x344>)
 800724e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007250:	9305      	str	r3, [sp, #20]
 8007252:	2a00      	cmp	r2, #0
 8007254:	d0e5      	beq.n	8007222 <_dtoa_r+0x9a>
 8007256:	4a9e      	ldr	r2, [pc, #632]	; (80074d0 <_dtoa_r+0x348>)
 8007258:	9926      	ldr	r1, [sp, #152]	; 0x98
 800725a:	600a      	str	r2, [r1, #0]
 800725c:	e7e1      	b.n	8007222 <_dtoa_r+0x9a>
 800725e:	ab1a      	add	r3, sp, #104	; 0x68
 8007260:	9301      	str	r3, [sp, #4]
 8007262:	ab1b      	add	r3, sp, #108	; 0x6c
 8007264:	9300      	str	r3, [sp, #0]
 8007266:	0038      	movs	r0, r7
 8007268:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800726a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800726c:	f001 f8fe 	bl	800846c <__d2b>
 8007270:	006e      	lsls	r6, r5, #1
 8007272:	9004      	str	r0, [sp, #16]
 8007274:	0d76      	lsrs	r6, r6, #21
 8007276:	d100      	bne.n	800727a <_dtoa_r+0xf2>
 8007278:	e07c      	b.n	8007374 <_dtoa_r+0x1ec>
 800727a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800727c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800727e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007280:	4a94      	ldr	r2, [pc, #592]	; (80074d4 <_dtoa_r+0x34c>)
 8007282:	031b      	lsls	r3, r3, #12
 8007284:	0b1b      	lsrs	r3, r3, #12
 8007286:	431a      	orrs	r2, r3
 8007288:	0011      	movs	r1, r2
 800728a:	4b93      	ldr	r3, [pc, #588]	; (80074d8 <_dtoa_r+0x350>)
 800728c:	9416      	str	r4, [sp, #88]	; 0x58
 800728e:	18f6      	adds	r6, r6, r3
 8007290:	2200      	movs	r2, #0
 8007292:	4b92      	ldr	r3, [pc, #584]	; (80074dc <_dtoa_r+0x354>)
 8007294:	f7fa fc2a 	bl	8001aec <__aeabi_dsub>
 8007298:	4a91      	ldr	r2, [pc, #580]	; (80074e0 <_dtoa_r+0x358>)
 800729a:	4b92      	ldr	r3, [pc, #584]	; (80074e4 <_dtoa_r+0x35c>)
 800729c:	f7fa f9ba 	bl	8001614 <__aeabi_dmul>
 80072a0:	4a91      	ldr	r2, [pc, #580]	; (80074e8 <_dtoa_r+0x360>)
 80072a2:	4b92      	ldr	r3, [pc, #584]	; (80074ec <_dtoa_r+0x364>)
 80072a4:	f7f9 fa46 	bl	8000734 <__aeabi_dadd>
 80072a8:	0004      	movs	r4, r0
 80072aa:	0030      	movs	r0, r6
 80072ac:	000d      	movs	r5, r1
 80072ae:	f7fb f803 	bl	80022b8 <__aeabi_i2d>
 80072b2:	4a8f      	ldr	r2, [pc, #572]	; (80074f0 <_dtoa_r+0x368>)
 80072b4:	4b8f      	ldr	r3, [pc, #572]	; (80074f4 <_dtoa_r+0x36c>)
 80072b6:	f7fa f9ad 	bl	8001614 <__aeabi_dmul>
 80072ba:	0002      	movs	r2, r0
 80072bc:	000b      	movs	r3, r1
 80072be:	0020      	movs	r0, r4
 80072c0:	0029      	movs	r1, r5
 80072c2:	f7f9 fa37 	bl	8000734 <__aeabi_dadd>
 80072c6:	0004      	movs	r4, r0
 80072c8:	000d      	movs	r5, r1
 80072ca:	f7fa ffbf 	bl	800224c <__aeabi_d2iz>
 80072ce:	2200      	movs	r2, #0
 80072d0:	9002      	str	r0, [sp, #8]
 80072d2:	2300      	movs	r3, #0
 80072d4:	0020      	movs	r0, r4
 80072d6:	0029      	movs	r1, r5
 80072d8:	f7f9 f8bc 	bl	8000454 <__aeabi_dcmplt>
 80072dc:	2800      	cmp	r0, #0
 80072de:	d00b      	beq.n	80072f8 <_dtoa_r+0x170>
 80072e0:	9802      	ldr	r0, [sp, #8]
 80072e2:	f7fa ffe9 	bl	80022b8 <__aeabi_i2d>
 80072e6:	002b      	movs	r3, r5
 80072e8:	0022      	movs	r2, r4
 80072ea:	f7f9 f8ad 	bl	8000448 <__aeabi_dcmpeq>
 80072ee:	4243      	negs	r3, r0
 80072f0:	4158      	adcs	r0, r3
 80072f2:	9b02      	ldr	r3, [sp, #8]
 80072f4:	1a1b      	subs	r3, r3, r0
 80072f6:	9302      	str	r3, [sp, #8]
 80072f8:	2301      	movs	r3, #1
 80072fa:	9315      	str	r3, [sp, #84]	; 0x54
 80072fc:	9b02      	ldr	r3, [sp, #8]
 80072fe:	2b16      	cmp	r3, #22
 8007300:	d80f      	bhi.n	8007322 <_dtoa_r+0x19a>
 8007302:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007304:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007306:	00da      	lsls	r2, r3, #3
 8007308:	4b7b      	ldr	r3, [pc, #492]	; (80074f8 <_dtoa_r+0x370>)
 800730a:	189b      	adds	r3, r3, r2
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f7f9 f8a0 	bl	8000454 <__aeabi_dcmplt>
 8007314:	2800      	cmp	r0, #0
 8007316:	d049      	beq.n	80073ac <_dtoa_r+0x224>
 8007318:	9b02      	ldr	r3, [sp, #8]
 800731a:	3b01      	subs	r3, #1
 800731c:	9302      	str	r3, [sp, #8]
 800731e:	2300      	movs	r3, #0
 8007320:	9315      	str	r3, [sp, #84]	; 0x54
 8007322:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007324:	1b9e      	subs	r6, r3, r6
 8007326:	2300      	movs	r3, #0
 8007328:	9308      	str	r3, [sp, #32]
 800732a:	0033      	movs	r3, r6
 800732c:	3b01      	subs	r3, #1
 800732e:	930d      	str	r3, [sp, #52]	; 0x34
 8007330:	d504      	bpl.n	800733c <_dtoa_r+0x1b4>
 8007332:	2301      	movs	r3, #1
 8007334:	1b9b      	subs	r3, r3, r6
 8007336:	9308      	str	r3, [sp, #32]
 8007338:	2300      	movs	r3, #0
 800733a:	930d      	str	r3, [sp, #52]	; 0x34
 800733c:	9b02      	ldr	r3, [sp, #8]
 800733e:	2b00      	cmp	r3, #0
 8007340:	db36      	blt.n	80073b0 <_dtoa_r+0x228>
 8007342:	9a02      	ldr	r2, [sp, #8]
 8007344:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007346:	4694      	mov	ip, r2
 8007348:	4463      	add	r3, ip
 800734a:	930d      	str	r3, [sp, #52]	; 0x34
 800734c:	2300      	movs	r3, #0
 800734e:	9214      	str	r2, [sp, #80]	; 0x50
 8007350:	930e      	str	r3, [sp, #56]	; 0x38
 8007352:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007354:	2401      	movs	r4, #1
 8007356:	2b09      	cmp	r3, #9
 8007358:	d862      	bhi.n	8007420 <_dtoa_r+0x298>
 800735a:	2b05      	cmp	r3, #5
 800735c:	dd02      	ble.n	8007364 <_dtoa_r+0x1dc>
 800735e:	2400      	movs	r4, #0
 8007360:	3b04      	subs	r3, #4
 8007362:	9322      	str	r3, [sp, #136]	; 0x88
 8007364:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007366:	1e98      	subs	r0, r3, #2
 8007368:	2803      	cmp	r0, #3
 800736a:	d862      	bhi.n	8007432 <_dtoa_r+0x2aa>
 800736c:	f7f8 fed2 	bl	8000114 <__gnu_thumb1_case_uqi>
 8007370:	56343629 	.word	0x56343629
 8007374:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007376:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007378:	189e      	adds	r6, r3, r2
 800737a:	4b60      	ldr	r3, [pc, #384]	; (80074fc <_dtoa_r+0x374>)
 800737c:	18f2      	adds	r2, r6, r3
 800737e:	2a20      	cmp	r2, #32
 8007380:	dd0f      	ble.n	80073a2 <_dtoa_r+0x21a>
 8007382:	2340      	movs	r3, #64	; 0x40
 8007384:	1a9b      	subs	r3, r3, r2
 8007386:	409d      	lsls	r5, r3
 8007388:	4b5d      	ldr	r3, [pc, #372]	; (8007500 <_dtoa_r+0x378>)
 800738a:	9802      	ldr	r0, [sp, #8]
 800738c:	18f3      	adds	r3, r6, r3
 800738e:	40d8      	lsrs	r0, r3
 8007390:	4328      	orrs	r0, r5
 8007392:	f7fa ffc1 	bl	8002318 <__aeabi_ui2d>
 8007396:	2301      	movs	r3, #1
 8007398:	4c5a      	ldr	r4, [pc, #360]	; (8007504 <_dtoa_r+0x37c>)
 800739a:	3e01      	subs	r6, #1
 800739c:	1909      	adds	r1, r1, r4
 800739e:	9316      	str	r3, [sp, #88]	; 0x58
 80073a0:	e776      	b.n	8007290 <_dtoa_r+0x108>
 80073a2:	2320      	movs	r3, #32
 80073a4:	9802      	ldr	r0, [sp, #8]
 80073a6:	1a9b      	subs	r3, r3, r2
 80073a8:	4098      	lsls	r0, r3
 80073aa:	e7f2      	b.n	8007392 <_dtoa_r+0x20a>
 80073ac:	9015      	str	r0, [sp, #84]	; 0x54
 80073ae:	e7b8      	b.n	8007322 <_dtoa_r+0x19a>
 80073b0:	9b08      	ldr	r3, [sp, #32]
 80073b2:	9a02      	ldr	r2, [sp, #8]
 80073b4:	1a9b      	subs	r3, r3, r2
 80073b6:	9308      	str	r3, [sp, #32]
 80073b8:	4253      	negs	r3, r2
 80073ba:	930e      	str	r3, [sp, #56]	; 0x38
 80073bc:	2300      	movs	r3, #0
 80073be:	9314      	str	r3, [sp, #80]	; 0x50
 80073c0:	e7c7      	b.n	8007352 <_dtoa_r+0x1ca>
 80073c2:	2300      	movs	r3, #0
 80073c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80073c6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	dc36      	bgt.n	800743a <_dtoa_r+0x2b2>
 80073cc:	2301      	movs	r3, #1
 80073ce:	001a      	movs	r2, r3
 80073d0:	930c      	str	r3, [sp, #48]	; 0x30
 80073d2:	9306      	str	r3, [sp, #24]
 80073d4:	9223      	str	r2, [sp, #140]	; 0x8c
 80073d6:	e00d      	b.n	80073f4 <_dtoa_r+0x26c>
 80073d8:	2301      	movs	r3, #1
 80073da:	e7f3      	b.n	80073c4 <_dtoa_r+0x23c>
 80073dc:	2300      	movs	r3, #0
 80073de:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80073e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80073e2:	4694      	mov	ip, r2
 80073e4:	9b02      	ldr	r3, [sp, #8]
 80073e6:	4463      	add	r3, ip
 80073e8:	930c      	str	r3, [sp, #48]	; 0x30
 80073ea:	3301      	adds	r3, #1
 80073ec:	9306      	str	r3, [sp, #24]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	dc00      	bgt.n	80073f4 <_dtoa_r+0x26c>
 80073f2:	2301      	movs	r3, #1
 80073f4:	2200      	movs	r2, #0
 80073f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073f8:	6042      	str	r2, [r0, #4]
 80073fa:	3204      	adds	r2, #4
 80073fc:	0015      	movs	r5, r2
 80073fe:	3514      	adds	r5, #20
 8007400:	6841      	ldr	r1, [r0, #4]
 8007402:	429d      	cmp	r5, r3
 8007404:	d91d      	bls.n	8007442 <_dtoa_r+0x2ba>
 8007406:	0038      	movs	r0, r7
 8007408:	f000 fcf6 	bl	8007df8 <_Balloc>
 800740c:	9005      	str	r0, [sp, #20]
 800740e:	2800      	cmp	r0, #0
 8007410:	d11b      	bne.n	800744a <_dtoa_r+0x2c2>
 8007412:	21d5      	movs	r1, #213	; 0xd5
 8007414:	0002      	movs	r2, r0
 8007416:	4b3c      	ldr	r3, [pc, #240]	; (8007508 <_dtoa_r+0x380>)
 8007418:	0049      	lsls	r1, r1, #1
 800741a:	e6ca      	b.n	80071b2 <_dtoa_r+0x2a>
 800741c:	2301      	movs	r3, #1
 800741e:	e7de      	b.n	80073de <_dtoa_r+0x256>
 8007420:	2300      	movs	r3, #0
 8007422:	940f      	str	r4, [sp, #60]	; 0x3c
 8007424:	9322      	str	r3, [sp, #136]	; 0x88
 8007426:	3b01      	subs	r3, #1
 8007428:	930c      	str	r3, [sp, #48]	; 0x30
 800742a:	9306      	str	r3, [sp, #24]
 800742c:	2200      	movs	r2, #0
 800742e:	3313      	adds	r3, #19
 8007430:	e7d0      	b.n	80073d4 <_dtoa_r+0x24c>
 8007432:	2301      	movs	r3, #1
 8007434:	930f      	str	r3, [sp, #60]	; 0x3c
 8007436:	3b02      	subs	r3, #2
 8007438:	e7f6      	b.n	8007428 <_dtoa_r+0x2a0>
 800743a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800743c:	930c      	str	r3, [sp, #48]	; 0x30
 800743e:	9306      	str	r3, [sp, #24]
 8007440:	e7d8      	b.n	80073f4 <_dtoa_r+0x26c>
 8007442:	3101      	adds	r1, #1
 8007444:	6041      	str	r1, [r0, #4]
 8007446:	0052      	lsls	r2, r2, #1
 8007448:	e7d8      	b.n	80073fc <_dtoa_r+0x274>
 800744a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744c:	9a05      	ldr	r2, [sp, #20]
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	9b06      	ldr	r3, [sp, #24]
 8007452:	2b0e      	cmp	r3, #14
 8007454:	d900      	bls.n	8007458 <_dtoa_r+0x2d0>
 8007456:	e0eb      	b.n	8007630 <_dtoa_r+0x4a8>
 8007458:	2c00      	cmp	r4, #0
 800745a:	d100      	bne.n	800745e <_dtoa_r+0x2d6>
 800745c:	e0e8      	b.n	8007630 <_dtoa_r+0x4a8>
 800745e:	9b02      	ldr	r3, [sp, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	dd68      	ble.n	8007536 <_dtoa_r+0x3ae>
 8007464:	001a      	movs	r2, r3
 8007466:	210f      	movs	r1, #15
 8007468:	4b23      	ldr	r3, [pc, #140]	; (80074f8 <_dtoa_r+0x370>)
 800746a:	400a      	ands	r2, r1
 800746c:	00d2      	lsls	r2, r2, #3
 800746e:	189b      	adds	r3, r3, r2
 8007470:	681d      	ldr	r5, [r3, #0]
 8007472:	685e      	ldr	r6, [r3, #4]
 8007474:	9b02      	ldr	r3, [sp, #8]
 8007476:	111c      	asrs	r4, r3, #4
 8007478:	2302      	movs	r3, #2
 800747a:	9310      	str	r3, [sp, #64]	; 0x40
 800747c:	9b02      	ldr	r3, [sp, #8]
 800747e:	05db      	lsls	r3, r3, #23
 8007480:	d50b      	bpl.n	800749a <_dtoa_r+0x312>
 8007482:	4b22      	ldr	r3, [pc, #136]	; (800750c <_dtoa_r+0x384>)
 8007484:	400c      	ands	r4, r1
 8007486:	6a1a      	ldr	r2, [r3, #32]
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800748c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800748e:	f7f9 fcbb 	bl	8000e08 <__aeabi_ddiv>
 8007492:	2303      	movs	r3, #3
 8007494:	900a      	str	r0, [sp, #40]	; 0x28
 8007496:	910b      	str	r1, [sp, #44]	; 0x2c
 8007498:	9310      	str	r3, [sp, #64]	; 0x40
 800749a:	4b1c      	ldr	r3, [pc, #112]	; (800750c <_dtoa_r+0x384>)
 800749c:	9307      	str	r3, [sp, #28]
 800749e:	2c00      	cmp	r4, #0
 80074a0:	d136      	bne.n	8007510 <_dtoa_r+0x388>
 80074a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80074a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074a6:	002a      	movs	r2, r5
 80074a8:	0033      	movs	r3, r6
 80074aa:	f7f9 fcad 	bl	8000e08 <__aeabi_ddiv>
 80074ae:	900a      	str	r0, [sp, #40]	; 0x28
 80074b0:	910b      	str	r1, [sp, #44]	; 0x2c
 80074b2:	e05c      	b.n	800756e <_dtoa_r+0x3e6>
 80074b4:	08009d9d 	.word	0x08009d9d
 80074b8:	08009db4 	.word	0x08009db4
 80074bc:	7ff00000 	.word	0x7ff00000
 80074c0:	0000270f 	.word	0x0000270f
 80074c4:	08009d99 	.word	0x08009d99
 80074c8:	08009d9c 	.word	0x08009d9c
 80074cc:	08009d6c 	.word	0x08009d6c
 80074d0:	08009d6d 	.word	0x08009d6d
 80074d4:	3ff00000 	.word	0x3ff00000
 80074d8:	fffffc01 	.word	0xfffffc01
 80074dc:	3ff80000 	.word	0x3ff80000
 80074e0:	636f4361 	.word	0x636f4361
 80074e4:	3fd287a7 	.word	0x3fd287a7
 80074e8:	8b60c8b3 	.word	0x8b60c8b3
 80074ec:	3fc68a28 	.word	0x3fc68a28
 80074f0:	509f79fb 	.word	0x509f79fb
 80074f4:	3fd34413 	.word	0x3fd34413
 80074f8:	08009eb0 	.word	0x08009eb0
 80074fc:	00000432 	.word	0x00000432
 8007500:	00000412 	.word	0x00000412
 8007504:	fe100000 	.word	0xfe100000
 8007508:	08009e13 	.word	0x08009e13
 800750c:	08009e88 	.word	0x08009e88
 8007510:	2301      	movs	r3, #1
 8007512:	421c      	tst	r4, r3
 8007514:	d00b      	beq.n	800752e <_dtoa_r+0x3a6>
 8007516:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007518:	0028      	movs	r0, r5
 800751a:	3301      	adds	r3, #1
 800751c:	9310      	str	r3, [sp, #64]	; 0x40
 800751e:	9b07      	ldr	r3, [sp, #28]
 8007520:	0031      	movs	r1, r6
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f7fa f875 	bl	8001614 <__aeabi_dmul>
 800752a:	0005      	movs	r5, r0
 800752c:	000e      	movs	r6, r1
 800752e:	9b07      	ldr	r3, [sp, #28]
 8007530:	1064      	asrs	r4, r4, #1
 8007532:	3308      	adds	r3, #8
 8007534:	e7b2      	b.n	800749c <_dtoa_r+0x314>
 8007536:	2302      	movs	r3, #2
 8007538:	9310      	str	r3, [sp, #64]	; 0x40
 800753a:	9b02      	ldr	r3, [sp, #8]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d016      	beq.n	800756e <_dtoa_r+0x3e6>
 8007540:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007542:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007544:	425c      	negs	r4, r3
 8007546:	230f      	movs	r3, #15
 8007548:	4ab5      	ldr	r2, [pc, #724]	; (8007820 <_dtoa_r+0x698>)
 800754a:	4023      	ands	r3, r4
 800754c:	00db      	lsls	r3, r3, #3
 800754e:	18d3      	adds	r3, r2, r3
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f7fa f85e 	bl	8001614 <__aeabi_dmul>
 8007558:	2601      	movs	r6, #1
 800755a:	2300      	movs	r3, #0
 800755c:	900a      	str	r0, [sp, #40]	; 0x28
 800755e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007560:	4db0      	ldr	r5, [pc, #704]	; (8007824 <_dtoa_r+0x69c>)
 8007562:	1124      	asrs	r4, r4, #4
 8007564:	2c00      	cmp	r4, #0
 8007566:	d000      	beq.n	800756a <_dtoa_r+0x3e2>
 8007568:	e094      	b.n	8007694 <_dtoa_r+0x50c>
 800756a:	2b00      	cmp	r3, #0
 800756c:	d19f      	bne.n	80074ae <_dtoa_r+0x326>
 800756e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007570:	2b00      	cmp	r3, #0
 8007572:	d100      	bne.n	8007576 <_dtoa_r+0x3ee>
 8007574:	e09b      	b.n	80076ae <_dtoa_r+0x526>
 8007576:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007578:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800757a:	2200      	movs	r2, #0
 800757c:	0020      	movs	r0, r4
 800757e:	0029      	movs	r1, r5
 8007580:	4ba9      	ldr	r3, [pc, #676]	; (8007828 <_dtoa_r+0x6a0>)
 8007582:	f7f8 ff67 	bl	8000454 <__aeabi_dcmplt>
 8007586:	2800      	cmp	r0, #0
 8007588:	d100      	bne.n	800758c <_dtoa_r+0x404>
 800758a:	e090      	b.n	80076ae <_dtoa_r+0x526>
 800758c:	9b06      	ldr	r3, [sp, #24]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d100      	bne.n	8007594 <_dtoa_r+0x40c>
 8007592:	e08c      	b.n	80076ae <_dtoa_r+0x526>
 8007594:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007596:	2b00      	cmp	r3, #0
 8007598:	dd46      	ble.n	8007628 <_dtoa_r+0x4a0>
 800759a:	9b02      	ldr	r3, [sp, #8]
 800759c:	2200      	movs	r2, #0
 800759e:	0020      	movs	r0, r4
 80075a0:	0029      	movs	r1, r5
 80075a2:	1e5e      	subs	r6, r3, #1
 80075a4:	4ba1      	ldr	r3, [pc, #644]	; (800782c <_dtoa_r+0x6a4>)
 80075a6:	f7fa f835 	bl	8001614 <__aeabi_dmul>
 80075aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80075ac:	900a      	str	r0, [sp, #40]	; 0x28
 80075ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80075b0:	3301      	adds	r3, #1
 80075b2:	9310      	str	r3, [sp, #64]	; 0x40
 80075b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075b6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80075b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80075ba:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80075bc:	9307      	str	r3, [sp, #28]
 80075be:	f7fa fe7b 	bl	80022b8 <__aeabi_i2d>
 80075c2:	0022      	movs	r2, r4
 80075c4:	002b      	movs	r3, r5
 80075c6:	f7fa f825 	bl	8001614 <__aeabi_dmul>
 80075ca:	2200      	movs	r2, #0
 80075cc:	4b98      	ldr	r3, [pc, #608]	; (8007830 <_dtoa_r+0x6a8>)
 80075ce:	f7f9 f8b1 	bl	8000734 <__aeabi_dadd>
 80075d2:	9010      	str	r0, [sp, #64]	; 0x40
 80075d4:	9111      	str	r1, [sp, #68]	; 0x44
 80075d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075da:	920a      	str	r2, [sp, #40]	; 0x28
 80075dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80075de:	4a95      	ldr	r2, [pc, #596]	; (8007834 <_dtoa_r+0x6ac>)
 80075e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075e2:	4694      	mov	ip, r2
 80075e4:	4463      	add	r3, ip
 80075e6:	9317      	str	r3, [sp, #92]	; 0x5c
 80075e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80075ea:	9b07      	ldr	r3, [sp, #28]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d161      	bne.n	80076b4 <_dtoa_r+0x52c>
 80075f0:	2200      	movs	r2, #0
 80075f2:	0020      	movs	r0, r4
 80075f4:	0029      	movs	r1, r5
 80075f6:	4b90      	ldr	r3, [pc, #576]	; (8007838 <_dtoa_r+0x6b0>)
 80075f8:	f7fa fa78 	bl	8001aec <__aeabi_dsub>
 80075fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007600:	0004      	movs	r4, r0
 8007602:	000d      	movs	r5, r1
 8007604:	f7f8 ff3a 	bl	800047c <__aeabi_dcmpgt>
 8007608:	2800      	cmp	r0, #0
 800760a:	d000      	beq.n	800760e <_dtoa_r+0x486>
 800760c:	e2b5      	b.n	8007b7a <_dtoa_r+0x9f2>
 800760e:	488b      	ldr	r0, [pc, #556]	; (800783c <_dtoa_r+0x6b4>)
 8007610:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007612:	4684      	mov	ip, r0
 8007614:	4461      	add	r1, ip
 8007616:	000b      	movs	r3, r1
 8007618:	0020      	movs	r0, r4
 800761a:	0029      	movs	r1, r5
 800761c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800761e:	f7f8 ff19 	bl	8000454 <__aeabi_dcmplt>
 8007622:	2800      	cmp	r0, #0
 8007624:	d000      	beq.n	8007628 <_dtoa_r+0x4a0>
 8007626:	e2a5      	b.n	8007b74 <_dtoa_r+0x9ec>
 8007628:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800762a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800762c:	930a      	str	r3, [sp, #40]	; 0x28
 800762e:	940b      	str	r4, [sp, #44]	; 0x2c
 8007630:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007632:	2b00      	cmp	r3, #0
 8007634:	da00      	bge.n	8007638 <_dtoa_r+0x4b0>
 8007636:	e171      	b.n	800791c <_dtoa_r+0x794>
 8007638:	9a02      	ldr	r2, [sp, #8]
 800763a:	2a0e      	cmp	r2, #14
 800763c:	dd00      	ble.n	8007640 <_dtoa_r+0x4b8>
 800763e:	e16d      	b.n	800791c <_dtoa_r+0x794>
 8007640:	4b77      	ldr	r3, [pc, #476]	; (8007820 <_dtoa_r+0x698>)
 8007642:	00d2      	lsls	r2, r2, #3
 8007644:	189b      	adds	r3, r3, r2
 8007646:	685c      	ldr	r4, [r3, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	9308      	str	r3, [sp, #32]
 800764c:	9409      	str	r4, [sp, #36]	; 0x24
 800764e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007650:	2b00      	cmp	r3, #0
 8007652:	db00      	blt.n	8007656 <_dtoa_r+0x4ce>
 8007654:	e0f6      	b.n	8007844 <_dtoa_r+0x6bc>
 8007656:	9b06      	ldr	r3, [sp, #24]
 8007658:	2b00      	cmp	r3, #0
 800765a:	dd00      	ble.n	800765e <_dtoa_r+0x4d6>
 800765c:	e0f2      	b.n	8007844 <_dtoa_r+0x6bc>
 800765e:	d000      	beq.n	8007662 <_dtoa_r+0x4da>
 8007660:	e288      	b.n	8007b74 <_dtoa_r+0x9ec>
 8007662:	9808      	ldr	r0, [sp, #32]
 8007664:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007666:	2200      	movs	r2, #0
 8007668:	4b73      	ldr	r3, [pc, #460]	; (8007838 <_dtoa_r+0x6b0>)
 800766a:	f7f9 ffd3 	bl	8001614 <__aeabi_dmul>
 800766e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007672:	f7f8 ff0d 	bl	8000490 <__aeabi_dcmpge>
 8007676:	9e06      	ldr	r6, [sp, #24]
 8007678:	0035      	movs	r5, r6
 800767a:	2800      	cmp	r0, #0
 800767c:	d000      	beq.n	8007680 <_dtoa_r+0x4f8>
 800767e:	e25f      	b.n	8007b40 <_dtoa_r+0x9b8>
 8007680:	9b05      	ldr	r3, [sp, #20]
 8007682:	9a05      	ldr	r2, [sp, #20]
 8007684:	3301      	adds	r3, #1
 8007686:	9307      	str	r3, [sp, #28]
 8007688:	2331      	movs	r3, #49	; 0x31
 800768a:	7013      	strb	r3, [r2, #0]
 800768c:	9b02      	ldr	r3, [sp, #8]
 800768e:	3301      	adds	r3, #1
 8007690:	9302      	str	r3, [sp, #8]
 8007692:	e25a      	b.n	8007b4a <_dtoa_r+0x9c2>
 8007694:	4234      	tst	r4, r6
 8007696:	d007      	beq.n	80076a8 <_dtoa_r+0x520>
 8007698:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800769a:	3301      	adds	r3, #1
 800769c:	9310      	str	r3, [sp, #64]	; 0x40
 800769e:	682a      	ldr	r2, [r5, #0]
 80076a0:	686b      	ldr	r3, [r5, #4]
 80076a2:	f7f9 ffb7 	bl	8001614 <__aeabi_dmul>
 80076a6:	0033      	movs	r3, r6
 80076a8:	1064      	asrs	r4, r4, #1
 80076aa:	3508      	adds	r5, #8
 80076ac:	e75a      	b.n	8007564 <_dtoa_r+0x3dc>
 80076ae:	9e02      	ldr	r6, [sp, #8]
 80076b0:	9b06      	ldr	r3, [sp, #24]
 80076b2:	e780      	b.n	80075b6 <_dtoa_r+0x42e>
 80076b4:	9b07      	ldr	r3, [sp, #28]
 80076b6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80076b8:	1e5a      	subs	r2, r3, #1
 80076ba:	4b59      	ldr	r3, [pc, #356]	; (8007820 <_dtoa_r+0x698>)
 80076bc:	00d2      	lsls	r2, r2, #3
 80076be:	189b      	adds	r3, r3, r2
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	2900      	cmp	r1, #0
 80076c6:	d051      	beq.n	800776c <_dtoa_r+0x5e4>
 80076c8:	2000      	movs	r0, #0
 80076ca:	495d      	ldr	r1, [pc, #372]	; (8007840 <_dtoa_r+0x6b8>)
 80076cc:	f7f9 fb9c 	bl	8000e08 <__aeabi_ddiv>
 80076d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076d4:	f7fa fa0a 	bl	8001aec <__aeabi_dsub>
 80076d8:	9a05      	ldr	r2, [sp, #20]
 80076da:	9b05      	ldr	r3, [sp, #20]
 80076dc:	4694      	mov	ip, r2
 80076de:	9310      	str	r3, [sp, #64]	; 0x40
 80076e0:	9b07      	ldr	r3, [sp, #28]
 80076e2:	900a      	str	r0, [sp, #40]	; 0x28
 80076e4:	910b      	str	r1, [sp, #44]	; 0x2c
 80076e6:	4463      	add	r3, ip
 80076e8:	9319      	str	r3, [sp, #100]	; 0x64
 80076ea:	0029      	movs	r1, r5
 80076ec:	0020      	movs	r0, r4
 80076ee:	f7fa fdad 	bl	800224c <__aeabi_d2iz>
 80076f2:	9017      	str	r0, [sp, #92]	; 0x5c
 80076f4:	f7fa fde0 	bl	80022b8 <__aeabi_i2d>
 80076f8:	0002      	movs	r2, r0
 80076fa:	000b      	movs	r3, r1
 80076fc:	0020      	movs	r0, r4
 80076fe:	0029      	movs	r1, r5
 8007700:	f7fa f9f4 	bl	8001aec <__aeabi_dsub>
 8007704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007706:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007708:	3301      	adds	r3, #1
 800770a:	9307      	str	r3, [sp, #28]
 800770c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800770e:	0004      	movs	r4, r0
 8007710:	3330      	adds	r3, #48	; 0x30
 8007712:	7013      	strb	r3, [r2, #0]
 8007714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007716:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007718:	000d      	movs	r5, r1
 800771a:	f7f8 fe9b 	bl	8000454 <__aeabi_dcmplt>
 800771e:	2800      	cmp	r0, #0
 8007720:	d175      	bne.n	800780e <_dtoa_r+0x686>
 8007722:	0022      	movs	r2, r4
 8007724:	002b      	movs	r3, r5
 8007726:	2000      	movs	r0, #0
 8007728:	493f      	ldr	r1, [pc, #252]	; (8007828 <_dtoa_r+0x6a0>)
 800772a:	f7fa f9df 	bl	8001aec <__aeabi_dsub>
 800772e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007732:	f7f8 fe8f 	bl	8000454 <__aeabi_dcmplt>
 8007736:	2800      	cmp	r0, #0
 8007738:	d000      	beq.n	800773c <_dtoa_r+0x5b4>
 800773a:	e0d1      	b.n	80078e0 <_dtoa_r+0x758>
 800773c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800773e:	9a07      	ldr	r2, [sp, #28]
 8007740:	4293      	cmp	r3, r2
 8007742:	d100      	bne.n	8007746 <_dtoa_r+0x5be>
 8007744:	e770      	b.n	8007628 <_dtoa_r+0x4a0>
 8007746:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007748:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800774a:	2200      	movs	r2, #0
 800774c:	4b37      	ldr	r3, [pc, #220]	; (800782c <_dtoa_r+0x6a4>)
 800774e:	f7f9 ff61 	bl	8001614 <__aeabi_dmul>
 8007752:	4b36      	ldr	r3, [pc, #216]	; (800782c <_dtoa_r+0x6a4>)
 8007754:	900a      	str	r0, [sp, #40]	; 0x28
 8007756:	910b      	str	r1, [sp, #44]	; 0x2c
 8007758:	2200      	movs	r2, #0
 800775a:	0020      	movs	r0, r4
 800775c:	0029      	movs	r1, r5
 800775e:	f7f9 ff59 	bl	8001614 <__aeabi_dmul>
 8007762:	9b07      	ldr	r3, [sp, #28]
 8007764:	0004      	movs	r4, r0
 8007766:	000d      	movs	r5, r1
 8007768:	9310      	str	r3, [sp, #64]	; 0x40
 800776a:	e7be      	b.n	80076ea <_dtoa_r+0x562>
 800776c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800776e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007770:	f7f9 ff50 	bl	8001614 <__aeabi_dmul>
 8007774:	9a05      	ldr	r2, [sp, #20]
 8007776:	9b05      	ldr	r3, [sp, #20]
 8007778:	4694      	mov	ip, r2
 800777a:	930a      	str	r3, [sp, #40]	; 0x28
 800777c:	9b07      	ldr	r3, [sp, #28]
 800777e:	9010      	str	r0, [sp, #64]	; 0x40
 8007780:	9111      	str	r1, [sp, #68]	; 0x44
 8007782:	4463      	add	r3, ip
 8007784:	9319      	str	r3, [sp, #100]	; 0x64
 8007786:	0029      	movs	r1, r5
 8007788:	0020      	movs	r0, r4
 800778a:	f7fa fd5f 	bl	800224c <__aeabi_d2iz>
 800778e:	9017      	str	r0, [sp, #92]	; 0x5c
 8007790:	f7fa fd92 	bl	80022b8 <__aeabi_i2d>
 8007794:	0002      	movs	r2, r0
 8007796:	000b      	movs	r3, r1
 8007798:	0020      	movs	r0, r4
 800779a:	0029      	movs	r1, r5
 800779c:	f7fa f9a6 	bl	8001aec <__aeabi_dsub>
 80077a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077a4:	3330      	adds	r3, #48	; 0x30
 80077a6:	7013      	strb	r3, [r2, #0]
 80077a8:	0013      	movs	r3, r2
 80077aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80077ac:	3301      	adds	r3, #1
 80077ae:	0004      	movs	r4, r0
 80077b0:	000d      	movs	r5, r1
 80077b2:	930a      	str	r3, [sp, #40]	; 0x28
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d12c      	bne.n	8007812 <_dtoa_r+0x68a>
 80077b8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80077ba:	9911      	ldr	r1, [sp, #68]	; 0x44
 80077bc:	9a05      	ldr	r2, [sp, #20]
 80077be:	9b07      	ldr	r3, [sp, #28]
 80077c0:	4694      	mov	ip, r2
 80077c2:	4463      	add	r3, ip
 80077c4:	2200      	movs	r2, #0
 80077c6:	9307      	str	r3, [sp, #28]
 80077c8:	4b1d      	ldr	r3, [pc, #116]	; (8007840 <_dtoa_r+0x6b8>)
 80077ca:	f7f8 ffb3 	bl	8000734 <__aeabi_dadd>
 80077ce:	0002      	movs	r2, r0
 80077d0:	000b      	movs	r3, r1
 80077d2:	0020      	movs	r0, r4
 80077d4:	0029      	movs	r1, r5
 80077d6:	f7f8 fe51 	bl	800047c <__aeabi_dcmpgt>
 80077da:	2800      	cmp	r0, #0
 80077dc:	d000      	beq.n	80077e0 <_dtoa_r+0x658>
 80077de:	e07f      	b.n	80078e0 <_dtoa_r+0x758>
 80077e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077e4:	2000      	movs	r0, #0
 80077e6:	4916      	ldr	r1, [pc, #88]	; (8007840 <_dtoa_r+0x6b8>)
 80077e8:	f7fa f980 	bl	8001aec <__aeabi_dsub>
 80077ec:	0002      	movs	r2, r0
 80077ee:	000b      	movs	r3, r1
 80077f0:	0020      	movs	r0, r4
 80077f2:	0029      	movs	r1, r5
 80077f4:	f7f8 fe2e 	bl	8000454 <__aeabi_dcmplt>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	d100      	bne.n	80077fe <_dtoa_r+0x676>
 80077fc:	e714      	b.n	8007628 <_dtoa_r+0x4a0>
 80077fe:	9b07      	ldr	r3, [sp, #28]
 8007800:	001a      	movs	r2, r3
 8007802:	3a01      	subs	r2, #1
 8007804:	9207      	str	r2, [sp, #28]
 8007806:	7812      	ldrb	r2, [r2, #0]
 8007808:	2a30      	cmp	r2, #48	; 0x30
 800780a:	d0f8      	beq.n	80077fe <_dtoa_r+0x676>
 800780c:	9307      	str	r3, [sp, #28]
 800780e:	9602      	str	r6, [sp, #8]
 8007810:	e054      	b.n	80078bc <_dtoa_r+0x734>
 8007812:	2200      	movs	r2, #0
 8007814:	4b05      	ldr	r3, [pc, #20]	; (800782c <_dtoa_r+0x6a4>)
 8007816:	f7f9 fefd 	bl	8001614 <__aeabi_dmul>
 800781a:	0004      	movs	r4, r0
 800781c:	000d      	movs	r5, r1
 800781e:	e7b2      	b.n	8007786 <_dtoa_r+0x5fe>
 8007820:	08009eb0 	.word	0x08009eb0
 8007824:	08009e88 	.word	0x08009e88
 8007828:	3ff00000 	.word	0x3ff00000
 800782c:	40240000 	.word	0x40240000
 8007830:	401c0000 	.word	0x401c0000
 8007834:	fcc00000 	.word	0xfcc00000
 8007838:	40140000 	.word	0x40140000
 800783c:	7cc00000 	.word	0x7cc00000
 8007840:	3fe00000 	.word	0x3fe00000
 8007844:	9b06      	ldr	r3, [sp, #24]
 8007846:	9e05      	ldr	r6, [sp, #20]
 8007848:	3b01      	subs	r3, #1
 800784a:	199b      	adds	r3, r3, r6
 800784c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800784e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007850:	930a      	str	r3, [sp, #40]	; 0x28
 8007852:	9a08      	ldr	r2, [sp, #32]
 8007854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007856:	0020      	movs	r0, r4
 8007858:	0029      	movs	r1, r5
 800785a:	f7f9 fad5 	bl	8000e08 <__aeabi_ddiv>
 800785e:	f7fa fcf5 	bl	800224c <__aeabi_d2iz>
 8007862:	9006      	str	r0, [sp, #24]
 8007864:	f7fa fd28 	bl	80022b8 <__aeabi_i2d>
 8007868:	9a08      	ldr	r2, [sp, #32]
 800786a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800786c:	f7f9 fed2 	bl	8001614 <__aeabi_dmul>
 8007870:	0002      	movs	r2, r0
 8007872:	000b      	movs	r3, r1
 8007874:	0020      	movs	r0, r4
 8007876:	0029      	movs	r1, r5
 8007878:	f7fa f938 	bl	8001aec <__aeabi_dsub>
 800787c:	0033      	movs	r3, r6
 800787e:	9a06      	ldr	r2, [sp, #24]
 8007880:	3601      	adds	r6, #1
 8007882:	3230      	adds	r2, #48	; 0x30
 8007884:	701a      	strb	r2, [r3, #0]
 8007886:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007888:	9607      	str	r6, [sp, #28]
 800788a:	429a      	cmp	r2, r3
 800788c:	d139      	bne.n	8007902 <_dtoa_r+0x77a>
 800788e:	0002      	movs	r2, r0
 8007890:	000b      	movs	r3, r1
 8007892:	f7f8 ff4f 	bl	8000734 <__aeabi_dadd>
 8007896:	9a08      	ldr	r2, [sp, #32]
 8007898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800789a:	0004      	movs	r4, r0
 800789c:	000d      	movs	r5, r1
 800789e:	f7f8 fded 	bl	800047c <__aeabi_dcmpgt>
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d11b      	bne.n	80078de <_dtoa_r+0x756>
 80078a6:	9a08      	ldr	r2, [sp, #32]
 80078a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078aa:	0020      	movs	r0, r4
 80078ac:	0029      	movs	r1, r5
 80078ae:	f7f8 fdcb 	bl	8000448 <__aeabi_dcmpeq>
 80078b2:	2800      	cmp	r0, #0
 80078b4:	d002      	beq.n	80078bc <_dtoa_r+0x734>
 80078b6:	9b06      	ldr	r3, [sp, #24]
 80078b8:	07db      	lsls	r3, r3, #31
 80078ba:	d410      	bmi.n	80078de <_dtoa_r+0x756>
 80078bc:	0038      	movs	r0, r7
 80078be:	9904      	ldr	r1, [sp, #16]
 80078c0:	f000 fade 	bl	8007e80 <_Bfree>
 80078c4:	2300      	movs	r3, #0
 80078c6:	9a07      	ldr	r2, [sp, #28]
 80078c8:	9802      	ldr	r0, [sp, #8]
 80078ca:	7013      	strb	r3, [r2, #0]
 80078cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80078ce:	3001      	adds	r0, #1
 80078d0:	6018      	str	r0, [r3, #0]
 80078d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d100      	bne.n	80078da <_dtoa_r+0x752>
 80078d8:	e4a3      	b.n	8007222 <_dtoa_r+0x9a>
 80078da:	601a      	str	r2, [r3, #0]
 80078dc:	e4a1      	b.n	8007222 <_dtoa_r+0x9a>
 80078de:	9e02      	ldr	r6, [sp, #8]
 80078e0:	9b07      	ldr	r3, [sp, #28]
 80078e2:	9307      	str	r3, [sp, #28]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	781a      	ldrb	r2, [r3, #0]
 80078e8:	2a39      	cmp	r2, #57	; 0x39
 80078ea:	d106      	bne.n	80078fa <_dtoa_r+0x772>
 80078ec:	9a05      	ldr	r2, [sp, #20]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d1f7      	bne.n	80078e2 <_dtoa_r+0x75a>
 80078f2:	2230      	movs	r2, #48	; 0x30
 80078f4:	9905      	ldr	r1, [sp, #20]
 80078f6:	3601      	adds	r6, #1
 80078f8:	700a      	strb	r2, [r1, #0]
 80078fa:	781a      	ldrb	r2, [r3, #0]
 80078fc:	3201      	adds	r2, #1
 80078fe:	701a      	strb	r2, [r3, #0]
 8007900:	e785      	b.n	800780e <_dtoa_r+0x686>
 8007902:	2200      	movs	r2, #0
 8007904:	4bad      	ldr	r3, [pc, #692]	; (8007bbc <_dtoa_r+0xa34>)
 8007906:	f7f9 fe85 	bl	8001614 <__aeabi_dmul>
 800790a:	2200      	movs	r2, #0
 800790c:	2300      	movs	r3, #0
 800790e:	0004      	movs	r4, r0
 8007910:	000d      	movs	r5, r1
 8007912:	f7f8 fd99 	bl	8000448 <__aeabi_dcmpeq>
 8007916:	2800      	cmp	r0, #0
 8007918:	d09b      	beq.n	8007852 <_dtoa_r+0x6ca>
 800791a:	e7cf      	b.n	80078bc <_dtoa_r+0x734>
 800791c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800791e:	2a00      	cmp	r2, #0
 8007920:	d100      	bne.n	8007924 <_dtoa_r+0x79c>
 8007922:	e082      	b.n	8007a2a <_dtoa_r+0x8a2>
 8007924:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007926:	2a01      	cmp	r2, #1
 8007928:	dc66      	bgt.n	80079f8 <_dtoa_r+0x870>
 800792a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800792c:	2a00      	cmp	r2, #0
 800792e:	d05f      	beq.n	80079f0 <_dtoa_r+0x868>
 8007930:	4aa3      	ldr	r2, [pc, #652]	; (8007bc0 <_dtoa_r+0xa38>)
 8007932:	189b      	adds	r3, r3, r2
 8007934:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007936:	9c08      	ldr	r4, [sp, #32]
 8007938:	9a08      	ldr	r2, [sp, #32]
 800793a:	2101      	movs	r1, #1
 800793c:	18d2      	adds	r2, r2, r3
 800793e:	9208      	str	r2, [sp, #32]
 8007940:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007942:	0038      	movs	r0, r7
 8007944:	18d3      	adds	r3, r2, r3
 8007946:	930d      	str	r3, [sp, #52]	; 0x34
 8007948:	f000 fb4a 	bl	8007fe0 <__i2b>
 800794c:	0005      	movs	r5, r0
 800794e:	2c00      	cmp	r4, #0
 8007950:	dd0e      	ble.n	8007970 <_dtoa_r+0x7e8>
 8007952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007954:	2b00      	cmp	r3, #0
 8007956:	dd0b      	ble.n	8007970 <_dtoa_r+0x7e8>
 8007958:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800795a:	0023      	movs	r3, r4
 800795c:	4294      	cmp	r4, r2
 800795e:	dd00      	ble.n	8007962 <_dtoa_r+0x7da>
 8007960:	0013      	movs	r3, r2
 8007962:	9a08      	ldr	r2, [sp, #32]
 8007964:	1ae4      	subs	r4, r4, r3
 8007966:	1ad2      	subs	r2, r2, r3
 8007968:	9208      	str	r2, [sp, #32]
 800796a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	930d      	str	r3, [sp, #52]	; 0x34
 8007970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007972:	2b00      	cmp	r3, #0
 8007974:	d01f      	beq.n	80079b6 <_dtoa_r+0x82e>
 8007976:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007978:	2b00      	cmp	r3, #0
 800797a:	d05a      	beq.n	8007a32 <_dtoa_r+0x8aa>
 800797c:	2e00      	cmp	r6, #0
 800797e:	dd11      	ble.n	80079a4 <_dtoa_r+0x81c>
 8007980:	0029      	movs	r1, r5
 8007982:	0032      	movs	r2, r6
 8007984:	0038      	movs	r0, r7
 8007986:	f000 fbf1 	bl	800816c <__pow5mult>
 800798a:	9a04      	ldr	r2, [sp, #16]
 800798c:	0001      	movs	r1, r0
 800798e:	0005      	movs	r5, r0
 8007990:	0038      	movs	r0, r7
 8007992:	f000 fb3b 	bl	800800c <__multiply>
 8007996:	9904      	ldr	r1, [sp, #16]
 8007998:	9007      	str	r0, [sp, #28]
 800799a:	0038      	movs	r0, r7
 800799c:	f000 fa70 	bl	8007e80 <_Bfree>
 80079a0:	9b07      	ldr	r3, [sp, #28]
 80079a2:	9304      	str	r3, [sp, #16]
 80079a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079a6:	1b9a      	subs	r2, r3, r6
 80079a8:	42b3      	cmp	r3, r6
 80079aa:	d004      	beq.n	80079b6 <_dtoa_r+0x82e>
 80079ac:	0038      	movs	r0, r7
 80079ae:	9904      	ldr	r1, [sp, #16]
 80079b0:	f000 fbdc 	bl	800816c <__pow5mult>
 80079b4:	9004      	str	r0, [sp, #16]
 80079b6:	2101      	movs	r1, #1
 80079b8:	0038      	movs	r0, r7
 80079ba:	f000 fb11 	bl	8007fe0 <__i2b>
 80079be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079c0:	0006      	movs	r6, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	dd37      	ble.n	8007a36 <_dtoa_r+0x8ae>
 80079c6:	001a      	movs	r2, r3
 80079c8:	0001      	movs	r1, r0
 80079ca:	0038      	movs	r0, r7
 80079cc:	f000 fbce 	bl	800816c <__pow5mult>
 80079d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079d2:	0006      	movs	r6, r0
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	dd33      	ble.n	8007a40 <_dtoa_r+0x8b8>
 80079d8:	2300      	movs	r3, #0
 80079da:	9307      	str	r3, [sp, #28]
 80079dc:	6933      	ldr	r3, [r6, #16]
 80079de:	3303      	adds	r3, #3
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	18f3      	adds	r3, r6, r3
 80079e4:	6858      	ldr	r0, [r3, #4]
 80079e6:	f000 fab3 	bl	8007f50 <__hi0bits>
 80079ea:	2320      	movs	r3, #32
 80079ec:	1a18      	subs	r0, r3, r0
 80079ee:	e03f      	b.n	8007a70 <_dtoa_r+0x8e8>
 80079f0:	2336      	movs	r3, #54	; 0x36
 80079f2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80079f4:	1a9b      	subs	r3, r3, r2
 80079f6:	e79d      	b.n	8007934 <_dtoa_r+0x7ac>
 80079f8:	9b06      	ldr	r3, [sp, #24]
 80079fa:	1e5e      	subs	r6, r3, #1
 80079fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079fe:	42b3      	cmp	r3, r6
 8007a00:	db08      	blt.n	8007a14 <_dtoa_r+0x88c>
 8007a02:	1b9e      	subs	r6, r3, r6
 8007a04:	9b06      	ldr	r3, [sp, #24]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	da0c      	bge.n	8007a24 <_dtoa_r+0x89c>
 8007a0a:	9b08      	ldr	r3, [sp, #32]
 8007a0c:	9a06      	ldr	r2, [sp, #24]
 8007a0e:	1a9c      	subs	r4, r3, r2
 8007a10:	2300      	movs	r3, #0
 8007a12:	e791      	b.n	8007938 <_dtoa_r+0x7b0>
 8007a14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a16:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a18:	1af3      	subs	r3, r6, r3
 8007a1a:	18d3      	adds	r3, r2, r3
 8007a1c:	960e      	str	r6, [sp, #56]	; 0x38
 8007a1e:	9314      	str	r3, [sp, #80]	; 0x50
 8007a20:	2600      	movs	r6, #0
 8007a22:	e7ef      	b.n	8007a04 <_dtoa_r+0x87c>
 8007a24:	9c08      	ldr	r4, [sp, #32]
 8007a26:	9b06      	ldr	r3, [sp, #24]
 8007a28:	e786      	b.n	8007938 <_dtoa_r+0x7b0>
 8007a2a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007a2c:	9c08      	ldr	r4, [sp, #32]
 8007a2e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a30:	e78d      	b.n	800794e <_dtoa_r+0x7c6>
 8007a32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a34:	e7ba      	b.n	80079ac <_dtoa_r+0x824>
 8007a36:	2300      	movs	r3, #0
 8007a38:	9307      	str	r3, [sp, #28]
 8007a3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	dc13      	bgt.n	8007a68 <_dtoa_r+0x8e0>
 8007a40:	2300      	movs	r3, #0
 8007a42:	9307      	str	r3, [sp, #28]
 8007a44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d10e      	bne.n	8007a68 <_dtoa_r+0x8e0>
 8007a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a4c:	031b      	lsls	r3, r3, #12
 8007a4e:	d10b      	bne.n	8007a68 <_dtoa_r+0x8e0>
 8007a50:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007a52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a54:	4213      	tst	r3, r2
 8007a56:	d007      	beq.n	8007a68 <_dtoa_r+0x8e0>
 8007a58:	9b08      	ldr	r3, [sp, #32]
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	9308      	str	r3, [sp, #32]
 8007a5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a60:	3301      	adds	r3, #1
 8007a62:	930d      	str	r3, [sp, #52]	; 0x34
 8007a64:	2301      	movs	r3, #1
 8007a66:	9307      	str	r3, [sp, #28]
 8007a68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007a6a:	2001      	movs	r0, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1b5      	bne.n	80079dc <_dtoa_r+0x854>
 8007a70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a72:	221f      	movs	r2, #31
 8007a74:	1818      	adds	r0, r3, r0
 8007a76:	0003      	movs	r3, r0
 8007a78:	4013      	ands	r3, r2
 8007a7a:	4210      	tst	r0, r2
 8007a7c:	d046      	beq.n	8007b0c <_dtoa_r+0x984>
 8007a7e:	3201      	adds	r2, #1
 8007a80:	1ad2      	subs	r2, r2, r3
 8007a82:	2a04      	cmp	r2, #4
 8007a84:	dd3f      	ble.n	8007b06 <_dtoa_r+0x97e>
 8007a86:	221c      	movs	r2, #28
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	9a08      	ldr	r2, [sp, #32]
 8007a8c:	18e4      	adds	r4, r4, r3
 8007a8e:	18d2      	adds	r2, r2, r3
 8007a90:	9208      	str	r2, [sp, #32]
 8007a92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a94:	18d3      	adds	r3, r2, r3
 8007a96:	930d      	str	r3, [sp, #52]	; 0x34
 8007a98:	9b08      	ldr	r3, [sp, #32]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	dd05      	ble.n	8007aaa <_dtoa_r+0x922>
 8007a9e:	001a      	movs	r2, r3
 8007aa0:	0038      	movs	r0, r7
 8007aa2:	9904      	ldr	r1, [sp, #16]
 8007aa4:	f000 fbbe 	bl	8008224 <__lshift>
 8007aa8:	9004      	str	r0, [sp, #16]
 8007aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	dd05      	ble.n	8007abc <_dtoa_r+0x934>
 8007ab0:	0031      	movs	r1, r6
 8007ab2:	001a      	movs	r2, r3
 8007ab4:	0038      	movs	r0, r7
 8007ab6:	f000 fbb5 	bl	8008224 <__lshift>
 8007aba:	0006      	movs	r6, r0
 8007abc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d026      	beq.n	8007b10 <_dtoa_r+0x988>
 8007ac2:	0031      	movs	r1, r6
 8007ac4:	9804      	ldr	r0, [sp, #16]
 8007ac6:	f000 fc1d 	bl	8008304 <__mcmp>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	da20      	bge.n	8007b10 <_dtoa_r+0x988>
 8007ace:	9b02      	ldr	r3, [sp, #8]
 8007ad0:	220a      	movs	r2, #10
 8007ad2:	3b01      	subs	r3, #1
 8007ad4:	9302      	str	r3, [sp, #8]
 8007ad6:	0038      	movs	r0, r7
 8007ad8:	2300      	movs	r3, #0
 8007ada:	9904      	ldr	r1, [sp, #16]
 8007adc:	f000 f9f4 	bl	8007ec8 <__multadd>
 8007ae0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ae2:	9004      	str	r0, [sp, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d100      	bne.n	8007aea <_dtoa_r+0x962>
 8007ae8:	e160      	b.n	8007dac <_dtoa_r+0xc24>
 8007aea:	2300      	movs	r3, #0
 8007aec:	0029      	movs	r1, r5
 8007aee:	220a      	movs	r2, #10
 8007af0:	0038      	movs	r0, r7
 8007af2:	f000 f9e9 	bl	8007ec8 <__multadd>
 8007af6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007af8:	0005      	movs	r5, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	dc47      	bgt.n	8007b8e <_dtoa_r+0xa06>
 8007afe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	dc0d      	bgt.n	8007b20 <_dtoa_r+0x998>
 8007b04:	e043      	b.n	8007b8e <_dtoa_r+0xa06>
 8007b06:	2a04      	cmp	r2, #4
 8007b08:	d0c6      	beq.n	8007a98 <_dtoa_r+0x910>
 8007b0a:	0013      	movs	r3, r2
 8007b0c:	331c      	adds	r3, #28
 8007b0e:	e7bc      	b.n	8007a8a <_dtoa_r+0x902>
 8007b10:	9b06      	ldr	r3, [sp, #24]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	dc35      	bgt.n	8007b82 <_dtoa_r+0x9fa>
 8007b16:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	dd32      	ble.n	8007b82 <_dtoa_r+0x9fa>
 8007b1c:	9b06      	ldr	r3, [sp, #24]
 8007b1e:	930c      	str	r3, [sp, #48]	; 0x30
 8007b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10c      	bne.n	8007b40 <_dtoa_r+0x9b8>
 8007b26:	0031      	movs	r1, r6
 8007b28:	2205      	movs	r2, #5
 8007b2a:	0038      	movs	r0, r7
 8007b2c:	f000 f9cc 	bl	8007ec8 <__multadd>
 8007b30:	0006      	movs	r6, r0
 8007b32:	0001      	movs	r1, r0
 8007b34:	9804      	ldr	r0, [sp, #16]
 8007b36:	f000 fbe5 	bl	8008304 <__mcmp>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	dd00      	ble.n	8007b40 <_dtoa_r+0x9b8>
 8007b3e:	e59f      	b.n	8007680 <_dtoa_r+0x4f8>
 8007b40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b42:	43db      	mvns	r3, r3
 8007b44:	9302      	str	r3, [sp, #8]
 8007b46:	9b05      	ldr	r3, [sp, #20]
 8007b48:	9307      	str	r3, [sp, #28]
 8007b4a:	2400      	movs	r4, #0
 8007b4c:	0031      	movs	r1, r6
 8007b4e:	0038      	movs	r0, r7
 8007b50:	f000 f996 	bl	8007e80 <_Bfree>
 8007b54:	2d00      	cmp	r5, #0
 8007b56:	d100      	bne.n	8007b5a <_dtoa_r+0x9d2>
 8007b58:	e6b0      	b.n	80078bc <_dtoa_r+0x734>
 8007b5a:	2c00      	cmp	r4, #0
 8007b5c:	d005      	beq.n	8007b6a <_dtoa_r+0x9e2>
 8007b5e:	42ac      	cmp	r4, r5
 8007b60:	d003      	beq.n	8007b6a <_dtoa_r+0x9e2>
 8007b62:	0021      	movs	r1, r4
 8007b64:	0038      	movs	r0, r7
 8007b66:	f000 f98b 	bl	8007e80 <_Bfree>
 8007b6a:	0029      	movs	r1, r5
 8007b6c:	0038      	movs	r0, r7
 8007b6e:	f000 f987 	bl	8007e80 <_Bfree>
 8007b72:	e6a3      	b.n	80078bc <_dtoa_r+0x734>
 8007b74:	2600      	movs	r6, #0
 8007b76:	0035      	movs	r5, r6
 8007b78:	e7e2      	b.n	8007b40 <_dtoa_r+0x9b8>
 8007b7a:	9602      	str	r6, [sp, #8]
 8007b7c:	9e07      	ldr	r6, [sp, #28]
 8007b7e:	0035      	movs	r5, r6
 8007b80:	e57e      	b.n	8007680 <_dtoa_r+0x4f8>
 8007b82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d100      	bne.n	8007b8a <_dtoa_r+0xa02>
 8007b88:	e0c8      	b.n	8007d1c <_dtoa_r+0xb94>
 8007b8a:	9b06      	ldr	r3, [sp, #24]
 8007b8c:	930c      	str	r3, [sp, #48]	; 0x30
 8007b8e:	2c00      	cmp	r4, #0
 8007b90:	dd05      	ble.n	8007b9e <_dtoa_r+0xa16>
 8007b92:	0029      	movs	r1, r5
 8007b94:	0022      	movs	r2, r4
 8007b96:	0038      	movs	r0, r7
 8007b98:	f000 fb44 	bl	8008224 <__lshift>
 8007b9c:	0005      	movs	r5, r0
 8007b9e:	9b07      	ldr	r3, [sp, #28]
 8007ba0:	0028      	movs	r0, r5
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d01f      	beq.n	8007be6 <_dtoa_r+0xa5e>
 8007ba6:	0038      	movs	r0, r7
 8007ba8:	6869      	ldr	r1, [r5, #4]
 8007baa:	f000 f925 	bl	8007df8 <_Balloc>
 8007bae:	1e04      	subs	r4, r0, #0
 8007bb0:	d10c      	bne.n	8007bcc <_dtoa_r+0xa44>
 8007bb2:	0002      	movs	r2, r0
 8007bb4:	4b03      	ldr	r3, [pc, #12]	; (8007bc4 <_dtoa_r+0xa3c>)
 8007bb6:	4904      	ldr	r1, [pc, #16]	; (8007bc8 <_dtoa_r+0xa40>)
 8007bb8:	f7ff fafb 	bl	80071b2 <_dtoa_r+0x2a>
 8007bbc:	40240000 	.word	0x40240000
 8007bc0:	00000433 	.word	0x00000433
 8007bc4:	08009e13 	.word	0x08009e13
 8007bc8:	000002ea 	.word	0x000002ea
 8007bcc:	0029      	movs	r1, r5
 8007bce:	692b      	ldr	r3, [r5, #16]
 8007bd0:	310c      	adds	r1, #12
 8007bd2:	1c9a      	adds	r2, r3, #2
 8007bd4:	0092      	lsls	r2, r2, #2
 8007bd6:	300c      	adds	r0, #12
 8007bd8:	f7fe fd9e 	bl	8006718 <memcpy>
 8007bdc:	2201      	movs	r2, #1
 8007bde:	0021      	movs	r1, r4
 8007be0:	0038      	movs	r0, r7
 8007be2:	f000 fb1f 	bl	8008224 <__lshift>
 8007be6:	002c      	movs	r4, r5
 8007be8:	0005      	movs	r5, r0
 8007bea:	9b05      	ldr	r3, [sp, #20]
 8007bec:	9308      	str	r3, [sp, #32]
 8007bee:	0031      	movs	r1, r6
 8007bf0:	9804      	ldr	r0, [sp, #16]
 8007bf2:	f7ff fa3d 	bl	8007070 <quorem>
 8007bf6:	0003      	movs	r3, r0
 8007bf8:	0021      	movs	r1, r4
 8007bfa:	3330      	adds	r3, #48	; 0x30
 8007bfc:	900e      	str	r0, [sp, #56]	; 0x38
 8007bfe:	9804      	ldr	r0, [sp, #16]
 8007c00:	9306      	str	r3, [sp, #24]
 8007c02:	f000 fb7f 	bl	8008304 <__mcmp>
 8007c06:	002a      	movs	r2, r5
 8007c08:	900f      	str	r0, [sp, #60]	; 0x3c
 8007c0a:	0031      	movs	r1, r6
 8007c0c:	0038      	movs	r0, r7
 8007c0e:	f000 fb95 	bl	800833c <__mdiff>
 8007c12:	68c3      	ldr	r3, [r0, #12]
 8007c14:	9007      	str	r0, [sp, #28]
 8007c16:	9310      	str	r3, [sp, #64]	; 0x40
 8007c18:	2301      	movs	r3, #1
 8007c1a:	930d      	str	r3, [sp, #52]	; 0x34
 8007c1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d104      	bne.n	8007c2c <_dtoa_r+0xaa4>
 8007c22:	0001      	movs	r1, r0
 8007c24:	9804      	ldr	r0, [sp, #16]
 8007c26:	f000 fb6d 	bl	8008304 <__mcmp>
 8007c2a:	900d      	str	r0, [sp, #52]	; 0x34
 8007c2c:	0038      	movs	r0, r7
 8007c2e:	9907      	ldr	r1, [sp, #28]
 8007c30:	f000 f926 	bl	8007e80 <_Bfree>
 8007c34:	2301      	movs	r3, #1
 8007c36:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007c38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c3a:	4018      	ands	r0, r3
 8007c3c:	9b08      	ldr	r3, [sp, #32]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	9307      	str	r3, [sp, #28]
 8007c42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c44:	4313      	orrs	r3, r2
 8007c46:	4303      	orrs	r3, r0
 8007c48:	d10c      	bne.n	8007c64 <_dtoa_r+0xadc>
 8007c4a:	9b06      	ldr	r3, [sp, #24]
 8007c4c:	2b39      	cmp	r3, #57	; 0x39
 8007c4e:	d025      	beq.n	8007c9c <_dtoa_r+0xb14>
 8007c50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	dd02      	ble.n	8007c5c <_dtoa_r+0xad4>
 8007c56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c58:	3331      	adds	r3, #49	; 0x31
 8007c5a:	9306      	str	r3, [sp, #24]
 8007c5c:	9b08      	ldr	r3, [sp, #32]
 8007c5e:	9a06      	ldr	r2, [sp, #24]
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	e773      	b.n	8007b4c <_dtoa_r+0x9c4>
 8007c64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	db03      	blt.n	8007c72 <_dtoa_r+0xaea>
 8007c6a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	4303      	orrs	r3, r0
 8007c70:	d11f      	bne.n	8007cb2 <_dtoa_r+0xb2a>
 8007c72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	ddf1      	ble.n	8007c5c <_dtoa_r+0xad4>
 8007c78:	9904      	ldr	r1, [sp, #16]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	0038      	movs	r0, r7
 8007c7e:	f000 fad1 	bl	8008224 <__lshift>
 8007c82:	0031      	movs	r1, r6
 8007c84:	9004      	str	r0, [sp, #16]
 8007c86:	f000 fb3d 	bl	8008304 <__mcmp>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	dc03      	bgt.n	8007c96 <_dtoa_r+0xb0e>
 8007c8e:	d1e5      	bne.n	8007c5c <_dtoa_r+0xad4>
 8007c90:	9b06      	ldr	r3, [sp, #24]
 8007c92:	07db      	lsls	r3, r3, #31
 8007c94:	d5e2      	bpl.n	8007c5c <_dtoa_r+0xad4>
 8007c96:	9b06      	ldr	r3, [sp, #24]
 8007c98:	2b39      	cmp	r3, #57	; 0x39
 8007c9a:	d1dc      	bne.n	8007c56 <_dtoa_r+0xace>
 8007c9c:	2339      	movs	r3, #57	; 0x39
 8007c9e:	9a08      	ldr	r2, [sp, #32]
 8007ca0:	7013      	strb	r3, [r2, #0]
 8007ca2:	9b07      	ldr	r3, [sp, #28]
 8007ca4:	9307      	str	r3, [sp, #28]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	781a      	ldrb	r2, [r3, #0]
 8007caa:	2a39      	cmp	r2, #57	; 0x39
 8007cac:	d06c      	beq.n	8007d88 <_dtoa_r+0xc00>
 8007cae:	3201      	adds	r2, #1
 8007cb0:	e7d6      	b.n	8007c60 <_dtoa_r+0xad8>
 8007cb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	dd07      	ble.n	8007cc8 <_dtoa_r+0xb40>
 8007cb8:	9b06      	ldr	r3, [sp, #24]
 8007cba:	2b39      	cmp	r3, #57	; 0x39
 8007cbc:	d0ee      	beq.n	8007c9c <_dtoa_r+0xb14>
 8007cbe:	9b06      	ldr	r3, [sp, #24]
 8007cc0:	9a08      	ldr	r2, [sp, #32]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	7013      	strb	r3, [r2, #0]
 8007cc6:	e741      	b.n	8007b4c <_dtoa_r+0x9c4>
 8007cc8:	9b08      	ldr	r3, [sp, #32]
 8007cca:	9a06      	ldr	r2, [sp, #24]
 8007ccc:	701a      	strb	r2, [r3, #0]
 8007cce:	2301      	movs	r3, #1
 8007cd0:	9a05      	ldr	r2, [sp, #20]
 8007cd2:	1a9b      	subs	r3, r3, r2
 8007cd4:	9a08      	ldr	r2, [sp, #32]
 8007cd6:	189b      	adds	r3, r3, r2
 8007cd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d03e      	beq.n	8007d5c <_dtoa_r+0xbd4>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	220a      	movs	r2, #10
 8007ce2:	9904      	ldr	r1, [sp, #16]
 8007ce4:	0038      	movs	r0, r7
 8007ce6:	f000 f8ef 	bl	8007ec8 <__multadd>
 8007cea:	2300      	movs	r3, #0
 8007cec:	9004      	str	r0, [sp, #16]
 8007cee:	220a      	movs	r2, #10
 8007cf0:	0021      	movs	r1, r4
 8007cf2:	0038      	movs	r0, r7
 8007cf4:	42ac      	cmp	r4, r5
 8007cf6:	d106      	bne.n	8007d06 <_dtoa_r+0xb7e>
 8007cf8:	f000 f8e6 	bl	8007ec8 <__multadd>
 8007cfc:	0004      	movs	r4, r0
 8007cfe:	0005      	movs	r5, r0
 8007d00:	9b07      	ldr	r3, [sp, #28]
 8007d02:	9308      	str	r3, [sp, #32]
 8007d04:	e773      	b.n	8007bee <_dtoa_r+0xa66>
 8007d06:	f000 f8df 	bl	8007ec8 <__multadd>
 8007d0a:	0029      	movs	r1, r5
 8007d0c:	0004      	movs	r4, r0
 8007d0e:	2300      	movs	r3, #0
 8007d10:	220a      	movs	r2, #10
 8007d12:	0038      	movs	r0, r7
 8007d14:	f000 f8d8 	bl	8007ec8 <__multadd>
 8007d18:	0005      	movs	r5, r0
 8007d1a:	e7f1      	b.n	8007d00 <_dtoa_r+0xb78>
 8007d1c:	9b06      	ldr	r3, [sp, #24]
 8007d1e:	930c      	str	r3, [sp, #48]	; 0x30
 8007d20:	2400      	movs	r4, #0
 8007d22:	0031      	movs	r1, r6
 8007d24:	9804      	ldr	r0, [sp, #16]
 8007d26:	f7ff f9a3 	bl	8007070 <quorem>
 8007d2a:	9b05      	ldr	r3, [sp, #20]
 8007d2c:	3030      	adds	r0, #48	; 0x30
 8007d2e:	5518      	strb	r0, [r3, r4]
 8007d30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d32:	3401      	adds	r4, #1
 8007d34:	9006      	str	r0, [sp, #24]
 8007d36:	42a3      	cmp	r3, r4
 8007d38:	dd07      	ble.n	8007d4a <_dtoa_r+0xbc2>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	220a      	movs	r2, #10
 8007d3e:	0038      	movs	r0, r7
 8007d40:	9904      	ldr	r1, [sp, #16]
 8007d42:	f000 f8c1 	bl	8007ec8 <__multadd>
 8007d46:	9004      	str	r0, [sp, #16]
 8007d48:	e7eb      	b.n	8007d22 <_dtoa_r+0xb9a>
 8007d4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d4c:	2001      	movs	r0, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	dd00      	ble.n	8007d54 <_dtoa_r+0xbcc>
 8007d52:	0018      	movs	r0, r3
 8007d54:	2400      	movs	r4, #0
 8007d56:	9b05      	ldr	r3, [sp, #20]
 8007d58:	181b      	adds	r3, r3, r0
 8007d5a:	9307      	str	r3, [sp, #28]
 8007d5c:	9904      	ldr	r1, [sp, #16]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	0038      	movs	r0, r7
 8007d62:	f000 fa5f 	bl	8008224 <__lshift>
 8007d66:	0031      	movs	r1, r6
 8007d68:	9004      	str	r0, [sp, #16]
 8007d6a:	f000 facb 	bl	8008304 <__mcmp>
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	dc97      	bgt.n	8007ca2 <_dtoa_r+0xb1a>
 8007d72:	d102      	bne.n	8007d7a <_dtoa_r+0xbf2>
 8007d74:	9b06      	ldr	r3, [sp, #24]
 8007d76:	07db      	lsls	r3, r3, #31
 8007d78:	d493      	bmi.n	8007ca2 <_dtoa_r+0xb1a>
 8007d7a:	9b07      	ldr	r3, [sp, #28]
 8007d7c:	9307      	str	r3, [sp, #28]
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	781a      	ldrb	r2, [r3, #0]
 8007d82:	2a30      	cmp	r2, #48	; 0x30
 8007d84:	d0fa      	beq.n	8007d7c <_dtoa_r+0xbf4>
 8007d86:	e6e1      	b.n	8007b4c <_dtoa_r+0x9c4>
 8007d88:	9a05      	ldr	r2, [sp, #20]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d18a      	bne.n	8007ca4 <_dtoa_r+0xb1c>
 8007d8e:	9b02      	ldr	r3, [sp, #8]
 8007d90:	3301      	adds	r3, #1
 8007d92:	9302      	str	r3, [sp, #8]
 8007d94:	2331      	movs	r3, #49	; 0x31
 8007d96:	e795      	b.n	8007cc4 <_dtoa_r+0xb3c>
 8007d98:	4b08      	ldr	r3, [pc, #32]	; (8007dbc <_dtoa_r+0xc34>)
 8007d9a:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007d9c:	9305      	str	r3, [sp, #20]
 8007d9e:	4b08      	ldr	r3, [pc, #32]	; (8007dc0 <_dtoa_r+0xc38>)
 8007da0:	2a00      	cmp	r2, #0
 8007da2:	d001      	beq.n	8007da8 <_dtoa_r+0xc20>
 8007da4:	f7ff fa3b 	bl	800721e <_dtoa_r+0x96>
 8007da8:	f7ff fa3b 	bl	8007222 <_dtoa_r+0x9a>
 8007dac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	dcb6      	bgt.n	8007d20 <_dtoa_r+0xb98>
 8007db2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	dd00      	ble.n	8007dba <_dtoa_r+0xc32>
 8007db8:	e6b2      	b.n	8007b20 <_dtoa_r+0x998>
 8007dba:	e7b1      	b.n	8007d20 <_dtoa_r+0xb98>
 8007dbc:	08009d90 	.word	0x08009d90
 8007dc0:	08009d98 	.word	0x08009d98

08007dc4 <_localeconv_r>:
 8007dc4:	4800      	ldr	r0, [pc, #0]	; (8007dc8 <_localeconv_r+0x4>)
 8007dc6:	4770      	bx	lr
 8007dc8:	20000168 	.word	0x20000168

08007dcc <malloc>:
 8007dcc:	b510      	push	{r4, lr}
 8007dce:	4b03      	ldr	r3, [pc, #12]	; (8007ddc <malloc+0x10>)
 8007dd0:	0001      	movs	r1, r0
 8007dd2:	6818      	ldr	r0, [r3, #0]
 8007dd4:	f000 fc06 	bl	80085e4 <_malloc_r>
 8007dd8:	bd10      	pop	{r4, pc}
 8007dda:	46c0      	nop			; (mov r8, r8)
 8007ddc:	20000014 	.word	0x20000014

08007de0 <memchr>:
 8007de0:	b2c9      	uxtb	r1, r1
 8007de2:	1882      	adds	r2, r0, r2
 8007de4:	4290      	cmp	r0, r2
 8007de6:	d101      	bne.n	8007dec <memchr+0xc>
 8007de8:	2000      	movs	r0, #0
 8007dea:	4770      	bx	lr
 8007dec:	7803      	ldrb	r3, [r0, #0]
 8007dee:	428b      	cmp	r3, r1
 8007df0:	d0fb      	beq.n	8007dea <memchr+0xa>
 8007df2:	3001      	adds	r0, #1
 8007df4:	e7f6      	b.n	8007de4 <memchr+0x4>
	...

08007df8 <_Balloc>:
 8007df8:	b570      	push	{r4, r5, r6, lr}
 8007dfa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007dfc:	0006      	movs	r6, r0
 8007dfe:	000c      	movs	r4, r1
 8007e00:	2d00      	cmp	r5, #0
 8007e02:	d10e      	bne.n	8007e22 <_Balloc+0x2a>
 8007e04:	2010      	movs	r0, #16
 8007e06:	f7ff ffe1 	bl	8007dcc <malloc>
 8007e0a:	1e02      	subs	r2, r0, #0
 8007e0c:	6270      	str	r0, [r6, #36]	; 0x24
 8007e0e:	d104      	bne.n	8007e1a <_Balloc+0x22>
 8007e10:	2166      	movs	r1, #102	; 0x66
 8007e12:	4b19      	ldr	r3, [pc, #100]	; (8007e78 <_Balloc+0x80>)
 8007e14:	4819      	ldr	r0, [pc, #100]	; (8007e7c <_Balloc+0x84>)
 8007e16:	f000 fdb7 	bl	8008988 <__assert_func>
 8007e1a:	6045      	str	r5, [r0, #4]
 8007e1c:	6085      	str	r5, [r0, #8]
 8007e1e:	6005      	str	r5, [r0, #0]
 8007e20:	60c5      	str	r5, [r0, #12]
 8007e22:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8007e24:	68eb      	ldr	r3, [r5, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d013      	beq.n	8007e52 <_Balloc+0x5a>
 8007e2a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007e2c:	00a2      	lsls	r2, r4, #2
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	189b      	adds	r3, r3, r2
 8007e32:	6818      	ldr	r0, [r3, #0]
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d118      	bne.n	8007e6a <_Balloc+0x72>
 8007e38:	2101      	movs	r1, #1
 8007e3a:	000d      	movs	r5, r1
 8007e3c:	40a5      	lsls	r5, r4
 8007e3e:	1d6a      	adds	r2, r5, #5
 8007e40:	0030      	movs	r0, r6
 8007e42:	0092      	lsls	r2, r2, #2
 8007e44:	f000 fb76 	bl	8008534 <_calloc_r>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	d00c      	beq.n	8007e66 <_Balloc+0x6e>
 8007e4c:	6044      	str	r4, [r0, #4]
 8007e4e:	6085      	str	r5, [r0, #8]
 8007e50:	e00d      	b.n	8007e6e <_Balloc+0x76>
 8007e52:	2221      	movs	r2, #33	; 0x21
 8007e54:	2104      	movs	r1, #4
 8007e56:	0030      	movs	r0, r6
 8007e58:	f000 fb6c 	bl	8008534 <_calloc_r>
 8007e5c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007e5e:	60e8      	str	r0, [r5, #12]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1e1      	bne.n	8007e2a <_Balloc+0x32>
 8007e66:	2000      	movs	r0, #0
 8007e68:	bd70      	pop	{r4, r5, r6, pc}
 8007e6a:	6802      	ldr	r2, [r0, #0]
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	2300      	movs	r3, #0
 8007e70:	6103      	str	r3, [r0, #16]
 8007e72:	60c3      	str	r3, [r0, #12]
 8007e74:	e7f8      	b.n	8007e68 <_Balloc+0x70>
 8007e76:	46c0      	nop			; (mov r8, r8)
 8007e78:	08009d9d 	.word	0x08009d9d
 8007e7c:	08009e24 	.word	0x08009e24

08007e80 <_Bfree>:
 8007e80:	b570      	push	{r4, r5, r6, lr}
 8007e82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007e84:	0005      	movs	r5, r0
 8007e86:	000c      	movs	r4, r1
 8007e88:	2e00      	cmp	r6, #0
 8007e8a:	d10e      	bne.n	8007eaa <_Bfree+0x2a>
 8007e8c:	2010      	movs	r0, #16
 8007e8e:	f7ff ff9d 	bl	8007dcc <malloc>
 8007e92:	1e02      	subs	r2, r0, #0
 8007e94:	6268      	str	r0, [r5, #36]	; 0x24
 8007e96:	d104      	bne.n	8007ea2 <_Bfree+0x22>
 8007e98:	218a      	movs	r1, #138	; 0x8a
 8007e9a:	4b09      	ldr	r3, [pc, #36]	; (8007ec0 <_Bfree+0x40>)
 8007e9c:	4809      	ldr	r0, [pc, #36]	; (8007ec4 <_Bfree+0x44>)
 8007e9e:	f000 fd73 	bl	8008988 <__assert_func>
 8007ea2:	6046      	str	r6, [r0, #4]
 8007ea4:	6086      	str	r6, [r0, #8]
 8007ea6:	6006      	str	r6, [r0, #0]
 8007ea8:	60c6      	str	r6, [r0, #12]
 8007eaa:	2c00      	cmp	r4, #0
 8007eac:	d007      	beq.n	8007ebe <_Bfree+0x3e>
 8007eae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007eb0:	6862      	ldr	r2, [r4, #4]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	0092      	lsls	r2, r2, #2
 8007eb6:	189b      	adds	r3, r3, r2
 8007eb8:	681a      	ldr	r2, [r3, #0]
 8007eba:	6022      	str	r2, [r4, #0]
 8007ebc:	601c      	str	r4, [r3, #0]
 8007ebe:	bd70      	pop	{r4, r5, r6, pc}
 8007ec0:	08009d9d 	.word	0x08009d9d
 8007ec4:	08009e24 	.word	0x08009e24

08007ec8 <__multadd>:
 8007ec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007eca:	000e      	movs	r6, r1
 8007ecc:	9001      	str	r0, [sp, #4]
 8007ece:	000c      	movs	r4, r1
 8007ed0:	001d      	movs	r5, r3
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	690f      	ldr	r7, [r1, #16]
 8007ed6:	3614      	adds	r6, #20
 8007ed8:	6833      	ldr	r3, [r6, #0]
 8007eda:	3001      	adds	r0, #1
 8007edc:	b299      	uxth	r1, r3
 8007ede:	4351      	muls	r1, r2
 8007ee0:	0c1b      	lsrs	r3, r3, #16
 8007ee2:	4353      	muls	r3, r2
 8007ee4:	1949      	adds	r1, r1, r5
 8007ee6:	0c0d      	lsrs	r5, r1, #16
 8007ee8:	195b      	adds	r3, r3, r5
 8007eea:	0c1d      	lsrs	r5, r3, #16
 8007eec:	b289      	uxth	r1, r1
 8007eee:	041b      	lsls	r3, r3, #16
 8007ef0:	185b      	adds	r3, r3, r1
 8007ef2:	c608      	stmia	r6!, {r3}
 8007ef4:	4287      	cmp	r7, r0
 8007ef6:	dcef      	bgt.n	8007ed8 <__multadd+0x10>
 8007ef8:	2d00      	cmp	r5, #0
 8007efa:	d022      	beq.n	8007f42 <__multadd+0x7a>
 8007efc:	68a3      	ldr	r3, [r4, #8]
 8007efe:	42bb      	cmp	r3, r7
 8007f00:	dc19      	bgt.n	8007f36 <__multadd+0x6e>
 8007f02:	6863      	ldr	r3, [r4, #4]
 8007f04:	9801      	ldr	r0, [sp, #4]
 8007f06:	1c59      	adds	r1, r3, #1
 8007f08:	f7ff ff76 	bl	8007df8 <_Balloc>
 8007f0c:	1e06      	subs	r6, r0, #0
 8007f0e:	d105      	bne.n	8007f1c <__multadd+0x54>
 8007f10:	0002      	movs	r2, r0
 8007f12:	21b5      	movs	r1, #181	; 0xb5
 8007f14:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <__multadd+0x80>)
 8007f16:	480d      	ldr	r0, [pc, #52]	; (8007f4c <__multadd+0x84>)
 8007f18:	f000 fd36 	bl	8008988 <__assert_func>
 8007f1c:	0021      	movs	r1, r4
 8007f1e:	6923      	ldr	r3, [r4, #16]
 8007f20:	310c      	adds	r1, #12
 8007f22:	1c9a      	adds	r2, r3, #2
 8007f24:	0092      	lsls	r2, r2, #2
 8007f26:	300c      	adds	r0, #12
 8007f28:	f7fe fbf6 	bl	8006718 <memcpy>
 8007f2c:	0021      	movs	r1, r4
 8007f2e:	9801      	ldr	r0, [sp, #4]
 8007f30:	f7ff ffa6 	bl	8007e80 <_Bfree>
 8007f34:	0034      	movs	r4, r6
 8007f36:	1d3b      	adds	r3, r7, #4
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	18e3      	adds	r3, r4, r3
 8007f3c:	605d      	str	r5, [r3, #4]
 8007f3e:	1c7b      	adds	r3, r7, #1
 8007f40:	6123      	str	r3, [r4, #16]
 8007f42:	0020      	movs	r0, r4
 8007f44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f46:	46c0      	nop			; (mov r8, r8)
 8007f48:	08009e13 	.word	0x08009e13
 8007f4c:	08009e24 	.word	0x08009e24

08007f50 <__hi0bits>:
 8007f50:	0003      	movs	r3, r0
 8007f52:	0c02      	lsrs	r2, r0, #16
 8007f54:	2000      	movs	r0, #0
 8007f56:	4282      	cmp	r2, r0
 8007f58:	d101      	bne.n	8007f5e <__hi0bits+0xe>
 8007f5a:	041b      	lsls	r3, r3, #16
 8007f5c:	3010      	adds	r0, #16
 8007f5e:	0e1a      	lsrs	r2, r3, #24
 8007f60:	d101      	bne.n	8007f66 <__hi0bits+0x16>
 8007f62:	3008      	adds	r0, #8
 8007f64:	021b      	lsls	r3, r3, #8
 8007f66:	0f1a      	lsrs	r2, r3, #28
 8007f68:	d101      	bne.n	8007f6e <__hi0bits+0x1e>
 8007f6a:	3004      	adds	r0, #4
 8007f6c:	011b      	lsls	r3, r3, #4
 8007f6e:	0f9a      	lsrs	r2, r3, #30
 8007f70:	d101      	bne.n	8007f76 <__hi0bits+0x26>
 8007f72:	3002      	adds	r0, #2
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	db03      	blt.n	8007f82 <__hi0bits+0x32>
 8007f7a:	3001      	adds	r0, #1
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	d400      	bmi.n	8007f82 <__hi0bits+0x32>
 8007f80:	2020      	movs	r0, #32
 8007f82:	4770      	bx	lr

08007f84 <__lo0bits>:
 8007f84:	6803      	ldr	r3, [r0, #0]
 8007f86:	0002      	movs	r2, r0
 8007f88:	2107      	movs	r1, #7
 8007f8a:	0018      	movs	r0, r3
 8007f8c:	4008      	ands	r0, r1
 8007f8e:	420b      	tst	r3, r1
 8007f90:	d00d      	beq.n	8007fae <__lo0bits+0x2a>
 8007f92:	3906      	subs	r1, #6
 8007f94:	2000      	movs	r0, #0
 8007f96:	420b      	tst	r3, r1
 8007f98:	d105      	bne.n	8007fa6 <__lo0bits+0x22>
 8007f9a:	3002      	adds	r0, #2
 8007f9c:	4203      	tst	r3, r0
 8007f9e:	d003      	beq.n	8007fa8 <__lo0bits+0x24>
 8007fa0:	40cb      	lsrs	r3, r1
 8007fa2:	0008      	movs	r0, r1
 8007fa4:	6013      	str	r3, [r2, #0]
 8007fa6:	4770      	bx	lr
 8007fa8:	089b      	lsrs	r3, r3, #2
 8007faa:	6013      	str	r3, [r2, #0]
 8007fac:	e7fb      	b.n	8007fa6 <__lo0bits+0x22>
 8007fae:	b299      	uxth	r1, r3
 8007fb0:	2900      	cmp	r1, #0
 8007fb2:	d101      	bne.n	8007fb8 <__lo0bits+0x34>
 8007fb4:	2010      	movs	r0, #16
 8007fb6:	0c1b      	lsrs	r3, r3, #16
 8007fb8:	b2d9      	uxtb	r1, r3
 8007fba:	2900      	cmp	r1, #0
 8007fbc:	d101      	bne.n	8007fc2 <__lo0bits+0x3e>
 8007fbe:	3008      	adds	r0, #8
 8007fc0:	0a1b      	lsrs	r3, r3, #8
 8007fc2:	0719      	lsls	r1, r3, #28
 8007fc4:	d101      	bne.n	8007fca <__lo0bits+0x46>
 8007fc6:	3004      	adds	r0, #4
 8007fc8:	091b      	lsrs	r3, r3, #4
 8007fca:	0799      	lsls	r1, r3, #30
 8007fcc:	d101      	bne.n	8007fd2 <__lo0bits+0x4e>
 8007fce:	3002      	adds	r0, #2
 8007fd0:	089b      	lsrs	r3, r3, #2
 8007fd2:	07d9      	lsls	r1, r3, #31
 8007fd4:	d4e9      	bmi.n	8007faa <__lo0bits+0x26>
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	085b      	lsrs	r3, r3, #1
 8007fda:	d1e6      	bne.n	8007faa <__lo0bits+0x26>
 8007fdc:	2020      	movs	r0, #32
 8007fde:	e7e2      	b.n	8007fa6 <__lo0bits+0x22>

08007fe0 <__i2b>:
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	000c      	movs	r4, r1
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	f7ff ff07 	bl	8007df8 <_Balloc>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	d106      	bne.n	8007ffc <__i2b+0x1c>
 8007fee:	21a0      	movs	r1, #160	; 0xa0
 8007ff0:	0002      	movs	r2, r0
 8007ff2:	4b04      	ldr	r3, [pc, #16]	; (8008004 <__i2b+0x24>)
 8007ff4:	4804      	ldr	r0, [pc, #16]	; (8008008 <__i2b+0x28>)
 8007ff6:	0049      	lsls	r1, r1, #1
 8007ff8:	f000 fcc6 	bl	8008988 <__assert_func>
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	6144      	str	r4, [r0, #20]
 8008000:	6103      	str	r3, [r0, #16]
 8008002:	bd10      	pop	{r4, pc}
 8008004:	08009e13 	.word	0x08009e13
 8008008:	08009e24 	.word	0x08009e24

0800800c <__multiply>:
 800800c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800800e:	690b      	ldr	r3, [r1, #16]
 8008010:	0014      	movs	r4, r2
 8008012:	6912      	ldr	r2, [r2, #16]
 8008014:	000d      	movs	r5, r1
 8008016:	b089      	sub	sp, #36	; 0x24
 8008018:	4293      	cmp	r3, r2
 800801a:	da01      	bge.n	8008020 <__multiply+0x14>
 800801c:	0025      	movs	r5, r4
 800801e:	000c      	movs	r4, r1
 8008020:	692f      	ldr	r7, [r5, #16]
 8008022:	6926      	ldr	r6, [r4, #16]
 8008024:	6869      	ldr	r1, [r5, #4]
 8008026:	19bb      	adds	r3, r7, r6
 8008028:	9302      	str	r3, [sp, #8]
 800802a:	68ab      	ldr	r3, [r5, #8]
 800802c:	19ba      	adds	r2, r7, r6
 800802e:	4293      	cmp	r3, r2
 8008030:	da00      	bge.n	8008034 <__multiply+0x28>
 8008032:	3101      	adds	r1, #1
 8008034:	f7ff fee0 	bl	8007df8 <_Balloc>
 8008038:	9001      	str	r0, [sp, #4]
 800803a:	2800      	cmp	r0, #0
 800803c:	d106      	bne.n	800804c <__multiply+0x40>
 800803e:	215e      	movs	r1, #94	; 0x5e
 8008040:	0002      	movs	r2, r0
 8008042:	4b48      	ldr	r3, [pc, #288]	; (8008164 <__multiply+0x158>)
 8008044:	4848      	ldr	r0, [pc, #288]	; (8008168 <__multiply+0x15c>)
 8008046:	31ff      	adds	r1, #255	; 0xff
 8008048:	f000 fc9e 	bl	8008988 <__assert_func>
 800804c:	9b01      	ldr	r3, [sp, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	3314      	adds	r3, #20
 8008052:	469c      	mov	ip, r3
 8008054:	19bb      	adds	r3, r7, r6
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4463      	add	r3, ip
 800805a:	9303      	str	r3, [sp, #12]
 800805c:	4663      	mov	r3, ip
 800805e:	9903      	ldr	r1, [sp, #12]
 8008060:	428b      	cmp	r3, r1
 8008062:	d32c      	bcc.n	80080be <__multiply+0xb2>
 8008064:	002b      	movs	r3, r5
 8008066:	0022      	movs	r2, r4
 8008068:	3314      	adds	r3, #20
 800806a:	00bf      	lsls	r7, r7, #2
 800806c:	3214      	adds	r2, #20
 800806e:	9306      	str	r3, [sp, #24]
 8008070:	00b6      	lsls	r6, r6, #2
 8008072:	19db      	adds	r3, r3, r7
 8008074:	9304      	str	r3, [sp, #16]
 8008076:	1993      	adds	r3, r2, r6
 8008078:	9307      	str	r3, [sp, #28]
 800807a:	2304      	movs	r3, #4
 800807c:	9305      	str	r3, [sp, #20]
 800807e:	002b      	movs	r3, r5
 8008080:	9904      	ldr	r1, [sp, #16]
 8008082:	3315      	adds	r3, #21
 8008084:	9200      	str	r2, [sp, #0]
 8008086:	4299      	cmp	r1, r3
 8008088:	d305      	bcc.n	8008096 <__multiply+0x8a>
 800808a:	1b4b      	subs	r3, r1, r5
 800808c:	3b15      	subs	r3, #21
 800808e:	089b      	lsrs	r3, r3, #2
 8008090:	3301      	adds	r3, #1
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	9305      	str	r3, [sp, #20]
 8008096:	9b07      	ldr	r3, [sp, #28]
 8008098:	9a00      	ldr	r2, [sp, #0]
 800809a:	429a      	cmp	r2, r3
 800809c:	d311      	bcc.n	80080c2 <__multiply+0xb6>
 800809e:	9b02      	ldr	r3, [sp, #8]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	dd06      	ble.n	80080b2 <__multiply+0xa6>
 80080a4:	9b03      	ldr	r3, [sp, #12]
 80080a6:	3b04      	subs	r3, #4
 80080a8:	9303      	str	r3, [sp, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d054      	beq.n	800815c <__multiply+0x150>
 80080b2:	9b01      	ldr	r3, [sp, #4]
 80080b4:	9a02      	ldr	r2, [sp, #8]
 80080b6:	0018      	movs	r0, r3
 80080b8:	611a      	str	r2, [r3, #16]
 80080ba:	b009      	add	sp, #36	; 0x24
 80080bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080be:	c304      	stmia	r3!, {r2}
 80080c0:	e7cd      	b.n	800805e <__multiply+0x52>
 80080c2:	9b00      	ldr	r3, [sp, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	b298      	uxth	r0, r3
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d01c      	beq.n	8008106 <__multiply+0xfa>
 80080cc:	4667      	mov	r7, ip
 80080ce:	2400      	movs	r4, #0
 80080d0:	9e06      	ldr	r6, [sp, #24]
 80080d2:	ce02      	ldmia	r6!, {r1}
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	b28b      	uxth	r3, r1
 80080d8:	4343      	muls	r3, r0
 80080da:	0c09      	lsrs	r1, r1, #16
 80080dc:	4341      	muls	r1, r0
 80080de:	b292      	uxth	r2, r2
 80080e0:	189b      	adds	r3, r3, r2
 80080e2:	191b      	adds	r3, r3, r4
 80080e4:	000c      	movs	r4, r1
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	0c11      	lsrs	r1, r2, #16
 80080ea:	1861      	adds	r1, r4, r1
 80080ec:	0c1c      	lsrs	r4, r3, #16
 80080ee:	1909      	adds	r1, r1, r4
 80080f0:	0c0c      	lsrs	r4, r1, #16
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	0409      	lsls	r1, r1, #16
 80080f6:	430b      	orrs	r3, r1
 80080f8:	c708      	stmia	r7!, {r3}
 80080fa:	9b04      	ldr	r3, [sp, #16]
 80080fc:	42b3      	cmp	r3, r6
 80080fe:	d8e8      	bhi.n	80080d2 <__multiply+0xc6>
 8008100:	4663      	mov	r3, ip
 8008102:	9a05      	ldr	r2, [sp, #20]
 8008104:	509c      	str	r4, [r3, r2]
 8008106:	9b00      	ldr	r3, [sp, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	0c1e      	lsrs	r6, r3, #16
 800810c:	d020      	beq.n	8008150 <__multiply+0x144>
 800810e:	4663      	mov	r3, ip
 8008110:	002c      	movs	r4, r5
 8008112:	4660      	mov	r0, ip
 8008114:	2700      	movs	r7, #0
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	3414      	adds	r4, #20
 800811a:	6822      	ldr	r2, [r4, #0]
 800811c:	b29b      	uxth	r3, r3
 800811e:	b291      	uxth	r1, r2
 8008120:	4371      	muls	r1, r6
 8008122:	6802      	ldr	r2, [r0, #0]
 8008124:	0c12      	lsrs	r2, r2, #16
 8008126:	1889      	adds	r1, r1, r2
 8008128:	19cf      	adds	r7, r1, r7
 800812a:	0439      	lsls	r1, r7, #16
 800812c:	430b      	orrs	r3, r1
 800812e:	6003      	str	r3, [r0, #0]
 8008130:	cc02      	ldmia	r4!, {r1}
 8008132:	6843      	ldr	r3, [r0, #4]
 8008134:	0c09      	lsrs	r1, r1, #16
 8008136:	4371      	muls	r1, r6
 8008138:	b29b      	uxth	r3, r3
 800813a:	0c3f      	lsrs	r7, r7, #16
 800813c:	18cb      	adds	r3, r1, r3
 800813e:	9a04      	ldr	r2, [sp, #16]
 8008140:	19db      	adds	r3, r3, r7
 8008142:	0c1f      	lsrs	r7, r3, #16
 8008144:	3004      	adds	r0, #4
 8008146:	42a2      	cmp	r2, r4
 8008148:	d8e7      	bhi.n	800811a <__multiply+0x10e>
 800814a:	4662      	mov	r2, ip
 800814c:	9905      	ldr	r1, [sp, #20]
 800814e:	5053      	str	r3, [r2, r1]
 8008150:	9b00      	ldr	r3, [sp, #0]
 8008152:	3304      	adds	r3, #4
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	2304      	movs	r3, #4
 8008158:	449c      	add	ip, r3
 800815a:	e79c      	b.n	8008096 <__multiply+0x8a>
 800815c:	9b02      	ldr	r3, [sp, #8]
 800815e:	3b01      	subs	r3, #1
 8008160:	9302      	str	r3, [sp, #8]
 8008162:	e79c      	b.n	800809e <__multiply+0x92>
 8008164:	08009e13 	.word	0x08009e13
 8008168:	08009e24 	.word	0x08009e24

0800816c <__pow5mult>:
 800816c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800816e:	2303      	movs	r3, #3
 8008170:	0015      	movs	r5, r2
 8008172:	0007      	movs	r7, r0
 8008174:	000e      	movs	r6, r1
 8008176:	401a      	ands	r2, r3
 8008178:	421d      	tst	r5, r3
 800817a:	d008      	beq.n	800818e <__pow5mult+0x22>
 800817c:	4925      	ldr	r1, [pc, #148]	; (8008214 <__pow5mult+0xa8>)
 800817e:	3a01      	subs	r2, #1
 8008180:	0092      	lsls	r2, r2, #2
 8008182:	5852      	ldr	r2, [r2, r1]
 8008184:	2300      	movs	r3, #0
 8008186:	0031      	movs	r1, r6
 8008188:	f7ff fe9e 	bl	8007ec8 <__multadd>
 800818c:	0006      	movs	r6, r0
 800818e:	10ad      	asrs	r5, r5, #2
 8008190:	d03d      	beq.n	800820e <__pow5mult+0xa2>
 8008192:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008194:	2c00      	cmp	r4, #0
 8008196:	d10f      	bne.n	80081b8 <__pow5mult+0x4c>
 8008198:	2010      	movs	r0, #16
 800819a:	f7ff fe17 	bl	8007dcc <malloc>
 800819e:	1e02      	subs	r2, r0, #0
 80081a0:	6278      	str	r0, [r7, #36]	; 0x24
 80081a2:	d105      	bne.n	80081b0 <__pow5mult+0x44>
 80081a4:	21d7      	movs	r1, #215	; 0xd7
 80081a6:	4b1c      	ldr	r3, [pc, #112]	; (8008218 <__pow5mult+0xac>)
 80081a8:	481c      	ldr	r0, [pc, #112]	; (800821c <__pow5mult+0xb0>)
 80081aa:	0049      	lsls	r1, r1, #1
 80081ac:	f000 fbec 	bl	8008988 <__assert_func>
 80081b0:	6044      	str	r4, [r0, #4]
 80081b2:	6084      	str	r4, [r0, #8]
 80081b4:	6004      	str	r4, [r0, #0]
 80081b6:	60c4      	str	r4, [r0, #12]
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	689c      	ldr	r4, [r3, #8]
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	2c00      	cmp	r4, #0
 80081c0:	d108      	bne.n	80081d4 <__pow5mult+0x68>
 80081c2:	0038      	movs	r0, r7
 80081c4:	4916      	ldr	r1, [pc, #88]	; (8008220 <__pow5mult+0xb4>)
 80081c6:	f7ff ff0b 	bl	8007fe0 <__i2b>
 80081ca:	9b01      	ldr	r3, [sp, #4]
 80081cc:	0004      	movs	r4, r0
 80081ce:	6098      	str	r0, [r3, #8]
 80081d0:	2300      	movs	r3, #0
 80081d2:	6003      	str	r3, [r0, #0]
 80081d4:	2301      	movs	r3, #1
 80081d6:	421d      	tst	r5, r3
 80081d8:	d00a      	beq.n	80081f0 <__pow5mult+0x84>
 80081da:	0031      	movs	r1, r6
 80081dc:	0022      	movs	r2, r4
 80081de:	0038      	movs	r0, r7
 80081e0:	f7ff ff14 	bl	800800c <__multiply>
 80081e4:	0031      	movs	r1, r6
 80081e6:	9001      	str	r0, [sp, #4]
 80081e8:	0038      	movs	r0, r7
 80081ea:	f7ff fe49 	bl	8007e80 <_Bfree>
 80081ee:	9e01      	ldr	r6, [sp, #4]
 80081f0:	106d      	asrs	r5, r5, #1
 80081f2:	d00c      	beq.n	800820e <__pow5mult+0xa2>
 80081f4:	6820      	ldr	r0, [r4, #0]
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d107      	bne.n	800820a <__pow5mult+0x9e>
 80081fa:	0022      	movs	r2, r4
 80081fc:	0021      	movs	r1, r4
 80081fe:	0038      	movs	r0, r7
 8008200:	f7ff ff04 	bl	800800c <__multiply>
 8008204:	2300      	movs	r3, #0
 8008206:	6020      	str	r0, [r4, #0]
 8008208:	6003      	str	r3, [r0, #0]
 800820a:	0004      	movs	r4, r0
 800820c:	e7e2      	b.n	80081d4 <__pow5mult+0x68>
 800820e:	0030      	movs	r0, r6
 8008210:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008212:	46c0      	nop			; (mov r8, r8)
 8008214:	08009f78 	.word	0x08009f78
 8008218:	08009d9d 	.word	0x08009d9d
 800821c:	08009e24 	.word	0x08009e24
 8008220:	00000271 	.word	0x00000271

08008224 <__lshift>:
 8008224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008226:	000c      	movs	r4, r1
 8008228:	0017      	movs	r7, r2
 800822a:	6923      	ldr	r3, [r4, #16]
 800822c:	1155      	asrs	r5, r2, #5
 800822e:	b087      	sub	sp, #28
 8008230:	18eb      	adds	r3, r5, r3
 8008232:	9302      	str	r3, [sp, #8]
 8008234:	3301      	adds	r3, #1
 8008236:	9301      	str	r3, [sp, #4]
 8008238:	6849      	ldr	r1, [r1, #4]
 800823a:	68a3      	ldr	r3, [r4, #8]
 800823c:	9004      	str	r0, [sp, #16]
 800823e:	9a01      	ldr	r2, [sp, #4]
 8008240:	4293      	cmp	r3, r2
 8008242:	db11      	blt.n	8008268 <__lshift+0x44>
 8008244:	9804      	ldr	r0, [sp, #16]
 8008246:	f7ff fdd7 	bl	8007df8 <_Balloc>
 800824a:	0002      	movs	r2, r0
 800824c:	2300      	movs	r3, #0
 800824e:	3214      	adds	r2, #20
 8008250:	0006      	movs	r6, r0
 8008252:	0011      	movs	r1, r2
 8008254:	9203      	str	r2, [sp, #12]
 8008256:	4298      	cmp	r0, r3
 8008258:	d10d      	bne.n	8008276 <__lshift+0x52>
 800825a:	21da      	movs	r1, #218	; 0xda
 800825c:	0002      	movs	r2, r0
 800825e:	4b27      	ldr	r3, [pc, #156]	; (80082fc <__lshift+0xd8>)
 8008260:	4827      	ldr	r0, [pc, #156]	; (8008300 <__lshift+0xdc>)
 8008262:	31ff      	adds	r1, #255	; 0xff
 8008264:	f000 fb90 	bl	8008988 <__assert_func>
 8008268:	3101      	adds	r1, #1
 800826a:	005b      	lsls	r3, r3, #1
 800826c:	e7e7      	b.n	800823e <__lshift+0x1a>
 800826e:	2200      	movs	r2, #0
 8008270:	0098      	lsls	r0, r3, #2
 8008272:	500a      	str	r2, [r1, r0]
 8008274:	3301      	adds	r3, #1
 8008276:	42ab      	cmp	r3, r5
 8008278:	dbf9      	blt.n	800826e <__lshift+0x4a>
 800827a:	43eb      	mvns	r3, r5
 800827c:	17db      	asrs	r3, r3, #31
 800827e:	401d      	ands	r5, r3
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	00ad      	lsls	r5, r5, #2
 8008284:	211f      	movs	r1, #31
 8008286:	0038      	movs	r0, r7
 8008288:	195d      	adds	r5, r3, r5
 800828a:	0023      	movs	r3, r4
 800828c:	6922      	ldr	r2, [r4, #16]
 800828e:	3314      	adds	r3, #20
 8008290:	0092      	lsls	r2, r2, #2
 8008292:	4008      	ands	r0, r1
 8008294:	4684      	mov	ip, r0
 8008296:	189a      	adds	r2, r3, r2
 8008298:	420f      	tst	r7, r1
 800829a:	d02a      	beq.n	80082f2 <__lshift+0xce>
 800829c:	3101      	adds	r1, #1
 800829e:	1a09      	subs	r1, r1, r0
 80082a0:	9105      	str	r1, [sp, #20]
 80082a2:	2100      	movs	r1, #0
 80082a4:	9503      	str	r5, [sp, #12]
 80082a6:	4667      	mov	r7, ip
 80082a8:	6818      	ldr	r0, [r3, #0]
 80082aa:	40b8      	lsls	r0, r7
 80082ac:	4301      	orrs	r1, r0
 80082ae:	9803      	ldr	r0, [sp, #12]
 80082b0:	c002      	stmia	r0!, {r1}
 80082b2:	cb02      	ldmia	r3!, {r1}
 80082b4:	9003      	str	r0, [sp, #12]
 80082b6:	9805      	ldr	r0, [sp, #20]
 80082b8:	40c1      	lsrs	r1, r0
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d8f3      	bhi.n	80082a6 <__lshift+0x82>
 80082be:	0020      	movs	r0, r4
 80082c0:	3015      	adds	r0, #21
 80082c2:	2304      	movs	r3, #4
 80082c4:	4282      	cmp	r2, r0
 80082c6:	d304      	bcc.n	80082d2 <__lshift+0xae>
 80082c8:	1b13      	subs	r3, r2, r4
 80082ca:	3b15      	subs	r3, #21
 80082cc:	089b      	lsrs	r3, r3, #2
 80082ce:	3301      	adds	r3, #1
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	50e9      	str	r1, [r5, r3]
 80082d4:	2900      	cmp	r1, #0
 80082d6:	d002      	beq.n	80082de <__lshift+0xba>
 80082d8:	9b02      	ldr	r3, [sp, #8]
 80082da:	3302      	adds	r3, #2
 80082dc:	9301      	str	r3, [sp, #4]
 80082de:	9b01      	ldr	r3, [sp, #4]
 80082e0:	9804      	ldr	r0, [sp, #16]
 80082e2:	3b01      	subs	r3, #1
 80082e4:	0021      	movs	r1, r4
 80082e6:	6133      	str	r3, [r6, #16]
 80082e8:	f7ff fdca 	bl	8007e80 <_Bfree>
 80082ec:	0030      	movs	r0, r6
 80082ee:	b007      	add	sp, #28
 80082f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082f2:	cb02      	ldmia	r3!, {r1}
 80082f4:	c502      	stmia	r5!, {r1}
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d8fb      	bhi.n	80082f2 <__lshift+0xce>
 80082fa:	e7f0      	b.n	80082de <__lshift+0xba>
 80082fc:	08009e13 	.word	0x08009e13
 8008300:	08009e24 	.word	0x08009e24

08008304 <__mcmp>:
 8008304:	6902      	ldr	r2, [r0, #16]
 8008306:	690b      	ldr	r3, [r1, #16]
 8008308:	b530      	push	{r4, r5, lr}
 800830a:	0004      	movs	r4, r0
 800830c:	1ad0      	subs	r0, r2, r3
 800830e:	429a      	cmp	r2, r3
 8008310:	d10d      	bne.n	800832e <__mcmp+0x2a>
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	3414      	adds	r4, #20
 8008316:	3114      	adds	r1, #20
 8008318:	18e2      	adds	r2, r4, r3
 800831a:	18c9      	adds	r1, r1, r3
 800831c:	3a04      	subs	r2, #4
 800831e:	3904      	subs	r1, #4
 8008320:	6815      	ldr	r5, [r2, #0]
 8008322:	680b      	ldr	r3, [r1, #0]
 8008324:	429d      	cmp	r5, r3
 8008326:	d003      	beq.n	8008330 <__mcmp+0x2c>
 8008328:	2001      	movs	r0, #1
 800832a:	429d      	cmp	r5, r3
 800832c:	d303      	bcc.n	8008336 <__mcmp+0x32>
 800832e:	bd30      	pop	{r4, r5, pc}
 8008330:	4294      	cmp	r4, r2
 8008332:	d3f3      	bcc.n	800831c <__mcmp+0x18>
 8008334:	e7fb      	b.n	800832e <__mcmp+0x2a>
 8008336:	4240      	negs	r0, r0
 8008338:	e7f9      	b.n	800832e <__mcmp+0x2a>
	...

0800833c <__mdiff>:
 800833c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800833e:	000e      	movs	r6, r1
 8008340:	0007      	movs	r7, r0
 8008342:	0011      	movs	r1, r2
 8008344:	0030      	movs	r0, r6
 8008346:	b087      	sub	sp, #28
 8008348:	0014      	movs	r4, r2
 800834a:	f7ff ffdb 	bl	8008304 <__mcmp>
 800834e:	1e05      	subs	r5, r0, #0
 8008350:	d110      	bne.n	8008374 <__mdiff+0x38>
 8008352:	0001      	movs	r1, r0
 8008354:	0038      	movs	r0, r7
 8008356:	f7ff fd4f 	bl	8007df8 <_Balloc>
 800835a:	1e02      	subs	r2, r0, #0
 800835c:	d104      	bne.n	8008368 <__mdiff+0x2c>
 800835e:	4b40      	ldr	r3, [pc, #256]	; (8008460 <__mdiff+0x124>)
 8008360:	4940      	ldr	r1, [pc, #256]	; (8008464 <__mdiff+0x128>)
 8008362:	4841      	ldr	r0, [pc, #260]	; (8008468 <__mdiff+0x12c>)
 8008364:	f000 fb10 	bl	8008988 <__assert_func>
 8008368:	2301      	movs	r3, #1
 800836a:	6145      	str	r5, [r0, #20]
 800836c:	6103      	str	r3, [r0, #16]
 800836e:	0010      	movs	r0, r2
 8008370:	b007      	add	sp, #28
 8008372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008374:	2301      	movs	r3, #1
 8008376:	9301      	str	r3, [sp, #4]
 8008378:	2800      	cmp	r0, #0
 800837a:	db04      	blt.n	8008386 <__mdiff+0x4a>
 800837c:	0023      	movs	r3, r4
 800837e:	0034      	movs	r4, r6
 8008380:	001e      	movs	r6, r3
 8008382:	2300      	movs	r3, #0
 8008384:	9301      	str	r3, [sp, #4]
 8008386:	0038      	movs	r0, r7
 8008388:	6861      	ldr	r1, [r4, #4]
 800838a:	f7ff fd35 	bl	8007df8 <_Balloc>
 800838e:	1e02      	subs	r2, r0, #0
 8008390:	d103      	bne.n	800839a <__mdiff+0x5e>
 8008392:	2190      	movs	r1, #144	; 0x90
 8008394:	4b32      	ldr	r3, [pc, #200]	; (8008460 <__mdiff+0x124>)
 8008396:	0089      	lsls	r1, r1, #2
 8008398:	e7e3      	b.n	8008362 <__mdiff+0x26>
 800839a:	9b01      	ldr	r3, [sp, #4]
 800839c:	2700      	movs	r7, #0
 800839e:	60c3      	str	r3, [r0, #12]
 80083a0:	6920      	ldr	r0, [r4, #16]
 80083a2:	3414      	adds	r4, #20
 80083a4:	9401      	str	r4, [sp, #4]
 80083a6:	9b01      	ldr	r3, [sp, #4]
 80083a8:	0084      	lsls	r4, r0, #2
 80083aa:	191b      	adds	r3, r3, r4
 80083ac:	0034      	movs	r4, r6
 80083ae:	9302      	str	r3, [sp, #8]
 80083b0:	6933      	ldr	r3, [r6, #16]
 80083b2:	3414      	adds	r4, #20
 80083b4:	0099      	lsls	r1, r3, #2
 80083b6:	1863      	adds	r3, r4, r1
 80083b8:	9303      	str	r3, [sp, #12]
 80083ba:	0013      	movs	r3, r2
 80083bc:	3314      	adds	r3, #20
 80083be:	469c      	mov	ip, r3
 80083c0:	9305      	str	r3, [sp, #20]
 80083c2:	9b01      	ldr	r3, [sp, #4]
 80083c4:	9304      	str	r3, [sp, #16]
 80083c6:	9b04      	ldr	r3, [sp, #16]
 80083c8:	cc02      	ldmia	r4!, {r1}
 80083ca:	cb20      	ldmia	r3!, {r5}
 80083cc:	9304      	str	r3, [sp, #16]
 80083ce:	b2ab      	uxth	r3, r5
 80083d0:	19df      	adds	r7, r3, r7
 80083d2:	b28b      	uxth	r3, r1
 80083d4:	1afb      	subs	r3, r7, r3
 80083d6:	0c2d      	lsrs	r5, r5, #16
 80083d8:	0c09      	lsrs	r1, r1, #16
 80083da:	1a69      	subs	r1, r5, r1
 80083dc:	141d      	asrs	r5, r3, #16
 80083de:	1949      	adds	r1, r1, r5
 80083e0:	140f      	asrs	r7, r1, #16
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	0409      	lsls	r1, r1, #16
 80083e6:	430b      	orrs	r3, r1
 80083e8:	4661      	mov	r1, ip
 80083ea:	c108      	stmia	r1!, {r3}
 80083ec:	9b03      	ldr	r3, [sp, #12]
 80083ee:	468c      	mov	ip, r1
 80083f0:	42a3      	cmp	r3, r4
 80083f2:	d8e8      	bhi.n	80083c6 <__mdiff+0x8a>
 80083f4:	0031      	movs	r1, r6
 80083f6:	9c03      	ldr	r4, [sp, #12]
 80083f8:	3115      	adds	r1, #21
 80083fa:	2304      	movs	r3, #4
 80083fc:	428c      	cmp	r4, r1
 80083fe:	d304      	bcc.n	800840a <__mdiff+0xce>
 8008400:	1ba3      	subs	r3, r4, r6
 8008402:	3b15      	subs	r3, #21
 8008404:	089b      	lsrs	r3, r3, #2
 8008406:	3301      	adds	r3, #1
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	9901      	ldr	r1, [sp, #4]
 800840c:	18cc      	adds	r4, r1, r3
 800840e:	9905      	ldr	r1, [sp, #20]
 8008410:	0026      	movs	r6, r4
 8008412:	18cb      	adds	r3, r1, r3
 8008414:	469c      	mov	ip, r3
 8008416:	9902      	ldr	r1, [sp, #8]
 8008418:	428e      	cmp	r6, r1
 800841a:	d310      	bcc.n	800843e <__mdiff+0x102>
 800841c:	9e02      	ldr	r6, [sp, #8]
 800841e:	1ee5      	subs	r5, r4, #3
 8008420:	2100      	movs	r1, #0
 8008422:	42ae      	cmp	r6, r5
 8008424:	d304      	bcc.n	8008430 <__mdiff+0xf4>
 8008426:	0031      	movs	r1, r6
 8008428:	3103      	adds	r1, #3
 800842a:	1b09      	subs	r1, r1, r4
 800842c:	0889      	lsrs	r1, r1, #2
 800842e:	0089      	lsls	r1, r1, #2
 8008430:	185b      	adds	r3, r3, r1
 8008432:	3b04      	subs	r3, #4
 8008434:	6819      	ldr	r1, [r3, #0]
 8008436:	2900      	cmp	r1, #0
 8008438:	d00f      	beq.n	800845a <__mdiff+0x11e>
 800843a:	6110      	str	r0, [r2, #16]
 800843c:	e797      	b.n	800836e <__mdiff+0x32>
 800843e:	ce02      	ldmia	r6!, {r1}
 8008440:	b28d      	uxth	r5, r1
 8008442:	19ed      	adds	r5, r5, r7
 8008444:	0c0f      	lsrs	r7, r1, #16
 8008446:	1429      	asrs	r1, r5, #16
 8008448:	1879      	adds	r1, r7, r1
 800844a:	140f      	asrs	r7, r1, #16
 800844c:	b2ad      	uxth	r5, r5
 800844e:	0409      	lsls	r1, r1, #16
 8008450:	430d      	orrs	r5, r1
 8008452:	4661      	mov	r1, ip
 8008454:	c120      	stmia	r1!, {r5}
 8008456:	468c      	mov	ip, r1
 8008458:	e7dd      	b.n	8008416 <__mdiff+0xda>
 800845a:	3801      	subs	r0, #1
 800845c:	e7e9      	b.n	8008432 <__mdiff+0xf6>
 800845e:	46c0      	nop			; (mov r8, r8)
 8008460:	08009e13 	.word	0x08009e13
 8008464:	00000232 	.word	0x00000232
 8008468:	08009e24 	.word	0x08009e24

0800846c <__d2b>:
 800846c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800846e:	2101      	movs	r1, #1
 8008470:	0014      	movs	r4, r2
 8008472:	001e      	movs	r6, r3
 8008474:	9f08      	ldr	r7, [sp, #32]
 8008476:	f7ff fcbf 	bl	8007df8 <_Balloc>
 800847a:	1e05      	subs	r5, r0, #0
 800847c:	d105      	bne.n	800848a <__d2b+0x1e>
 800847e:	0002      	movs	r2, r0
 8008480:	4b26      	ldr	r3, [pc, #152]	; (800851c <__d2b+0xb0>)
 8008482:	4927      	ldr	r1, [pc, #156]	; (8008520 <__d2b+0xb4>)
 8008484:	4827      	ldr	r0, [pc, #156]	; (8008524 <__d2b+0xb8>)
 8008486:	f000 fa7f 	bl	8008988 <__assert_func>
 800848a:	0333      	lsls	r3, r6, #12
 800848c:	0076      	lsls	r6, r6, #1
 800848e:	0b1b      	lsrs	r3, r3, #12
 8008490:	0d76      	lsrs	r6, r6, #21
 8008492:	d124      	bne.n	80084de <__d2b+0x72>
 8008494:	9301      	str	r3, [sp, #4]
 8008496:	2c00      	cmp	r4, #0
 8008498:	d027      	beq.n	80084ea <__d2b+0x7e>
 800849a:	4668      	mov	r0, sp
 800849c:	9400      	str	r4, [sp, #0]
 800849e:	f7ff fd71 	bl	8007f84 <__lo0bits>
 80084a2:	9c00      	ldr	r4, [sp, #0]
 80084a4:	2800      	cmp	r0, #0
 80084a6:	d01e      	beq.n	80084e6 <__d2b+0x7a>
 80084a8:	9b01      	ldr	r3, [sp, #4]
 80084aa:	2120      	movs	r1, #32
 80084ac:	001a      	movs	r2, r3
 80084ae:	1a09      	subs	r1, r1, r0
 80084b0:	408a      	lsls	r2, r1
 80084b2:	40c3      	lsrs	r3, r0
 80084b4:	4322      	orrs	r2, r4
 80084b6:	616a      	str	r2, [r5, #20]
 80084b8:	9301      	str	r3, [sp, #4]
 80084ba:	9c01      	ldr	r4, [sp, #4]
 80084bc:	61ac      	str	r4, [r5, #24]
 80084be:	1e63      	subs	r3, r4, #1
 80084c0:	419c      	sbcs	r4, r3
 80084c2:	3401      	adds	r4, #1
 80084c4:	612c      	str	r4, [r5, #16]
 80084c6:	2e00      	cmp	r6, #0
 80084c8:	d018      	beq.n	80084fc <__d2b+0x90>
 80084ca:	4b17      	ldr	r3, [pc, #92]	; (8008528 <__d2b+0xbc>)
 80084cc:	18f6      	adds	r6, r6, r3
 80084ce:	2335      	movs	r3, #53	; 0x35
 80084d0:	1836      	adds	r6, r6, r0
 80084d2:	1a18      	subs	r0, r3, r0
 80084d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084d6:	603e      	str	r6, [r7, #0]
 80084d8:	6018      	str	r0, [r3, #0]
 80084da:	0028      	movs	r0, r5
 80084dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80084de:	2280      	movs	r2, #128	; 0x80
 80084e0:	0352      	lsls	r2, r2, #13
 80084e2:	4313      	orrs	r3, r2
 80084e4:	e7d6      	b.n	8008494 <__d2b+0x28>
 80084e6:	616c      	str	r4, [r5, #20]
 80084e8:	e7e7      	b.n	80084ba <__d2b+0x4e>
 80084ea:	a801      	add	r0, sp, #4
 80084ec:	f7ff fd4a 	bl	8007f84 <__lo0bits>
 80084f0:	2401      	movs	r4, #1
 80084f2:	9b01      	ldr	r3, [sp, #4]
 80084f4:	612c      	str	r4, [r5, #16]
 80084f6:	616b      	str	r3, [r5, #20]
 80084f8:	3020      	adds	r0, #32
 80084fa:	e7e4      	b.n	80084c6 <__d2b+0x5a>
 80084fc:	4b0b      	ldr	r3, [pc, #44]	; (800852c <__d2b+0xc0>)
 80084fe:	18c0      	adds	r0, r0, r3
 8008500:	4b0b      	ldr	r3, [pc, #44]	; (8008530 <__d2b+0xc4>)
 8008502:	6038      	str	r0, [r7, #0]
 8008504:	18e3      	adds	r3, r4, r3
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	18eb      	adds	r3, r5, r3
 800850a:	6958      	ldr	r0, [r3, #20]
 800850c:	f7ff fd20 	bl	8007f50 <__hi0bits>
 8008510:	0164      	lsls	r4, r4, #5
 8008512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008514:	1a24      	subs	r4, r4, r0
 8008516:	601c      	str	r4, [r3, #0]
 8008518:	e7df      	b.n	80084da <__d2b+0x6e>
 800851a:	46c0      	nop			; (mov r8, r8)
 800851c:	08009e13 	.word	0x08009e13
 8008520:	0000030a 	.word	0x0000030a
 8008524:	08009e24 	.word	0x08009e24
 8008528:	fffffbcd 	.word	0xfffffbcd
 800852c:	fffffbce 	.word	0xfffffbce
 8008530:	3fffffff 	.word	0x3fffffff

08008534 <_calloc_r>:
 8008534:	434a      	muls	r2, r1
 8008536:	b570      	push	{r4, r5, r6, lr}
 8008538:	0011      	movs	r1, r2
 800853a:	0015      	movs	r5, r2
 800853c:	f000 f852 	bl	80085e4 <_malloc_r>
 8008540:	1e04      	subs	r4, r0, #0
 8008542:	d003      	beq.n	800854c <_calloc_r+0x18>
 8008544:	002a      	movs	r2, r5
 8008546:	2100      	movs	r1, #0
 8008548:	f7fe f8ef 	bl	800672a <memset>
 800854c:	0020      	movs	r0, r4
 800854e:	bd70      	pop	{r4, r5, r6, pc}

08008550 <_free_r>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	0005      	movs	r5, r0
 8008554:	2900      	cmp	r1, #0
 8008556:	d010      	beq.n	800857a <_free_r+0x2a>
 8008558:	1f0c      	subs	r4, r1, #4
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	da00      	bge.n	8008562 <_free_r+0x12>
 8008560:	18e4      	adds	r4, r4, r3
 8008562:	0028      	movs	r0, r5
 8008564:	f000 fa64 	bl	8008a30 <__malloc_lock>
 8008568:	4a1d      	ldr	r2, [pc, #116]	; (80085e0 <_free_r+0x90>)
 800856a:	6813      	ldr	r3, [r2, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d105      	bne.n	800857c <_free_r+0x2c>
 8008570:	6063      	str	r3, [r4, #4]
 8008572:	6014      	str	r4, [r2, #0]
 8008574:	0028      	movs	r0, r5
 8008576:	f000 fa63 	bl	8008a40 <__malloc_unlock>
 800857a:	bd70      	pop	{r4, r5, r6, pc}
 800857c:	42a3      	cmp	r3, r4
 800857e:	d908      	bls.n	8008592 <_free_r+0x42>
 8008580:	6821      	ldr	r1, [r4, #0]
 8008582:	1860      	adds	r0, r4, r1
 8008584:	4283      	cmp	r3, r0
 8008586:	d1f3      	bne.n	8008570 <_free_r+0x20>
 8008588:	6818      	ldr	r0, [r3, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	1841      	adds	r1, r0, r1
 800858e:	6021      	str	r1, [r4, #0]
 8008590:	e7ee      	b.n	8008570 <_free_r+0x20>
 8008592:	001a      	movs	r2, r3
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d001      	beq.n	800859e <_free_r+0x4e>
 800859a:	42a3      	cmp	r3, r4
 800859c:	d9f9      	bls.n	8008592 <_free_r+0x42>
 800859e:	6811      	ldr	r1, [r2, #0]
 80085a0:	1850      	adds	r0, r2, r1
 80085a2:	42a0      	cmp	r0, r4
 80085a4:	d10b      	bne.n	80085be <_free_r+0x6e>
 80085a6:	6820      	ldr	r0, [r4, #0]
 80085a8:	1809      	adds	r1, r1, r0
 80085aa:	1850      	adds	r0, r2, r1
 80085ac:	6011      	str	r1, [r2, #0]
 80085ae:	4283      	cmp	r3, r0
 80085b0:	d1e0      	bne.n	8008574 <_free_r+0x24>
 80085b2:	6818      	ldr	r0, [r3, #0]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	1841      	adds	r1, r0, r1
 80085b8:	6011      	str	r1, [r2, #0]
 80085ba:	6053      	str	r3, [r2, #4]
 80085bc:	e7da      	b.n	8008574 <_free_r+0x24>
 80085be:	42a0      	cmp	r0, r4
 80085c0:	d902      	bls.n	80085c8 <_free_r+0x78>
 80085c2:	230c      	movs	r3, #12
 80085c4:	602b      	str	r3, [r5, #0]
 80085c6:	e7d5      	b.n	8008574 <_free_r+0x24>
 80085c8:	6821      	ldr	r1, [r4, #0]
 80085ca:	1860      	adds	r0, r4, r1
 80085cc:	4283      	cmp	r3, r0
 80085ce:	d103      	bne.n	80085d8 <_free_r+0x88>
 80085d0:	6818      	ldr	r0, [r3, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	1841      	adds	r1, r0, r1
 80085d6:	6021      	str	r1, [r4, #0]
 80085d8:	6063      	str	r3, [r4, #4]
 80085da:	6054      	str	r4, [r2, #4]
 80085dc:	e7ca      	b.n	8008574 <_free_r+0x24>
 80085de:	46c0      	nop			; (mov r8, r8)
 80085e0:	2000030c 	.word	0x2000030c

080085e4 <_malloc_r>:
 80085e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e6:	2303      	movs	r3, #3
 80085e8:	1ccd      	adds	r5, r1, #3
 80085ea:	439d      	bics	r5, r3
 80085ec:	3508      	adds	r5, #8
 80085ee:	0006      	movs	r6, r0
 80085f0:	2d0c      	cmp	r5, #12
 80085f2:	d21f      	bcs.n	8008634 <_malloc_r+0x50>
 80085f4:	250c      	movs	r5, #12
 80085f6:	42a9      	cmp	r1, r5
 80085f8:	d81e      	bhi.n	8008638 <_malloc_r+0x54>
 80085fa:	0030      	movs	r0, r6
 80085fc:	f000 fa18 	bl	8008a30 <__malloc_lock>
 8008600:	4925      	ldr	r1, [pc, #148]	; (8008698 <_malloc_r+0xb4>)
 8008602:	680a      	ldr	r2, [r1, #0]
 8008604:	0014      	movs	r4, r2
 8008606:	2c00      	cmp	r4, #0
 8008608:	d11a      	bne.n	8008640 <_malloc_r+0x5c>
 800860a:	4f24      	ldr	r7, [pc, #144]	; (800869c <_malloc_r+0xb8>)
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d104      	bne.n	800861c <_malloc_r+0x38>
 8008612:	0021      	movs	r1, r4
 8008614:	0030      	movs	r0, r6
 8008616:	f000 f9a5 	bl	8008964 <_sbrk_r>
 800861a:	6038      	str	r0, [r7, #0]
 800861c:	0029      	movs	r1, r5
 800861e:	0030      	movs	r0, r6
 8008620:	f000 f9a0 	bl	8008964 <_sbrk_r>
 8008624:	1c43      	adds	r3, r0, #1
 8008626:	d12b      	bne.n	8008680 <_malloc_r+0x9c>
 8008628:	230c      	movs	r3, #12
 800862a:	0030      	movs	r0, r6
 800862c:	6033      	str	r3, [r6, #0]
 800862e:	f000 fa07 	bl	8008a40 <__malloc_unlock>
 8008632:	e003      	b.n	800863c <_malloc_r+0x58>
 8008634:	2d00      	cmp	r5, #0
 8008636:	dade      	bge.n	80085f6 <_malloc_r+0x12>
 8008638:	230c      	movs	r3, #12
 800863a:	6033      	str	r3, [r6, #0]
 800863c:	2000      	movs	r0, #0
 800863e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	1b5b      	subs	r3, r3, r5
 8008644:	d419      	bmi.n	800867a <_malloc_r+0x96>
 8008646:	2b0b      	cmp	r3, #11
 8008648:	d903      	bls.n	8008652 <_malloc_r+0x6e>
 800864a:	6023      	str	r3, [r4, #0]
 800864c:	18e4      	adds	r4, r4, r3
 800864e:	6025      	str	r5, [r4, #0]
 8008650:	e003      	b.n	800865a <_malloc_r+0x76>
 8008652:	6863      	ldr	r3, [r4, #4]
 8008654:	42a2      	cmp	r2, r4
 8008656:	d10e      	bne.n	8008676 <_malloc_r+0x92>
 8008658:	600b      	str	r3, [r1, #0]
 800865a:	0030      	movs	r0, r6
 800865c:	f000 f9f0 	bl	8008a40 <__malloc_unlock>
 8008660:	0020      	movs	r0, r4
 8008662:	2207      	movs	r2, #7
 8008664:	300b      	adds	r0, #11
 8008666:	1d23      	adds	r3, r4, #4
 8008668:	4390      	bics	r0, r2
 800866a:	1ac2      	subs	r2, r0, r3
 800866c:	4298      	cmp	r0, r3
 800866e:	d0e6      	beq.n	800863e <_malloc_r+0x5a>
 8008670:	1a1b      	subs	r3, r3, r0
 8008672:	50a3      	str	r3, [r4, r2]
 8008674:	e7e3      	b.n	800863e <_malloc_r+0x5a>
 8008676:	6053      	str	r3, [r2, #4]
 8008678:	e7ef      	b.n	800865a <_malloc_r+0x76>
 800867a:	0022      	movs	r2, r4
 800867c:	6864      	ldr	r4, [r4, #4]
 800867e:	e7c2      	b.n	8008606 <_malloc_r+0x22>
 8008680:	2303      	movs	r3, #3
 8008682:	1cc4      	adds	r4, r0, #3
 8008684:	439c      	bics	r4, r3
 8008686:	42a0      	cmp	r0, r4
 8008688:	d0e1      	beq.n	800864e <_malloc_r+0x6a>
 800868a:	1a21      	subs	r1, r4, r0
 800868c:	0030      	movs	r0, r6
 800868e:	f000 f969 	bl	8008964 <_sbrk_r>
 8008692:	1c43      	adds	r3, r0, #1
 8008694:	d1db      	bne.n	800864e <_malloc_r+0x6a>
 8008696:	e7c7      	b.n	8008628 <_malloc_r+0x44>
 8008698:	2000030c 	.word	0x2000030c
 800869c:	20000310 	.word	0x20000310

080086a0 <__ssputs_r>:
 80086a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086a2:	688e      	ldr	r6, [r1, #8]
 80086a4:	b085      	sub	sp, #20
 80086a6:	0007      	movs	r7, r0
 80086a8:	000c      	movs	r4, r1
 80086aa:	9203      	str	r2, [sp, #12]
 80086ac:	9301      	str	r3, [sp, #4]
 80086ae:	429e      	cmp	r6, r3
 80086b0:	d83c      	bhi.n	800872c <__ssputs_r+0x8c>
 80086b2:	2390      	movs	r3, #144	; 0x90
 80086b4:	898a      	ldrh	r2, [r1, #12]
 80086b6:	00db      	lsls	r3, r3, #3
 80086b8:	421a      	tst	r2, r3
 80086ba:	d034      	beq.n	8008726 <__ssputs_r+0x86>
 80086bc:	2503      	movs	r5, #3
 80086be:	6909      	ldr	r1, [r1, #16]
 80086c0:	6823      	ldr	r3, [r4, #0]
 80086c2:	1a5b      	subs	r3, r3, r1
 80086c4:	9302      	str	r3, [sp, #8]
 80086c6:	6963      	ldr	r3, [r4, #20]
 80086c8:	9802      	ldr	r0, [sp, #8]
 80086ca:	435d      	muls	r5, r3
 80086cc:	0feb      	lsrs	r3, r5, #31
 80086ce:	195d      	adds	r5, r3, r5
 80086d0:	9b01      	ldr	r3, [sp, #4]
 80086d2:	106d      	asrs	r5, r5, #1
 80086d4:	3301      	adds	r3, #1
 80086d6:	181b      	adds	r3, r3, r0
 80086d8:	42ab      	cmp	r3, r5
 80086da:	d900      	bls.n	80086de <__ssputs_r+0x3e>
 80086dc:	001d      	movs	r5, r3
 80086de:	0553      	lsls	r3, r2, #21
 80086e0:	d532      	bpl.n	8008748 <__ssputs_r+0xa8>
 80086e2:	0029      	movs	r1, r5
 80086e4:	0038      	movs	r0, r7
 80086e6:	f7ff ff7d 	bl	80085e4 <_malloc_r>
 80086ea:	1e06      	subs	r6, r0, #0
 80086ec:	d109      	bne.n	8008702 <__ssputs_r+0x62>
 80086ee:	230c      	movs	r3, #12
 80086f0:	603b      	str	r3, [r7, #0]
 80086f2:	2340      	movs	r3, #64	; 0x40
 80086f4:	2001      	movs	r0, #1
 80086f6:	89a2      	ldrh	r2, [r4, #12]
 80086f8:	4240      	negs	r0, r0
 80086fa:	4313      	orrs	r3, r2
 80086fc:	81a3      	strh	r3, [r4, #12]
 80086fe:	b005      	add	sp, #20
 8008700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008702:	9a02      	ldr	r2, [sp, #8]
 8008704:	6921      	ldr	r1, [r4, #16]
 8008706:	f7fe f807 	bl	8006718 <memcpy>
 800870a:	89a3      	ldrh	r3, [r4, #12]
 800870c:	4a14      	ldr	r2, [pc, #80]	; (8008760 <__ssputs_r+0xc0>)
 800870e:	401a      	ands	r2, r3
 8008710:	2380      	movs	r3, #128	; 0x80
 8008712:	4313      	orrs	r3, r2
 8008714:	81a3      	strh	r3, [r4, #12]
 8008716:	9b02      	ldr	r3, [sp, #8]
 8008718:	6126      	str	r6, [r4, #16]
 800871a:	18f6      	adds	r6, r6, r3
 800871c:	6026      	str	r6, [r4, #0]
 800871e:	6165      	str	r5, [r4, #20]
 8008720:	9e01      	ldr	r6, [sp, #4]
 8008722:	1aed      	subs	r5, r5, r3
 8008724:	60a5      	str	r5, [r4, #8]
 8008726:	9b01      	ldr	r3, [sp, #4]
 8008728:	429e      	cmp	r6, r3
 800872a:	d900      	bls.n	800872e <__ssputs_r+0x8e>
 800872c:	9e01      	ldr	r6, [sp, #4]
 800872e:	0032      	movs	r2, r6
 8008730:	9903      	ldr	r1, [sp, #12]
 8008732:	6820      	ldr	r0, [r4, #0]
 8008734:	f000 f968 	bl	8008a08 <memmove>
 8008738:	68a3      	ldr	r3, [r4, #8]
 800873a:	2000      	movs	r0, #0
 800873c:	1b9b      	subs	r3, r3, r6
 800873e:	60a3      	str	r3, [r4, #8]
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	199e      	adds	r6, r3, r6
 8008744:	6026      	str	r6, [r4, #0]
 8008746:	e7da      	b.n	80086fe <__ssputs_r+0x5e>
 8008748:	002a      	movs	r2, r5
 800874a:	0038      	movs	r0, r7
 800874c:	f000 f980 	bl	8008a50 <_realloc_r>
 8008750:	1e06      	subs	r6, r0, #0
 8008752:	d1e0      	bne.n	8008716 <__ssputs_r+0x76>
 8008754:	0038      	movs	r0, r7
 8008756:	6921      	ldr	r1, [r4, #16]
 8008758:	f7ff fefa 	bl	8008550 <_free_r>
 800875c:	e7c7      	b.n	80086ee <__ssputs_r+0x4e>
 800875e:	46c0      	nop			; (mov r8, r8)
 8008760:	fffffb7f 	.word	0xfffffb7f

08008764 <_svfiprintf_r>:
 8008764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008766:	b0a1      	sub	sp, #132	; 0x84
 8008768:	9003      	str	r0, [sp, #12]
 800876a:	001d      	movs	r5, r3
 800876c:	898b      	ldrh	r3, [r1, #12]
 800876e:	000f      	movs	r7, r1
 8008770:	0016      	movs	r6, r2
 8008772:	061b      	lsls	r3, r3, #24
 8008774:	d511      	bpl.n	800879a <_svfiprintf_r+0x36>
 8008776:	690b      	ldr	r3, [r1, #16]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10e      	bne.n	800879a <_svfiprintf_r+0x36>
 800877c:	2140      	movs	r1, #64	; 0x40
 800877e:	f7ff ff31 	bl	80085e4 <_malloc_r>
 8008782:	6038      	str	r0, [r7, #0]
 8008784:	6138      	str	r0, [r7, #16]
 8008786:	2800      	cmp	r0, #0
 8008788:	d105      	bne.n	8008796 <_svfiprintf_r+0x32>
 800878a:	230c      	movs	r3, #12
 800878c:	9a03      	ldr	r2, [sp, #12]
 800878e:	3801      	subs	r0, #1
 8008790:	6013      	str	r3, [r2, #0]
 8008792:	b021      	add	sp, #132	; 0x84
 8008794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008796:	2340      	movs	r3, #64	; 0x40
 8008798:	617b      	str	r3, [r7, #20]
 800879a:	2300      	movs	r3, #0
 800879c:	ac08      	add	r4, sp, #32
 800879e:	6163      	str	r3, [r4, #20]
 80087a0:	3320      	adds	r3, #32
 80087a2:	7663      	strb	r3, [r4, #25]
 80087a4:	3310      	adds	r3, #16
 80087a6:	76a3      	strb	r3, [r4, #26]
 80087a8:	9507      	str	r5, [sp, #28]
 80087aa:	0035      	movs	r5, r6
 80087ac:	782b      	ldrb	r3, [r5, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d001      	beq.n	80087b6 <_svfiprintf_r+0x52>
 80087b2:	2b25      	cmp	r3, #37	; 0x25
 80087b4:	d147      	bne.n	8008846 <_svfiprintf_r+0xe2>
 80087b6:	1bab      	subs	r3, r5, r6
 80087b8:	9305      	str	r3, [sp, #20]
 80087ba:	42b5      	cmp	r5, r6
 80087bc:	d00c      	beq.n	80087d8 <_svfiprintf_r+0x74>
 80087be:	0032      	movs	r2, r6
 80087c0:	0039      	movs	r1, r7
 80087c2:	9803      	ldr	r0, [sp, #12]
 80087c4:	f7ff ff6c 	bl	80086a0 <__ssputs_r>
 80087c8:	1c43      	adds	r3, r0, #1
 80087ca:	d100      	bne.n	80087ce <_svfiprintf_r+0x6a>
 80087cc:	e0ae      	b.n	800892c <_svfiprintf_r+0x1c8>
 80087ce:	6962      	ldr	r2, [r4, #20]
 80087d0:	9b05      	ldr	r3, [sp, #20]
 80087d2:	4694      	mov	ip, r2
 80087d4:	4463      	add	r3, ip
 80087d6:	6163      	str	r3, [r4, #20]
 80087d8:	782b      	ldrb	r3, [r5, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d100      	bne.n	80087e0 <_svfiprintf_r+0x7c>
 80087de:	e0a5      	b.n	800892c <_svfiprintf_r+0x1c8>
 80087e0:	2201      	movs	r2, #1
 80087e2:	2300      	movs	r3, #0
 80087e4:	4252      	negs	r2, r2
 80087e6:	6062      	str	r2, [r4, #4]
 80087e8:	a904      	add	r1, sp, #16
 80087ea:	3254      	adds	r2, #84	; 0x54
 80087ec:	1852      	adds	r2, r2, r1
 80087ee:	1c6e      	adds	r6, r5, #1
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	60e3      	str	r3, [r4, #12]
 80087f4:	60a3      	str	r3, [r4, #8]
 80087f6:	7013      	strb	r3, [r2, #0]
 80087f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80087fa:	2205      	movs	r2, #5
 80087fc:	7831      	ldrb	r1, [r6, #0]
 80087fe:	4854      	ldr	r0, [pc, #336]	; (8008950 <_svfiprintf_r+0x1ec>)
 8008800:	f7ff faee 	bl	8007de0 <memchr>
 8008804:	1c75      	adds	r5, r6, #1
 8008806:	2800      	cmp	r0, #0
 8008808:	d11f      	bne.n	800884a <_svfiprintf_r+0xe6>
 800880a:	6822      	ldr	r2, [r4, #0]
 800880c:	06d3      	lsls	r3, r2, #27
 800880e:	d504      	bpl.n	800881a <_svfiprintf_r+0xb6>
 8008810:	2353      	movs	r3, #83	; 0x53
 8008812:	a904      	add	r1, sp, #16
 8008814:	185b      	adds	r3, r3, r1
 8008816:	2120      	movs	r1, #32
 8008818:	7019      	strb	r1, [r3, #0]
 800881a:	0713      	lsls	r3, r2, #28
 800881c:	d504      	bpl.n	8008828 <_svfiprintf_r+0xc4>
 800881e:	2353      	movs	r3, #83	; 0x53
 8008820:	a904      	add	r1, sp, #16
 8008822:	185b      	adds	r3, r3, r1
 8008824:	212b      	movs	r1, #43	; 0x2b
 8008826:	7019      	strb	r1, [r3, #0]
 8008828:	7833      	ldrb	r3, [r6, #0]
 800882a:	2b2a      	cmp	r3, #42	; 0x2a
 800882c:	d016      	beq.n	800885c <_svfiprintf_r+0xf8>
 800882e:	0035      	movs	r5, r6
 8008830:	2100      	movs	r1, #0
 8008832:	200a      	movs	r0, #10
 8008834:	68e3      	ldr	r3, [r4, #12]
 8008836:	782a      	ldrb	r2, [r5, #0]
 8008838:	1c6e      	adds	r6, r5, #1
 800883a:	3a30      	subs	r2, #48	; 0x30
 800883c:	2a09      	cmp	r2, #9
 800883e:	d94e      	bls.n	80088de <_svfiprintf_r+0x17a>
 8008840:	2900      	cmp	r1, #0
 8008842:	d111      	bne.n	8008868 <_svfiprintf_r+0x104>
 8008844:	e017      	b.n	8008876 <_svfiprintf_r+0x112>
 8008846:	3501      	adds	r5, #1
 8008848:	e7b0      	b.n	80087ac <_svfiprintf_r+0x48>
 800884a:	4b41      	ldr	r3, [pc, #260]	; (8008950 <_svfiprintf_r+0x1ec>)
 800884c:	6822      	ldr	r2, [r4, #0]
 800884e:	1ac0      	subs	r0, r0, r3
 8008850:	2301      	movs	r3, #1
 8008852:	4083      	lsls	r3, r0
 8008854:	4313      	orrs	r3, r2
 8008856:	002e      	movs	r6, r5
 8008858:	6023      	str	r3, [r4, #0]
 800885a:	e7ce      	b.n	80087fa <_svfiprintf_r+0x96>
 800885c:	9b07      	ldr	r3, [sp, #28]
 800885e:	1d19      	adds	r1, r3, #4
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	9107      	str	r1, [sp, #28]
 8008864:	2b00      	cmp	r3, #0
 8008866:	db01      	blt.n	800886c <_svfiprintf_r+0x108>
 8008868:	930b      	str	r3, [sp, #44]	; 0x2c
 800886a:	e004      	b.n	8008876 <_svfiprintf_r+0x112>
 800886c:	425b      	negs	r3, r3
 800886e:	60e3      	str	r3, [r4, #12]
 8008870:	2302      	movs	r3, #2
 8008872:	4313      	orrs	r3, r2
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	782b      	ldrb	r3, [r5, #0]
 8008878:	2b2e      	cmp	r3, #46	; 0x2e
 800887a:	d10a      	bne.n	8008892 <_svfiprintf_r+0x12e>
 800887c:	786b      	ldrb	r3, [r5, #1]
 800887e:	2b2a      	cmp	r3, #42	; 0x2a
 8008880:	d135      	bne.n	80088ee <_svfiprintf_r+0x18a>
 8008882:	9b07      	ldr	r3, [sp, #28]
 8008884:	3502      	adds	r5, #2
 8008886:	1d1a      	adds	r2, r3, #4
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	9207      	str	r2, [sp, #28]
 800888c:	2b00      	cmp	r3, #0
 800888e:	db2b      	blt.n	80088e8 <_svfiprintf_r+0x184>
 8008890:	9309      	str	r3, [sp, #36]	; 0x24
 8008892:	4e30      	ldr	r6, [pc, #192]	; (8008954 <_svfiprintf_r+0x1f0>)
 8008894:	2203      	movs	r2, #3
 8008896:	0030      	movs	r0, r6
 8008898:	7829      	ldrb	r1, [r5, #0]
 800889a:	f7ff faa1 	bl	8007de0 <memchr>
 800889e:	2800      	cmp	r0, #0
 80088a0:	d006      	beq.n	80088b0 <_svfiprintf_r+0x14c>
 80088a2:	2340      	movs	r3, #64	; 0x40
 80088a4:	1b80      	subs	r0, r0, r6
 80088a6:	4083      	lsls	r3, r0
 80088a8:	6822      	ldr	r2, [r4, #0]
 80088aa:	3501      	adds	r5, #1
 80088ac:	4313      	orrs	r3, r2
 80088ae:	6023      	str	r3, [r4, #0]
 80088b0:	7829      	ldrb	r1, [r5, #0]
 80088b2:	2206      	movs	r2, #6
 80088b4:	4828      	ldr	r0, [pc, #160]	; (8008958 <_svfiprintf_r+0x1f4>)
 80088b6:	1c6e      	adds	r6, r5, #1
 80088b8:	7621      	strb	r1, [r4, #24]
 80088ba:	f7ff fa91 	bl	8007de0 <memchr>
 80088be:	2800      	cmp	r0, #0
 80088c0:	d03c      	beq.n	800893c <_svfiprintf_r+0x1d8>
 80088c2:	4b26      	ldr	r3, [pc, #152]	; (800895c <_svfiprintf_r+0x1f8>)
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d125      	bne.n	8008914 <_svfiprintf_r+0x1b0>
 80088c8:	2207      	movs	r2, #7
 80088ca:	9b07      	ldr	r3, [sp, #28]
 80088cc:	3307      	adds	r3, #7
 80088ce:	4393      	bics	r3, r2
 80088d0:	3308      	adds	r3, #8
 80088d2:	9307      	str	r3, [sp, #28]
 80088d4:	6963      	ldr	r3, [r4, #20]
 80088d6:	9a04      	ldr	r2, [sp, #16]
 80088d8:	189b      	adds	r3, r3, r2
 80088da:	6163      	str	r3, [r4, #20]
 80088dc:	e765      	b.n	80087aa <_svfiprintf_r+0x46>
 80088de:	4343      	muls	r3, r0
 80088e0:	0035      	movs	r5, r6
 80088e2:	2101      	movs	r1, #1
 80088e4:	189b      	adds	r3, r3, r2
 80088e6:	e7a6      	b.n	8008836 <_svfiprintf_r+0xd2>
 80088e8:	2301      	movs	r3, #1
 80088ea:	425b      	negs	r3, r3
 80088ec:	e7d0      	b.n	8008890 <_svfiprintf_r+0x12c>
 80088ee:	2300      	movs	r3, #0
 80088f0:	200a      	movs	r0, #10
 80088f2:	001a      	movs	r2, r3
 80088f4:	3501      	adds	r5, #1
 80088f6:	6063      	str	r3, [r4, #4]
 80088f8:	7829      	ldrb	r1, [r5, #0]
 80088fa:	1c6e      	adds	r6, r5, #1
 80088fc:	3930      	subs	r1, #48	; 0x30
 80088fe:	2909      	cmp	r1, #9
 8008900:	d903      	bls.n	800890a <_svfiprintf_r+0x1a6>
 8008902:	2b00      	cmp	r3, #0
 8008904:	d0c5      	beq.n	8008892 <_svfiprintf_r+0x12e>
 8008906:	9209      	str	r2, [sp, #36]	; 0x24
 8008908:	e7c3      	b.n	8008892 <_svfiprintf_r+0x12e>
 800890a:	4342      	muls	r2, r0
 800890c:	0035      	movs	r5, r6
 800890e:	2301      	movs	r3, #1
 8008910:	1852      	adds	r2, r2, r1
 8008912:	e7f1      	b.n	80088f8 <_svfiprintf_r+0x194>
 8008914:	ab07      	add	r3, sp, #28
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	003a      	movs	r2, r7
 800891a:	0021      	movs	r1, r4
 800891c:	4b10      	ldr	r3, [pc, #64]	; (8008960 <_svfiprintf_r+0x1fc>)
 800891e:	9803      	ldr	r0, [sp, #12]
 8008920:	f7fd ffb6 	bl	8006890 <_printf_float>
 8008924:	9004      	str	r0, [sp, #16]
 8008926:	9b04      	ldr	r3, [sp, #16]
 8008928:	3301      	adds	r3, #1
 800892a:	d1d3      	bne.n	80088d4 <_svfiprintf_r+0x170>
 800892c:	89bb      	ldrh	r3, [r7, #12]
 800892e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008930:	065b      	lsls	r3, r3, #25
 8008932:	d400      	bmi.n	8008936 <_svfiprintf_r+0x1d2>
 8008934:	e72d      	b.n	8008792 <_svfiprintf_r+0x2e>
 8008936:	2001      	movs	r0, #1
 8008938:	4240      	negs	r0, r0
 800893a:	e72a      	b.n	8008792 <_svfiprintf_r+0x2e>
 800893c:	ab07      	add	r3, sp, #28
 800893e:	9300      	str	r3, [sp, #0]
 8008940:	003a      	movs	r2, r7
 8008942:	0021      	movs	r1, r4
 8008944:	4b06      	ldr	r3, [pc, #24]	; (8008960 <_svfiprintf_r+0x1fc>)
 8008946:	9803      	ldr	r0, [sp, #12]
 8008948:	f7fe fa60 	bl	8006e0c <_printf_i>
 800894c:	e7ea      	b.n	8008924 <_svfiprintf_r+0x1c0>
 800894e:	46c0      	nop			; (mov r8, r8)
 8008950:	08009f84 	.word	0x08009f84
 8008954:	08009f8a 	.word	0x08009f8a
 8008958:	08009f8e 	.word	0x08009f8e
 800895c:	08006891 	.word	0x08006891
 8008960:	080086a1 	.word	0x080086a1

08008964 <_sbrk_r>:
 8008964:	2300      	movs	r3, #0
 8008966:	b570      	push	{r4, r5, r6, lr}
 8008968:	4d06      	ldr	r5, [pc, #24]	; (8008984 <_sbrk_r+0x20>)
 800896a:	0004      	movs	r4, r0
 800896c:	0008      	movs	r0, r1
 800896e:	602b      	str	r3, [r5, #0]
 8008970:	f7fa fc2c 	bl	80031cc <_sbrk>
 8008974:	1c43      	adds	r3, r0, #1
 8008976:	d103      	bne.n	8008980 <_sbrk_r+0x1c>
 8008978:	682b      	ldr	r3, [r5, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d000      	beq.n	8008980 <_sbrk_r+0x1c>
 800897e:	6023      	str	r3, [r4, #0]
 8008980:	bd70      	pop	{r4, r5, r6, pc}
 8008982:	46c0      	nop			; (mov r8, r8)
 8008984:	20000490 	.word	0x20000490

08008988 <__assert_func>:
 8008988:	b530      	push	{r4, r5, lr}
 800898a:	0014      	movs	r4, r2
 800898c:	001a      	movs	r2, r3
 800898e:	4b09      	ldr	r3, [pc, #36]	; (80089b4 <__assert_func+0x2c>)
 8008990:	0005      	movs	r5, r0
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	b085      	sub	sp, #20
 8008996:	68d8      	ldr	r0, [r3, #12]
 8008998:	4b07      	ldr	r3, [pc, #28]	; (80089b8 <__assert_func+0x30>)
 800899a:	2c00      	cmp	r4, #0
 800899c:	d101      	bne.n	80089a2 <__assert_func+0x1a>
 800899e:	4b07      	ldr	r3, [pc, #28]	; (80089bc <__assert_func+0x34>)
 80089a0:	001c      	movs	r4, r3
 80089a2:	9301      	str	r3, [sp, #4]
 80089a4:	9100      	str	r1, [sp, #0]
 80089a6:	002b      	movs	r3, r5
 80089a8:	4905      	ldr	r1, [pc, #20]	; (80089c0 <__assert_func+0x38>)
 80089aa:	9402      	str	r4, [sp, #8]
 80089ac:	f000 f80a 	bl	80089c4 <fiprintf>
 80089b0:	f000 fab2 	bl	8008f18 <abort>
 80089b4:	20000014 	.word	0x20000014
 80089b8:	08009f95 	.word	0x08009f95
 80089bc:	08009fd0 	.word	0x08009fd0
 80089c0:	08009fa2 	.word	0x08009fa2

080089c4 <fiprintf>:
 80089c4:	b40e      	push	{r1, r2, r3}
 80089c6:	b503      	push	{r0, r1, lr}
 80089c8:	0001      	movs	r1, r0
 80089ca:	ab03      	add	r3, sp, #12
 80089cc:	4804      	ldr	r0, [pc, #16]	; (80089e0 <fiprintf+0x1c>)
 80089ce:	cb04      	ldmia	r3!, {r2}
 80089d0:	6800      	ldr	r0, [r0, #0]
 80089d2:	9301      	str	r3, [sp, #4]
 80089d4:	f000 f88a 	bl	8008aec <_vfiprintf_r>
 80089d8:	b002      	add	sp, #8
 80089da:	bc08      	pop	{r3}
 80089dc:	b003      	add	sp, #12
 80089de:	4718      	bx	r3
 80089e0:	20000014 	.word	0x20000014

080089e4 <__ascii_mbtowc>:
 80089e4:	b082      	sub	sp, #8
 80089e6:	2900      	cmp	r1, #0
 80089e8:	d100      	bne.n	80089ec <__ascii_mbtowc+0x8>
 80089ea:	a901      	add	r1, sp, #4
 80089ec:	1e10      	subs	r0, r2, #0
 80089ee:	d006      	beq.n	80089fe <__ascii_mbtowc+0x1a>
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d006      	beq.n	8008a02 <__ascii_mbtowc+0x1e>
 80089f4:	7813      	ldrb	r3, [r2, #0]
 80089f6:	600b      	str	r3, [r1, #0]
 80089f8:	7810      	ldrb	r0, [r2, #0]
 80089fa:	1e43      	subs	r3, r0, #1
 80089fc:	4198      	sbcs	r0, r3
 80089fe:	b002      	add	sp, #8
 8008a00:	4770      	bx	lr
 8008a02:	2002      	movs	r0, #2
 8008a04:	4240      	negs	r0, r0
 8008a06:	e7fa      	b.n	80089fe <__ascii_mbtowc+0x1a>

08008a08 <memmove>:
 8008a08:	b510      	push	{r4, lr}
 8008a0a:	4288      	cmp	r0, r1
 8008a0c:	d902      	bls.n	8008a14 <memmove+0xc>
 8008a0e:	188b      	adds	r3, r1, r2
 8008a10:	4298      	cmp	r0, r3
 8008a12:	d303      	bcc.n	8008a1c <memmove+0x14>
 8008a14:	2300      	movs	r3, #0
 8008a16:	e007      	b.n	8008a28 <memmove+0x20>
 8008a18:	5c8b      	ldrb	r3, [r1, r2]
 8008a1a:	5483      	strb	r3, [r0, r2]
 8008a1c:	3a01      	subs	r2, #1
 8008a1e:	d2fb      	bcs.n	8008a18 <memmove+0x10>
 8008a20:	bd10      	pop	{r4, pc}
 8008a22:	5ccc      	ldrb	r4, [r1, r3]
 8008a24:	54c4      	strb	r4, [r0, r3]
 8008a26:	3301      	adds	r3, #1
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d1fa      	bne.n	8008a22 <memmove+0x1a>
 8008a2c:	e7f8      	b.n	8008a20 <memmove+0x18>
	...

08008a30 <__malloc_lock>:
 8008a30:	b510      	push	{r4, lr}
 8008a32:	4802      	ldr	r0, [pc, #8]	; (8008a3c <__malloc_lock+0xc>)
 8008a34:	f000 fc47 	bl	80092c6 <__retarget_lock_acquire_recursive>
 8008a38:	bd10      	pop	{r4, pc}
 8008a3a:	46c0      	nop			; (mov r8, r8)
 8008a3c:	20000498 	.word	0x20000498

08008a40 <__malloc_unlock>:
 8008a40:	b510      	push	{r4, lr}
 8008a42:	4802      	ldr	r0, [pc, #8]	; (8008a4c <__malloc_unlock+0xc>)
 8008a44:	f000 fc40 	bl	80092c8 <__retarget_lock_release_recursive>
 8008a48:	bd10      	pop	{r4, pc}
 8008a4a:	46c0      	nop			; (mov r8, r8)
 8008a4c:	20000498 	.word	0x20000498

08008a50 <_realloc_r>:
 8008a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a52:	0007      	movs	r7, r0
 8008a54:	000d      	movs	r5, r1
 8008a56:	0016      	movs	r6, r2
 8008a58:	2900      	cmp	r1, #0
 8008a5a:	d105      	bne.n	8008a68 <_realloc_r+0x18>
 8008a5c:	0011      	movs	r1, r2
 8008a5e:	f7ff fdc1 	bl	80085e4 <_malloc_r>
 8008a62:	0004      	movs	r4, r0
 8008a64:	0020      	movs	r0, r4
 8008a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a68:	2a00      	cmp	r2, #0
 8008a6a:	d103      	bne.n	8008a74 <_realloc_r+0x24>
 8008a6c:	f7ff fd70 	bl	8008550 <_free_r>
 8008a70:	0034      	movs	r4, r6
 8008a72:	e7f7      	b.n	8008a64 <_realloc_r+0x14>
 8008a74:	f000 fc96 	bl	80093a4 <_malloc_usable_size_r>
 8008a78:	002c      	movs	r4, r5
 8008a7a:	42b0      	cmp	r0, r6
 8008a7c:	d2f2      	bcs.n	8008a64 <_realloc_r+0x14>
 8008a7e:	0031      	movs	r1, r6
 8008a80:	0038      	movs	r0, r7
 8008a82:	f7ff fdaf 	bl	80085e4 <_malloc_r>
 8008a86:	1e04      	subs	r4, r0, #0
 8008a88:	d0ec      	beq.n	8008a64 <_realloc_r+0x14>
 8008a8a:	0029      	movs	r1, r5
 8008a8c:	0032      	movs	r2, r6
 8008a8e:	f7fd fe43 	bl	8006718 <memcpy>
 8008a92:	0029      	movs	r1, r5
 8008a94:	0038      	movs	r0, r7
 8008a96:	f7ff fd5b 	bl	8008550 <_free_r>
 8008a9a:	e7e3      	b.n	8008a64 <_realloc_r+0x14>

08008a9c <__sfputc_r>:
 8008a9c:	6893      	ldr	r3, [r2, #8]
 8008a9e:	b510      	push	{r4, lr}
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	6093      	str	r3, [r2, #8]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	da04      	bge.n	8008ab2 <__sfputc_r+0x16>
 8008aa8:	6994      	ldr	r4, [r2, #24]
 8008aaa:	42a3      	cmp	r3, r4
 8008aac:	db07      	blt.n	8008abe <__sfputc_r+0x22>
 8008aae:	290a      	cmp	r1, #10
 8008ab0:	d005      	beq.n	8008abe <__sfputc_r+0x22>
 8008ab2:	6813      	ldr	r3, [r2, #0]
 8008ab4:	1c58      	adds	r0, r3, #1
 8008ab6:	6010      	str	r0, [r2, #0]
 8008ab8:	7019      	strb	r1, [r3, #0]
 8008aba:	0008      	movs	r0, r1
 8008abc:	bd10      	pop	{r4, pc}
 8008abe:	f000 f94f 	bl	8008d60 <__swbuf_r>
 8008ac2:	0001      	movs	r1, r0
 8008ac4:	e7f9      	b.n	8008aba <__sfputc_r+0x1e>

08008ac6 <__sfputs_r>:
 8008ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ac8:	0006      	movs	r6, r0
 8008aca:	000f      	movs	r7, r1
 8008acc:	0014      	movs	r4, r2
 8008ace:	18d5      	adds	r5, r2, r3
 8008ad0:	42ac      	cmp	r4, r5
 8008ad2:	d101      	bne.n	8008ad8 <__sfputs_r+0x12>
 8008ad4:	2000      	movs	r0, #0
 8008ad6:	e007      	b.n	8008ae8 <__sfputs_r+0x22>
 8008ad8:	7821      	ldrb	r1, [r4, #0]
 8008ada:	003a      	movs	r2, r7
 8008adc:	0030      	movs	r0, r6
 8008ade:	f7ff ffdd 	bl	8008a9c <__sfputc_r>
 8008ae2:	3401      	adds	r4, #1
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d1f3      	bne.n	8008ad0 <__sfputs_r+0xa>
 8008ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008aec <_vfiprintf_r>:
 8008aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aee:	b0a1      	sub	sp, #132	; 0x84
 8008af0:	0006      	movs	r6, r0
 8008af2:	000c      	movs	r4, r1
 8008af4:	001f      	movs	r7, r3
 8008af6:	9203      	str	r2, [sp, #12]
 8008af8:	2800      	cmp	r0, #0
 8008afa:	d004      	beq.n	8008b06 <_vfiprintf_r+0x1a>
 8008afc:	6983      	ldr	r3, [r0, #24]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d101      	bne.n	8008b06 <_vfiprintf_r+0x1a>
 8008b02:	f000 fb3f 	bl	8009184 <__sinit>
 8008b06:	4b8e      	ldr	r3, [pc, #568]	; (8008d40 <_vfiprintf_r+0x254>)
 8008b08:	429c      	cmp	r4, r3
 8008b0a:	d11c      	bne.n	8008b46 <_vfiprintf_r+0x5a>
 8008b0c:	6874      	ldr	r4, [r6, #4]
 8008b0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b10:	07db      	lsls	r3, r3, #31
 8008b12:	d405      	bmi.n	8008b20 <_vfiprintf_r+0x34>
 8008b14:	89a3      	ldrh	r3, [r4, #12]
 8008b16:	059b      	lsls	r3, r3, #22
 8008b18:	d402      	bmi.n	8008b20 <_vfiprintf_r+0x34>
 8008b1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b1c:	f000 fbd3 	bl	80092c6 <__retarget_lock_acquire_recursive>
 8008b20:	89a3      	ldrh	r3, [r4, #12]
 8008b22:	071b      	lsls	r3, r3, #28
 8008b24:	d502      	bpl.n	8008b2c <_vfiprintf_r+0x40>
 8008b26:	6923      	ldr	r3, [r4, #16]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d11d      	bne.n	8008b68 <_vfiprintf_r+0x7c>
 8008b2c:	0021      	movs	r1, r4
 8008b2e:	0030      	movs	r0, r6
 8008b30:	f000 f97a 	bl	8008e28 <__swsetup_r>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	d017      	beq.n	8008b68 <_vfiprintf_r+0x7c>
 8008b38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b3a:	07db      	lsls	r3, r3, #31
 8008b3c:	d50d      	bpl.n	8008b5a <_vfiprintf_r+0x6e>
 8008b3e:	2001      	movs	r0, #1
 8008b40:	4240      	negs	r0, r0
 8008b42:	b021      	add	sp, #132	; 0x84
 8008b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b46:	4b7f      	ldr	r3, [pc, #508]	; (8008d44 <_vfiprintf_r+0x258>)
 8008b48:	429c      	cmp	r4, r3
 8008b4a:	d101      	bne.n	8008b50 <_vfiprintf_r+0x64>
 8008b4c:	68b4      	ldr	r4, [r6, #8]
 8008b4e:	e7de      	b.n	8008b0e <_vfiprintf_r+0x22>
 8008b50:	4b7d      	ldr	r3, [pc, #500]	; (8008d48 <_vfiprintf_r+0x25c>)
 8008b52:	429c      	cmp	r4, r3
 8008b54:	d1db      	bne.n	8008b0e <_vfiprintf_r+0x22>
 8008b56:	68f4      	ldr	r4, [r6, #12]
 8008b58:	e7d9      	b.n	8008b0e <_vfiprintf_r+0x22>
 8008b5a:	89a3      	ldrh	r3, [r4, #12]
 8008b5c:	059b      	lsls	r3, r3, #22
 8008b5e:	d4ee      	bmi.n	8008b3e <_vfiprintf_r+0x52>
 8008b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b62:	f000 fbb1 	bl	80092c8 <__retarget_lock_release_recursive>
 8008b66:	e7ea      	b.n	8008b3e <_vfiprintf_r+0x52>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	ad08      	add	r5, sp, #32
 8008b6c:	616b      	str	r3, [r5, #20]
 8008b6e:	3320      	adds	r3, #32
 8008b70:	766b      	strb	r3, [r5, #25]
 8008b72:	3310      	adds	r3, #16
 8008b74:	76ab      	strb	r3, [r5, #26]
 8008b76:	9707      	str	r7, [sp, #28]
 8008b78:	9f03      	ldr	r7, [sp, #12]
 8008b7a:	783b      	ldrb	r3, [r7, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <_vfiprintf_r+0x98>
 8008b80:	2b25      	cmp	r3, #37	; 0x25
 8008b82:	d14e      	bne.n	8008c22 <_vfiprintf_r+0x136>
 8008b84:	9b03      	ldr	r3, [sp, #12]
 8008b86:	1afb      	subs	r3, r7, r3
 8008b88:	9305      	str	r3, [sp, #20]
 8008b8a:	9b03      	ldr	r3, [sp, #12]
 8008b8c:	429f      	cmp	r7, r3
 8008b8e:	d00d      	beq.n	8008bac <_vfiprintf_r+0xc0>
 8008b90:	9b05      	ldr	r3, [sp, #20]
 8008b92:	0021      	movs	r1, r4
 8008b94:	0030      	movs	r0, r6
 8008b96:	9a03      	ldr	r2, [sp, #12]
 8008b98:	f7ff ff95 	bl	8008ac6 <__sfputs_r>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	d100      	bne.n	8008ba2 <_vfiprintf_r+0xb6>
 8008ba0:	e0b5      	b.n	8008d0e <_vfiprintf_r+0x222>
 8008ba2:	696a      	ldr	r2, [r5, #20]
 8008ba4:	9b05      	ldr	r3, [sp, #20]
 8008ba6:	4694      	mov	ip, r2
 8008ba8:	4463      	add	r3, ip
 8008baa:	616b      	str	r3, [r5, #20]
 8008bac:	783b      	ldrb	r3, [r7, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d100      	bne.n	8008bb4 <_vfiprintf_r+0xc8>
 8008bb2:	e0ac      	b.n	8008d0e <_vfiprintf_r+0x222>
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	1c7b      	adds	r3, r7, #1
 8008bb8:	9303      	str	r3, [sp, #12]
 8008bba:	2300      	movs	r3, #0
 8008bbc:	4252      	negs	r2, r2
 8008bbe:	606a      	str	r2, [r5, #4]
 8008bc0:	a904      	add	r1, sp, #16
 8008bc2:	3254      	adds	r2, #84	; 0x54
 8008bc4:	1852      	adds	r2, r2, r1
 8008bc6:	602b      	str	r3, [r5, #0]
 8008bc8:	60eb      	str	r3, [r5, #12]
 8008bca:	60ab      	str	r3, [r5, #8]
 8008bcc:	7013      	strb	r3, [r2, #0]
 8008bce:	65ab      	str	r3, [r5, #88]	; 0x58
 8008bd0:	9b03      	ldr	r3, [sp, #12]
 8008bd2:	2205      	movs	r2, #5
 8008bd4:	7819      	ldrb	r1, [r3, #0]
 8008bd6:	485d      	ldr	r0, [pc, #372]	; (8008d4c <_vfiprintf_r+0x260>)
 8008bd8:	f7ff f902 	bl	8007de0 <memchr>
 8008bdc:	9b03      	ldr	r3, [sp, #12]
 8008bde:	1c5f      	adds	r7, r3, #1
 8008be0:	2800      	cmp	r0, #0
 8008be2:	d120      	bne.n	8008c26 <_vfiprintf_r+0x13a>
 8008be4:	682a      	ldr	r2, [r5, #0]
 8008be6:	06d3      	lsls	r3, r2, #27
 8008be8:	d504      	bpl.n	8008bf4 <_vfiprintf_r+0x108>
 8008bea:	2353      	movs	r3, #83	; 0x53
 8008bec:	a904      	add	r1, sp, #16
 8008bee:	185b      	adds	r3, r3, r1
 8008bf0:	2120      	movs	r1, #32
 8008bf2:	7019      	strb	r1, [r3, #0]
 8008bf4:	0713      	lsls	r3, r2, #28
 8008bf6:	d504      	bpl.n	8008c02 <_vfiprintf_r+0x116>
 8008bf8:	2353      	movs	r3, #83	; 0x53
 8008bfa:	a904      	add	r1, sp, #16
 8008bfc:	185b      	adds	r3, r3, r1
 8008bfe:	212b      	movs	r1, #43	; 0x2b
 8008c00:	7019      	strb	r1, [r3, #0]
 8008c02:	9b03      	ldr	r3, [sp, #12]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2b2a      	cmp	r3, #42	; 0x2a
 8008c08:	d016      	beq.n	8008c38 <_vfiprintf_r+0x14c>
 8008c0a:	2100      	movs	r1, #0
 8008c0c:	68eb      	ldr	r3, [r5, #12]
 8008c0e:	9f03      	ldr	r7, [sp, #12]
 8008c10:	783a      	ldrb	r2, [r7, #0]
 8008c12:	1c78      	adds	r0, r7, #1
 8008c14:	3a30      	subs	r2, #48	; 0x30
 8008c16:	4684      	mov	ip, r0
 8008c18:	2a09      	cmp	r2, #9
 8008c1a:	d94f      	bls.n	8008cbc <_vfiprintf_r+0x1d0>
 8008c1c:	2900      	cmp	r1, #0
 8008c1e:	d111      	bne.n	8008c44 <_vfiprintf_r+0x158>
 8008c20:	e017      	b.n	8008c52 <_vfiprintf_r+0x166>
 8008c22:	3701      	adds	r7, #1
 8008c24:	e7a9      	b.n	8008b7a <_vfiprintf_r+0x8e>
 8008c26:	4b49      	ldr	r3, [pc, #292]	; (8008d4c <_vfiprintf_r+0x260>)
 8008c28:	682a      	ldr	r2, [r5, #0]
 8008c2a:	1ac0      	subs	r0, r0, r3
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	4083      	lsls	r3, r0
 8008c30:	4313      	orrs	r3, r2
 8008c32:	602b      	str	r3, [r5, #0]
 8008c34:	9703      	str	r7, [sp, #12]
 8008c36:	e7cb      	b.n	8008bd0 <_vfiprintf_r+0xe4>
 8008c38:	9b07      	ldr	r3, [sp, #28]
 8008c3a:	1d19      	adds	r1, r3, #4
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	9107      	str	r1, [sp, #28]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	db01      	blt.n	8008c48 <_vfiprintf_r+0x15c>
 8008c44:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c46:	e004      	b.n	8008c52 <_vfiprintf_r+0x166>
 8008c48:	425b      	negs	r3, r3
 8008c4a:	60eb      	str	r3, [r5, #12]
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	602b      	str	r3, [r5, #0]
 8008c52:	783b      	ldrb	r3, [r7, #0]
 8008c54:	2b2e      	cmp	r3, #46	; 0x2e
 8008c56:	d10a      	bne.n	8008c6e <_vfiprintf_r+0x182>
 8008c58:	787b      	ldrb	r3, [r7, #1]
 8008c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8008c5c:	d137      	bne.n	8008cce <_vfiprintf_r+0x1e2>
 8008c5e:	9b07      	ldr	r3, [sp, #28]
 8008c60:	3702      	adds	r7, #2
 8008c62:	1d1a      	adds	r2, r3, #4
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	9207      	str	r2, [sp, #28]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	db2d      	blt.n	8008cc8 <_vfiprintf_r+0x1dc>
 8008c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c6e:	2203      	movs	r2, #3
 8008c70:	7839      	ldrb	r1, [r7, #0]
 8008c72:	4837      	ldr	r0, [pc, #220]	; (8008d50 <_vfiprintf_r+0x264>)
 8008c74:	f7ff f8b4 	bl	8007de0 <memchr>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	d007      	beq.n	8008c8c <_vfiprintf_r+0x1a0>
 8008c7c:	4b34      	ldr	r3, [pc, #208]	; (8008d50 <_vfiprintf_r+0x264>)
 8008c7e:	682a      	ldr	r2, [r5, #0]
 8008c80:	1ac0      	subs	r0, r0, r3
 8008c82:	2340      	movs	r3, #64	; 0x40
 8008c84:	4083      	lsls	r3, r0
 8008c86:	4313      	orrs	r3, r2
 8008c88:	3701      	adds	r7, #1
 8008c8a:	602b      	str	r3, [r5, #0]
 8008c8c:	7839      	ldrb	r1, [r7, #0]
 8008c8e:	1c7b      	adds	r3, r7, #1
 8008c90:	2206      	movs	r2, #6
 8008c92:	4830      	ldr	r0, [pc, #192]	; (8008d54 <_vfiprintf_r+0x268>)
 8008c94:	9303      	str	r3, [sp, #12]
 8008c96:	7629      	strb	r1, [r5, #24]
 8008c98:	f7ff f8a2 	bl	8007de0 <memchr>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d045      	beq.n	8008d2c <_vfiprintf_r+0x240>
 8008ca0:	4b2d      	ldr	r3, [pc, #180]	; (8008d58 <_vfiprintf_r+0x26c>)
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d127      	bne.n	8008cf6 <_vfiprintf_r+0x20a>
 8008ca6:	2207      	movs	r2, #7
 8008ca8:	9b07      	ldr	r3, [sp, #28]
 8008caa:	3307      	adds	r3, #7
 8008cac:	4393      	bics	r3, r2
 8008cae:	3308      	adds	r3, #8
 8008cb0:	9307      	str	r3, [sp, #28]
 8008cb2:	696b      	ldr	r3, [r5, #20]
 8008cb4:	9a04      	ldr	r2, [sp, #16]
 8008cb6:	189b      	adds	r3, r3, r2
 8008cb8:	616b      	str	r3, [r5, #20]
 8008cba:	e75d      	b.n	8008b78 <_vfiprintf_r+0x8c>
 8008cbc:	210a      	movs	r1, #10
 8008cbe:	434b      	muls	r3, r1
 8008cc0:	4667      	mov	r7, ip
 8008cc2:	189b      	adds	r3, r3, r2
 8008cc4:	3909      	subs	r1, #9
 8008cc6:	e7a3      	b.n	8008c10 <_vfiprintf_r+0x124>
 8008cc8:	2301      	movs	r3, #1
 8008cca:	425b      	negs	r3, r3
 8008ccc:	e7ce      	b.n	8008c6c <_vfiprintf_r+0x180>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	001a      	movs	r2, r3
 8008cd2:	3701      	adds	r7, #1
 8008cd4:	606b      	str	r3, [r5, #4]
 8008cd6:	7839      	ldrb	r1, [r7, #0]
 8008cd8:	1c78      	adds	r0, r7, #1
 8008cda:	3930      	subs	r1, #48	; 0x30
 8008cdc:	4684      	mov	ip, r0
 8008cde:	2909      	cmp	r1, #9
 8008ce0:	d903      	bls.n	8008cea <_vfiprintf_r+0x1fe>
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0c3      	beq.n	8008c6e <_vfiprintf_r+0x182>
 8008ce6:	9209      	str	r2, [sp, #36]	; 0x24
 8008ce8:	e7c1      	b.n	8008c6e <_vfiprintf_r+0x182>
 8008cea:	230a      	movs	r3, #10
 8008cec:	435a      	muls	r2, r3
 8008cee:	4667      	mov	r7, ip
 8008cf0:	1852      	adds	r2, r2, r1
 8008cf2:	3b09      	subs	r3, #9
 8008cf4:	e7ef      	b.n	8008cd6 <_vfiprintf_r+0x1ea>
 8008cf6:	ab07      	add	r3, sp, #28
 8008cf8:	9300      	str	r3, [sp, #0]
 8008cfa:	0022      	movs	r2, r4
 8008cfc:	0029      	movs	r1, r5
 8008cfe:	0030      	movs	r0, r6
 8008d00:	4b16      	ldr	r3, [pc, #88]	; (8008d5c <_vfiprintf_r+0x270>)
 8008d02:	f7fd fdc5 	bl	8006890 <_printf_float>
 8008d06:	9004      	str	r0, [sp, #16]
 8008d08:	9b04      	ldr	r3, [sp, #16]
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	d1d1      	bne.n	8008cb2 <_vfiprintf_r+0x1c6>
 8008d0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d10:	07db      	lsls	r3, r3, #31
 8008d12:	d405      	bmi.n	8008d20 <_vfiprintf_r+0x234>
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	059b      	lsls	r3, r3, #22
 8008d18:	d402      	bmi.n	8008d20 <_vfiprintf_r+0x234>
 8008d1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d1c:	f000 fad4 	bl	80092c8 <__retarget_lock_release_recursive>
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	065b      	lsls	r3, r3, #25
 8008d24:	d500      	bpl.n	8008d28 <_vfiprintf_r+0x23c>
 8008d26:	e70a      	b.n	8008b3e <_vfiprintf_r+0x52>
 8008d28:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008d2a:	e70a      	b.n	8008b42 <_vfiprintf_r+0x56>
 8008d2c:	ab07      	add	r3, sp, #28
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	0022      	movs	r2, r4
 8008d32:	0029      	movs	r1, r5
 8008d34:	0030      	movs	r0, r6
 8008d36:	4b09      	ldr	r3, [pc, #36]	; (8008d5c <_vfiprintf_r+0x270>)
 8008d38:	f7fe f868 	bl	8006e0c <_printf_i>
 8008d3c:	e7e3      	b.n	8008d06 <_vfiprintf_r+0x21a>
 8008d3e:	46c0      	nop			; (mov r8, r8)
 8008d40:	0800a0fc 	.word	0x0800a0fc
 8008d44:	0800a11c 	.word	0x0800a11c
 8008d48:	0800a0dc 	.word	0x0800a0dc
 8008d4c:	08009f84 	.word	0x08009f84
 8008d50:	08009f8a 	.word	0x08009f8a
 8008d54:	08009f8e 	.word	0x08009f8e
 8008d58:	08006891 	.word	0x08006891
 8008d5c:	08008ac7 	.word	0x08008ac7

08008d60 <__swbuf_r>:
 8008d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d62:	0005      	movs	r5, r0
 8008d64:	000e      	movs	r6, r1
 8008d66:	0014      	movs	r4, r2
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d004      	beq.n	8008d76 <__swbuf_r+0x16>
 8008d6c:	6983      	ldr	r3, [r0, #24]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <__swbuf_r+0x16>
 8008d72:	f000 fa07 	bl	8009184 <__sinit>
 8008d76:	4b22      	ldr	r3, [pc, #136]	; (8008e00 <__swbuf_r+0xa0>)
 8008d78:	429c      	cmp	r4, r3
 8008d7a:	d12e      	bne.n	8008dda <__swbuf_r+0x7a>
 8008d7c:	686c      	ldr	r4, [r5, #4]
 8008d7e:	69a3      	ldr	r3, [r4, #24]
 8008d80:	60a3      	str	r3, [r4, #8]
 8008d82:	89a3      	ldrh	r3, [r4, #12]
 8008d84:	071b      	lsls	r3, r3, #28
 8008d86:	d532      	bpl.n	8008dee <__swbuf_r+0x8e>
 8008d88:	6923      	ldr	r3, [r4, #16]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d02f      	beq.n	8008dee <__swbuf_r+0x8e>
 8008d8e:	6823      	ldr	r3, [r4, #0]
 8008d90:	6922      	ldr	r2, [r4, #16]
 8008d92:	b2f7      	uxtb	r7, r6
 8008d94:	1a98      	subs	r0, r3, r2
 8008d96:	6963      	ldr	r3, [r4, #20]
 8008d98:	b2f6      	uxtb	r6, r6
 8008d9a:	4283      	cmp	r3, r0
 8008d9c:	dc05      	bgt.n	8008daa <__swbuf_r+0x4a>
 8008d9e:	0021      	movs	r1, r4
 8008da0:	0028      	movs	r0, r5
 8008da2:	f000 f94d 	bl	8009040 <_fflush_r>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d127      	bne.n	8008dfa <__swbuf_r+0x9a>
 8008daa:	68a3      	ldr	r3, [r4, #8]
 8008dac:	3001      	adds	r0, #1
 8008dae:	3b01      	subs	r3, #1
 8008db0:	60a3      	str	r3, [r4, #8]
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	1c5a      	adds	r2, r3, #1
 8008db6:	6022      	str	r2, [r4, #0]
 8008db8:	701f      	strb	r7, [r3, #0]
 8008dba:	6963      	ldr	r3, [r4, #20]
 8008dbc:	4283      	cmp	r3, r0
 8008dbe:	d004      	beq.n	8008dca <__swbuf_r+0x6a>
 8008dc0:	89a3      	ldrh	r3, [r4, #12]
 8008dc2:	07db      	lsls	r3, r3, #31
 8008dc4:	d507      	bpl.n	8008dd6 <__swbuf_r+0x76>
 8008dc6:	2e0a      	cmp	r6, #10
 8008dc8:	d105      	bne.n	8008dd6 <__swbuf_r+0x76>
 8008dca:	0021      	movs	r1, r4
 8008dcc:	0028      	movs	r0, r5
 8008dce:	f000 f937 	bl	8009040 <_fflush_r>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	d111      	bne.n	8008dfa <__swbuf_r+0x9a>
 8008dd6:	0030      	movs	r0, r6
 8008dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dda:	4b0a      	ldr	r3, [pc, #40]	; (8008e04 <__swbuf_r+0xa4>)
 8008ddc:	429c      	cmp	r4, r3
 8008dde:	d101      	bne.n	8008de4 <__swbuf_r+0x84>
 8008de0:	68ac      	ldr	r4, [r5, #8]
 8008de2:	e7cc      	b.n	8008d7e <__swbuf_r+0x1e>
 8008de4:	4b08      	ldr	r3, [pc, #32]	; (8008e08 <__swbuf_r+0xa8>)
 8008de6:	429c      	cmp	r4, r3
 8008de8:	d1c9      	bne.n	8008d7e <__swbuf_r+0x1e>
 8008dea:	68ec      	ldr	r4, [r5, #12]
 8008dec:	e7c7      	b.n	8008d7e <__swbuf_r+0x1e>
 8008dee:	0021      	movs	r1, r4
 8008df0:	0028      	movs	r0, r5
 8008df2:	f000 f819 	bl	8008e28 <__swsetup_r>
 8008df6:	2800      	cmp	r0, #0
 8008df8:	d0c9      	beq.n	8008d8e <__swbuf_r+0x2e>
 8008dfa:	2601      	movs	r6, #1
 8008dfc:	4276      	negs	r6, r6
 8008dfe:	e7ea      	b.n	8008dd6 <__swbuf_r+0x76>
 8008e00:	0800a0fc 	.word	0x0800a0fc
 8008e04:	0800a11c 	.word	0x0800a11c
 8008e08:	0800a0dc 	.word	0x0800a0dc

08008e0c <__ascii_wctomb>:
 8008e0c:	0003      	movs	r3, r0
 8008e0e:	1e08      	subs	r0, r1, #0
 8008e10:	d005      	beq.n	8008e1e <__ascii_wctomb+0x12>
 8008e12:	2aff      	cmp	r2, #255	; 0xff
 8008e14:	d904      	bls.n	8008e20 <__ascii_wctomb+0x14>
 8008e16:	228a      	movs	r2, #138	; 0x8a
 8008e18:	2001      	movs	r0, #1
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	4240      	negs	r0, r0
 8008e1e:	4770      	bx	lr
 8008e20:	2001      	movs	r0, #1
 8008e22:	700a      	strb	r2, [r1, #0]
 8008e24:	e7fb      	b.n	8008e1e <__ascii_wctomb+0x12>
	...

08008e28 <__swsetup_r>:
 8008e28:	4b37      	ldr	r3, [pc, #220]	; (8008f08 <__swsetup_r+0xe0>)
 8008e2a:	b570      	push	{r4, r5, r6, lr}
 8008e2c:	681d      	ldr	r5, [r3, #0]
 8008e2e:	0006      	movs	r6, r0
 8008e30:	000c      	movs	r4, r1
 8008e32:	2d00      	cmp	r5, #0
 8008e34:	d005      	beq.n	8008e42 <__swsetup_r+0x1a>
 8008e36:	69ab      	ldr	r3, [r5, #24]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d102      	bne.n	8008e42 <__swsetup_r+0x1a>
 8008e3c:	0028      	movs	r0, r5
 8008e3e:	f000 f9a1 	bl	8009184 <__sinit>
 8008e42:	4b32      	ldr	r3, [pc, #200]	; (8008f0c <__swsetup_r+0xe4>)
 8008e44:	429c      	cmp	r4, r3
 8008e46:	d10f      	bne.n	8008e68 <__swsetup_r+0x40>
 8008e48:	686c      	ldr	r4, [r5, #4]
 8008e4a:	230c      	movs	r3, #12
 8008e4c:	5ee2      	ldrsh	r2, [r4, r3]
 8008e4e:	b293      	uxth	r3, r2
 8008e50:	0711      	lsls	r1, r2, #28
 8008e52:	d42d      	bmi.n	8008eb0 <__swsetup_r+0x88>
 8008e54:	06d9      	lsls	r1, r3, #27
 8008e56:	d411      	bmi.n	8008e7c <__swsetup_r+0x54>
 8008e58:	2309      	movs	r3, #9
 8008e5a:	2001      	movs	r0, #1
 8008e5c:	6033      	str	r3, [r6, #0]
 8008e5e:	3337      	adds	r3, #55	; 0x37
 8008e60:	4313      	orrs	r3, r2
 8008e62:	81a3      	strh	r3, [r4, #12]
 8008e64:	4240      	negs	r0, r0
 8008e66:	bd70      	pop	{r4, r5, r6, pc}
 8008e68:	4b29      	ldr	r3, [pc, #164]	; (8008f10 <__swsetup_r+0xe8>)
 8008e6a:	429c      	cmp	r4, r3
 8008e6c:	d101      	bne.n	8008e72 <__swsetup_r+0x4a>
 8008e6e:	68ac      	ldr	r4, [r5, #8]
 8008e70:	e7eb      	b.n	8008e4a <__swsetup_r+0x22>
 8008e72:	4b28      	ldr	r3, [pc, #160]	; (8008f14 <__swsetup_r+0xec>)
 8008e74:	429c      	cmp	r4, r3
 8008e76:	d1e8      	bne.n	8008e4a <__swsetup_r+0x22>
 8008e78:	68ec      	ldr	r4, [r5, #12]
 8008e7a:	e7e6      	b.n	8008e4a <__swsetup_r+0x22>
 8008e7c:	075b      	lsls	r3, r3, #29
 8008e7e:	d513      	bpl.n	8008ea8 <__swsetup_r+0x80>
 8008e80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e82:	2900      	cmp	r1, #0
 8008e84:	d008      	beq.n	8008e98 <__swsetup_r+0x70>
 8008e86:	0023      	movs	r3, r4
 8008e88:	3344      	adds	r3, #68	; 0x44
 8008e8a:	4299      	cmp	r1, r3
 8008e8c:	d002      	beq.n	8008e94 <__swsetup_r+0x6c>
 8008e8e:	0030      	movs	r0, r6
 8008e90:	f7ff fb5e 	bl	8008550 <_free_r>
 8008e94:	2300      	movs	r3, #0
 8008e96:	6363      	str	r3, [r4, #52]	; 0x34
 8008e98:	2224      	movs	r2, #36	; 0x24
 8008e9a:	89a3      	ldrh	r3, [r4, #12]
 8008e9c:	4393      	bics	r3, r2
 8008e9e:	81a3      	strh	r3, [r4, #12]
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	6063      	str	r3, [r4, #4]
 8008ea4:	6923      	ldr	r3, [r4, #16]
 8008ea6:	6023      	str	r3, [r4, #0]
 8008ea8:	2308      	movs	r3, #8
 8008eaa:	89a2      	ldrh	r2, [r4, #12]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	81a3      	strh	r3, [r4, #12]
 8008eb0:	6923      	ldr	r3, [r4, #16]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10b      	bne.n	8008ece <__swsetup_r+0xa6>
 8008eb6:	21a0      	movs	r1, #160	; 0xa0
 8008eb8:	2280      	movs	r2, #128	; 0x80
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	0089      	lsls	r1, r1, #2
 8008ebe:	0092      	lsls	r2, r2, #2
 8008ec0:	400b      	ands	r3, r1
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d003      	beq.n	8008ece <__swsetup_r+0xa6>
 8008ec6:	0021      	movs	r1, r4
 8008ec8:	0030      	movs	r0, r6
 8008eca:	f000 fa27 	bl	800931c <__smakebuf_r>
 8008ece:	220c      	movs	r2, #12
 8008ed0:	5ea3      	ldrsh	r3, [r4, r2]
 8008ed2:	2001      	movs	r0, #1
 8008ed4:	001a      	movs	r2, r3
 8008ed6:	b299      	uxth	r1, r3
 8008ed8:	4002      	ands	r2, r0
 8008eda:	4203      	tst	r3, r0
 8008edc:	d00f      	beq.n	8008efe <__swsetup_r+0xd6>
 8008ede:	2200      	movs	r2, #0
 8008ee0:	60a2      	str	r2, [r4, #8]
 8008ee2:	6962      	ldr	r2, [r4, #20]
 8008ee4:	4252      	negs	r2, r2
 8008ee6:	61a2      	str	r2, [r4, #24]
 8008ee8:	2000      	movs	r0, #0
 8008eea:	6922      	ldr	r2, [r4, #16]
 8008eec:	4282      	cmp	r2, r0
 8008eee:	d1ba      	bne.n	8008e66 <__swsetup_r+0x3e>
 8008ef0:	060a      	lsls	r2, r1, #24
 8008ef2:	d5b8      	bpl.n	8008e66 <__swsetup_r+0x3e>
 8008ef4:	2240      	movs	r2, #64	; 0x40
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	81a3      	strh	r3, [r4, #12]
 8008efa:	3801      	subs	r0, #1
 8008efc:	e7b3      	b.n	8008e66 <__swsetup_r+0x3e>
 8008efe:	0788      	lsls	r0, r1, #30
 8008f00:	d400      	bmi.n	8008f04 <__swsetup_r+0xdc>
 8008f02:	6962      	ldr	r2, [r4, #20]
 8008f04:	60a2      	str	r2, [r4, #8]
 8008f06:	e7ef      	b.n	8008ee8 <__swsetup_r+0xc0>
 8008f08:	20000014 	.word	0x20000014
 8008f0c:	0800a0fc 	.word	0x0800a0fc
 8008f10:	0800a11c 	.word	0x0800a11c
 8008f14:	0800a0dc 	.word	0x0800a0dc

08008f18 <abort>:
 8008f18:	2006      	movs	r0, #6
 8008f1a:	b510      	push	{r4, lr}
 8008f1c:	f000 fa74 	bl	8009408 <raise>
 8008f20:	2001      	movs	r0, #1
 8008f22:	f7fa f8e1 	bl	80030e8 <_exit>
	...

08008f28 <__sflush_r>:
 8008f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f2a:	898b      	ldrh	r3, [r1, #12]
 8008f2c:	0005      	movs	r5, r0
 8008f2e:	000c      	movs	r4, r1
 8008f30:	071a      	lsls	r2, r3, #28
 8008f32:	d45f      	bmi.n	8008ff4 <__sflush_r+0xcc>
 8008f34:	684a      	ldr	r2, [r1, #4]
 8008f36:	2a00      	cmp	r2, #0
 8008f38:	dc04      	bgt.n	8008f44 <__sflush_r+0x1c>
 8008f3a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008f3c:	2a00      	cmp	r2, #0
 8008f3e:	dc01      	bgt.n	8008f44 <__sflush_r+0x1c>
 8008f40:	2000      	movs	r0, #0
 8008f42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f44:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008f46:	2f00      	cmp	r7, #0
 8008f48:	d0fa      	beq.n	8008f40 <__sflush_r+0x18>
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	2180      	movs	r1, #128	; 0x80
 8008f4e:	682e      	ldr	r6, [r5, #0]
 8008f50:	602a      	str	r2, [r5, #0]
 8008f52:	001a      	movs	r2, r3
 8008f54:	0149      	lsls	r1, r1, #5
 8008f56:	400a      	ands	r2, r1
 8008f58:	420b      	tst	r3, r1
 8008f5a:	d034      	beq.n	8008fc6 <__sflush_r+0x9e>
 8008f5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f5e:	89a3      	ldrh	r3, [r4, #12]
 8008f60:	075b      	lsls	r3, r3, #29
 8008f62:	d506      	bpl.n	8008f72 <__sflush_r+0x4a>
 8008f64:	6863      	ldr	r3, [r4, #4]
 8008f66:	1ac0      	subs	r0, r0, r3
 8008f68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <__sflush_r+0x4a>
 8008f6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f70:	1ac0      	subs	r0, r0, r3
 8008f72:	0002      	movs	r2, r0
 8008f74:	6a21      	ldr	r1, [r4, #32]
 8008f76:	2300      	movs	r3, #0
 8008f78:	0028      	movs	r0, r5
 8008f7a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008f7c:	47b8      	blx	r7
 8008f7e:	89a1      	ldrh	r1, [r4, #12]
 8008f80:	1c43      	adds	r3, r0, #1
 8008f82:	d106      	bne.n	8008f92 <__sflush_r+0x6a>
 8008f84:	682b      	ldr	r3, [r5, #0]
 8008f86:	2b1d      	cmp	r3, #29
 8008f88:	d831      	bhi.n	8008fee <__sflush_r+0xc6>
 8008f8a:	4a2c      	ldr	r2, [pc, #176]	; (800903c <__sflush_r+0x114>)
 8008f8c:	40da      	lsrs	r2, r3
 8008f8e:	07d3      	lsls	r3, r2, #31
 8008f90:	d52d      	bpl.n	8008fee <__sflush_r+0xc6>
 8008f92:	2300      	movs	r3, #0
 8008f94:	6063      	str	r3, [r4, #4]
 8008f96:	6923      	ldr	r3, [r4, #16]
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	04cb      	lsls	r3, r1, #19
 8008f9c:	d505      	bpl.n	8008faa <__sflush_r+0x82>
 8008f9e:	1c43      	adds	r3, r0, #1
 8008fa0:	d102      	bne.n	8008fa8 <__sflush_r+0x80>
 8008fa2:	682b      	ldr	r3, [r5, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d100      	bne.n	8008faa <__sflush_r+0x82>
 8008fa8:	6560      	str	r0, [r4, #84]	; 0x54
 8008faa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fac:	602e      	str	r6, [r5, #0]
 8008fae:	2900      	cmp	r1, #0
 8008fb0:	d0c6      	beq.n	8008f40 <__sflush_r+0x18>
 8008fb2:	0023      	movs	r3, r4
 8008fb4:	3344      	adds	r3, #68	; 0x44
 8008fb6:	4299      	cmp	r1, r3
 8008fb8:	d002      	beq.n	8008fc0 <__sflush_r+0x98>
 8008fba:	0028      	movs	r0, r5
 8008fbc:	f7ff fac8 	bl	8008550 <_free_r>
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	6360      	str	r0, [r4, #52]	; 0x34
 8008fc4:	e7bd      	b.n	8008f42 <__sflush_r+0x1a>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	0028      	movs	r0, r5
 8008fca:	6a21      	ldr	r1, [r4, #32]
 8008fcc:	47b8      	blx	r7
 8008fce:	1c43      	adds	r3, r0, #1
 8008fd0:	d1c5      	bne.n	8008f5e <__sflush_r+0x36>
 8008fd2:	682b      	ldr	r3, [r5, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d0c2      	beq.n	8008f5e <__sflush_r+0x36>
 8008fd8:	2b1d      	cmp	r3, #29
 8008fda:	d001      	beq.n	8008fe0 <__sflush_r+0xb8>
 8008fdc:	2b16      	cmp	r3, #22
 8008fde:	d101      	bne.n	8008fe4 <__sflush_r+0xbc>
 8008fe0:	602e      	str	r6, [r5, #0]
 8008fe2:	e7ad      	b.n	8008f40 <__sflush_r+0x18>
 8008fe4:	2340      	movs	r3, #64	; 0x40
 8008fe6:	89a2      	ldrh	r2, [r4, #12]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	e7a9      	b.n	8008f42 <__sflush_r+0x1a>
 8008fee:	2340      	movs	r3, #64	; 0x40
 8008ff0:	430b      	orrs	r3, r1
 8008ff2:	e7fa      	b.n	8008fea <__sflush_r+0xc2>
 8008ff4:	690f      	ldr	r7, [r1, #16]
 8008ff6:	2f00      	cmp	r7, #0
 8008ff8:	d0a2      	beq.n	8008f40 <__sflush_r+0x18>
 8008ffa:	680a      	ldr	r2, [r1, #0]
 8008ffc:	600f      	str	r7, [r1, #0]
 8008ffe:	1bd2      	subs	r2, r2, r7
 8009000:	9201      	str	r2, [sp, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	079b      	lsls	r3, r3, #30
 8009006:	d100      	bne.n	800900a <__sflush_r+0xe2>
 8009008:	694a      	ldr	r2, [r1, #20]
 800900a:	60a2      	str	r2, [r4, #8]
 800900c:	9b01      	ldr	r3, [sp, #4]
 800900e:	2b00      	cmp	r3, #0
 8009010:	dc00      	bgt.n	8009014 <__sflush_r+0xec>
 8009012:	e795      	b.n	8008f40 <__sflush_r+0x18>
 8009014:	003a      	movs	r2, r7
 8009016:	0028      	movs	r0, r5
 8009018:	9b01      	ldr	r3, [sp, #4]
 800901a:	6a21      	ldr	r1, [r4, #32]
 800901c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800901e:	47b0      	blx	r6
 8009020:	2800      	cmp	r0, #0
 8009022:	dc06      	bgt.n	8009032 <__sflush_r+0x10a>
 8009024:	2340      	movs	r3, #64	; 0x40
 8009026:	2001      	movs	r0, #1
 8009028:	89a2      	ldrh	r2, [r4, #12]
 800902a:	4240      	negs	r0, r0
 800902c:	4313      	orrs	r3, r2
 800902e:	81a3      	strh	r3, [r4, #12]
 8009030:	e787      	b.n	8008f42 <__sflush_r+0x1a>
 8009032:	9b01      	ldr	r3, [sp, #4]
 8009034:	183f      	adds	r7, r7, r0
 8009036:	1a1b      	subs	r3, r3, r0
 8009038:	9301      	str	r3, [sp, #4]
 800903a:	e7e7      	b.n	800900c <__sflush_r+0xe4>
 800903c:	20400001 	.word	0x20400001

08009040 <_fflush_r>:
 8009040:	690b      	ldr	r3, [r1, #16]
 8009042:	b570      	push	{r4, r5, r6, lr}
 8009044:	0005      	movs	r5, r0
 8009046:	000c      	movs	r4, r1
 8009048:	2b00      	cmp	r3, #0
 800904a:	d102      	bne.n	8009052 <_fflush_r+0x12>
 800904c:	2500      	movs	r5, #0
 800904e:	0028      	movs	r0, r5
 8009050:	bd70      	pop	{r4, r5, r6, pc}
 8009052:	2800      	cmp	r0, #0
 8009054:	d004      	beq.n	8009060 <_fflush_r+0x20>
 8009056:	6983      	ldr	r3, [r0, #24]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d101      	bne.n	8009060 <_fflush_r+0x20>
 800905c:	f000 f892 	bl	8009184 <__sinit>
 8009060:	4b14      	ldr	r3, [pc, #80]	; (80090b4 <_fflush_r+0x74>)
 8009062:	429c      	cmp	r4, r3
 8009064:	d11b      	bne.n	800909e <_fflush_r+0x5e>
 8009066:	686c      	ldr	r4, [r5, #4]
 8009068:	220c      	movs	r2, #12
 800906a:	5ea3      	ldrsh	r3, [r4, r2]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d0ed      	beq.n	800904c <_fflush_r+0xc>
 8009070:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009072:	07d2      	lsls	r2, r2, #31
 8009074:	d404      	bmi.n	8009080 <_fflush_r+0x40>
 8009076:	059b      	lsls	r3, r3, #22
 8009078:	d402      	bmi.n	8009080 <_fflush_r+0x40>
 800907a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800907c:	f000 f923 	bl	80092c6 <__retarget_lock_acquire_recursive>
 8009080:	0028      	movs	r0, r5
 8009082:	0021      	movs	r1, r4
 8009084:	f7ff ff50 	bl	8008f28 <__sflush_r>
 8009088:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800908a:	0005      	movs	r5, r0
 800908c:	07db      	lsls	r3, r3, #31
 800908e:	d4de      	bmi.n	800904e <_fflush_r+0xe>
 8009090:	89a3      	ldrh	r3, [r4, #12]
 8009092:	059b      	lsls	r3, r3, #22
 8009094:	d4db      	bmi.n	800904e <_fflush_r+0xe>
 8009096:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009098:	f000 f916 	bl	80092c8 <__retarget_lock_release_recursive>
 800909c:	e7d7      	b.n	800904e <_fflush_r+0xe>
 800909e:	4b06      	ldr	r3, [pc, #24]	; (80090b8 <_fflush_r+0x78>)
 80090a0:	429c      	cmp	r4, r3
 80090a2:	d101      	bne.n	80090a8 <_fflush_r+0x68>
 80090a4:	68ac      	ldr	r4, [r5, #8]
 80090a6:	e7df      	b.n	8009068 <_fflush_r+0x28>
 80090a8:	4b04      	ldr	r3, [pc, #16]	; (80090bc <_fflush_r+0x7c>)
 80090aa:	429c      	cmp	r4, r3
 80090ac:	d1dc      	bne.n	8009068 <_fflush_r+0x28>
 80090ae:	68ec      	ldr	r4, [r5, #12]
 80090b0:	e7da      	b.n	8009068 <_fflush_r+0x28>
 80090b2:	46c0      	nop			; (mov r8, r8)
 80090b4:	0800a0fc 	.word	0x0800a0fc
 80090b8:	0800a11c 	.word	0x0800a11c
 80090bc:	0800a0dc 	.word	0x0800a0dc

080090c0 <std>:
 80090c0:	2300      	movs	r3, #0
 80090c2:	b510      	push	{r4, lr}
 80090c4:	0004      	movs	r4, r0
 80090c6:	6003      	str	r3, [r0, #0]
 80090c8:	6043      	str	r3, [r0, #4]
 80090ca:	6083      	str	r3, [r0, #8]
 80090cc:	8181      	strh	r1, [r0, #12]
 80090ce:	6643      	str	r3, [r0, #100]	; 0x64
 80090d0:	0019      	movs	r1, r3
 80090d2:	81c2      	strh	r2, [r0, #14]
 80090d4:	6103      	str	r3, [r0, #16]
 80090d6:	6143      	str	r3, [r0, #20]
 80090d8:	6183      	str	r3, [r0, #24]
 80090da:	2208      	movs	r2, #8
 80090dc:	305c      	adds	r0, #92	; 0x5c
 80090de:	f7fd fb24 	bl	800672a <memset>
 80090e2:	4b05      	ldr	r3, [pc, #20]	; (80090f8 <std+0x38>)
 80090e4:	6263      	str	r3, [r4, #36]	; 0x24
 80090e6:	4b05      	ldr	r3, [pc, #20]	; (80090fc <std+0x3c>)
 80090e8:	6224      	str	r4, [r4, #32]
 80090ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80090ec:	4b04      	ldr	r3, [pc, #16]	; (8009100 <std+0x40>)
 80090ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090f0:	4b04      	ldr	r3, [pc, #16]	; (8009104 <std+0x44>)
 80090f2:	6323      	str	r3, [r4, #48]	; 0x30
 80090f4:	bd10      	pop	{r4, pc}
 80090f6:	46c0      	nop			; (mov r8, r8)
 80090f8:	08009449 	.word	0x08009449
 80090fc:	08009471 	.word	0x08009471
 8009100:	080094a9 	.word	0x080094a9
 8009104:	080094d5 	.word	0x080094d5

08009108 <_cleanup_r>:
 8009108:	b510      	push	{r4, lr}
 800910a:	4902      	ldr	r1, [pc, #8]	; (8009114 <_cleanup_r+0xc>)
 800910c:	f000 f8ba 	bl	8009284 <_fwalk_reent>
 8009110:	bd10      	pop	{r4, pc}
 8009112:	46c0      	nop			; (mov r8, r8)
 8009114:	08009041 	.word	0x08009041

08009118 <__sfmoreglue>:
 8009118:	b570      	push	{r4, r5, r6, lr}
 800911a:	2568      	movs	r5, #104	; 0x68
 800911c:	1e4a      	subs	r2, r1, #1
 800911e:	4355      	muls	r5, r2
 8009120:	000e      	movs	r6, r1
 8009122:	0029      	movs	r1, r5
 8009124:	3174      	adds	r1, #116	; 0x74
 8009126:	f7ff fa5d 	bl	80085e4 <_malloc_r>
 800912a:	1e04      	subs	r4, r0, #0
 800912c:	d008      	beq.n	8009140 <__sfmoreglue+0x28>
 800912e:	2100      	movs	r1, #0
 8009130:	002a      	movs	r2, r5
 8009132:	6001      	str	r1, [r0, #0]
 8009134:	6046      	str	r6, [r0, #4]
 8009136:	300c      	adds	r0, #12
 8009138:	60a0      	str	r0, [r4, #8]
 800913a:	3268      	adds	r2, #104	; 0x68
 800913c:	f7fd faf5 	bl	800672a <memset>
 8009140:	0020      	movs	r0, r4
 8009142:	bd70      	pop	{r4, r5, r6, pc}

08009144 <__sfp_lock_acquire>:
 8009144:	b510      	push	{r4, lr}
 8009146:	4802      	ldr	r0, [pc, #8]	; (8009150 <__sfp_lock_acquire+0xc>)
 8009148:	f000 f8bd 	bl	80092c6 <__retarget_lock_acquire_recursive>
 800914c:	bd10      	pop	{r4, pc}
 800914e:	46c0      	nop			; (mov r8, r8)
 8009150:	2000049c 	.word	0x2000049c

08009154 <__sfp_lock_release>:
 8009154:	b510      	push	{r4, lr}
 8009156:	4802      	ldr	r0, [pc, #8]	; (8009160 <__sfp_lock_release+0xc>)
 8009158:	f000 f8b6 	bl	80092c8 <__retarget_lock_release_recursive>
 800915c:	bd10      	pop	{r4, pc}
 800915e:	46c0      	nop			; (mov r8, r8)
 8009160:	2000049c 	.word	0x2000049c

08009164 <__sinit_lock_acquire>:
 8009164:	b510      	push	{r4, lr}
 8009166:	4802      	ldr	r0, [pc, #8]	; (8009170 <__sinit_lock_acquire+0xc>)
 8009168:	f000 f8ad 	bl	80092c6 <__retarget_lock_acquire_recursive>
 800916c:	bd10      	pop	{r4, pc}
 800916e:	46c0      	nop			; (mov r8, r8)
 8009170:	20000497 	.word	0x20000497

08009174 <__sinit_lock_release>:
 8009174:	b510      	push	{r4, lr}
 8009176:	4802      	ldr	r0, [pc, #8]	; (8009180 <__sinit_lock_release+0xc>)
 8009178:	f000 f8a6 	bl	80092c8 <__retarget_lock_release_recursive>
 800917c:	bd10      	pop	{r4, pc}
 800917e:	46c0      	nop			; (mov r8, r8)
 8009180:	20000497 	.word	0x20000497

08009184 <__sinit>:
 8009184:	b513      	push	{r0, r1, r4, lr}
 8009186:	0004      	movs	r4, r0
 8009188:	f7ff ffec 	bl	8009164 <__sinit_lock_acquire>
 800918c:	69a3      	ldr	r3, [r4, #24]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d002      	beq.n	8009198 <__sinit+0x14>
 8009192:	f7ff ffef 	bl	8009174 <__sinit_lock_release>
 8009196:	bd13      	pop	{r0, r1, r4, pc}
 8009198:	64a3      	str	r3, [r4, #72]	; 0x48
 800919a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800919c:	6523      	str	r3, [r4, #80]	; 0x50
 800919e:	4b13      	ldr	r3, [pc, #76]	; (80091ec <__sinit+0x68>)
 80091a0:	4a13      	ldr	r2, [pc, #76]	; (80091f0 <__sinit+0x6c>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80091a6:	9301      	str	r3, [sp, #4]
 80091a8:	42a3      	cmp	r3, r4
 80091aa:	d101      	bne.n	80091b0 <__sinit+0x2c>
 80091ac:	2301      	movs	r3, #1
 80091ae:	61a3      	str	r3, [r4, #24]
 80091b0:	0020      	movs	r0, r4
 80091b2:	f000 f81f 	bl	80091f4 <__sfp>
 80091b6:	6060      	str	r0, [r4, #4]
 80091b8:	0020      	movs	r0, r4
 80091ba:	f000 f81b 	bl	80091f4 <__sfp>
 80091be:	60a0      	str	r0, [r4, #8]
 80091c0:	0020      	movs	r0, r4
 80091c2:	f000 f817 	bl	80091f4 <__sfp>
 80091c6:	2200      	movs	r2, #0
 80091c8:	2104      	movs	r1, #4
 80091ca:	60e0      	str	r0, [r4, #12]
 80091cc:	6860      	ldr	r0, [r4, #4]
 80091ce:	f7ff ff77 	bl	80090c0 <std>
 80091d2:	2201      	movs	r2, #1
 80091d4:	2109      	movs	r1, #9
 80091d6:	68a0      	ldr	r0, [r4, #8]
 80091d8:	f7ff ff72 	bl	80090c0 <std>
 80091dc:	2202      	movs	r2, #2
 80091de:	2112      	movs	r1, #18
 80091e0:	68e0      	ldr	r0, [r4, #12]
 80091e2:	f7ff ff6d 	bl	80090c0 <std>
 80091e6:	2301      	movs	r3, #1
 80091e8:	61a3      	str	r3, [r4, #24]
 80091ea:	e7d2      	b.n	8009192 <__sinit+0xe>
 80091ec:	08009d58 	.word	0x08009d58
 80091f0:	08009109 	.word	0x08009109

080091f4 <__sfp>:
 80091f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f6:	0007      	movs	r7, r0
 80091f8:	f7ff ffa4 	bl	8009144 <__sfp_lock_acquire>
 80091fc:	4b1f      	ldr	r3, [pc, #124]	; (800927c <__sfp+0x88>)
 80091fe:	681e      	ldr	r6, [r3, #0]
 8009200:	69b3      	ldr	r3, [r6, #24]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d102      	bne.n	800920c <__sfp+0x18>
 8009206:	0030      	movs	r0, r6
 8009208:	f7ff ffbc 	bl	8009184 <__sinit>
 800920c:	3648      	adds	r6, #72	; 0x48
 800920e:	68b4      	ldr	r4, [r6, #8]
 8009210:	6873      	ldr	r3, [r6, #4]
 8009212:	3b01      	subs	r3, #1
 8009214:	d504      	bpl.n	8009220 <__sfp+0x2c>
 8009216:	6833      	ldr	r3, [r6, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d022      	beq.n	8009262 <__sfp+0x6e>
 800921c:	6836      	ldr	r6, [r6, #0]
 800921e:	e7f6      	b.n	800920e <__sfp+0x1a>
 8009220:	220c      	movs	r2, #12
 8009222:	5ea5      	ldrsh	r5, [r4, r2]
 8009224:	2d00      	cmp	r5, #0
 8009226:	d11a      	bne.n	800925e <__sfp+0x6a>
 8009228:	0020      	movs	r0, r4
 800922a:	4b15      	ldr	r3, [pc, #84]	; (8009280 <__sfp+0x8c>)
 800922c:	3058      	adds	r0, #88	; 0x58
 800922e:	60e3      	str	r3, [r4, #12]
 8009230:	6665      	str	r5, [r4, #100]	; 0x64
 8009232:	f000 f847 	bl	80092c4 <__retarget_lock_init_recursive>
 8009236:	f7ff ff8d 	bl	8009154 <__sfp_lock_release>
 800923a:	0020      	movs	r0, r4
 800923c:	2208      	movs	r2, #8
 800923e:	0029      	movs	r1, r5
 8009240:	6025      	str	r5, [r4, #0]
 8009242:	60a5      	str	r5, [r4, #8]
 8009244:	6065      	str	r5, [r4, #4]
 8009246:	6125      	str	r5, [r4, #16]
 8009248:	6165      	str	r5, [r4, #20]
 800924a:	61a5      	str	r5, [r4, #24]
 800924c:	305c      	adds	r0, #92	; 0x5c
 800924e:	f7fd fa6c 	bl	800672a <memset>
 8009252:	6365      	str	r5, [r4, #52]	; 0x34
 8009254:	63a5      	str	r5, [r4, #56]	; 0x38
 8009256:	64a5      	str	r5, [r4, #72]	; 0x48
 8009258:	64e5      	str	r5, [r4, #76]	; 0x4c
 800925a:	0020      	movs	r0, r4
 800925c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800925e:	3468      	adds	r4, #104	; 0x68
 8009260:	e7d7      	b.n	8009212 <__sfp+0x1e>
 8009262:	2104      	movs	r1, #4
 8009264:	0038      	movs	r0, r7
 8009266:	f7ff ff57 	bl	8009118 <__sfmoreglue>
 800926a:	1e04      	subs	r4, r0, #0
 800926c:	6030      	str	r0, [r6, #0]
 800926e:	d1d5      	bne.n	800921c <__sfp+0x28>
 8009270:	f7ff ff70 	bl	8009154 <__sfp_lock_release>
 8009274:	230c      	movs	r3, #12
 8009276:	603b      	str	r3, [r7, #0]
 8009278:	e7ef      	b.n	800925a <__sfp+0x66>
 800927a:	46c0      	nop			; (mov r8, r8)
 800927c:	08009d58 	.word	0x08009d58
 8009280:	ffff0001 	.word	0xffff0001

08009284 <_fwalk_reent>:
 8009284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009286:	0004      	movs	r4, r0
 8009288:	0006      	movs	r6, r0
 800928a:	2700      	movs	r7, #0
 800928c:	9101      	str	r1, [sp, #4]
 800928e:	3448      	adds	r4, #72	; 0x48
 8009290:	6863      	ldr	r3, [r4, #4]
 8009292:	68a5      	ldr	r5, [r4, #8]
 8009294:	9300      	str	r3, [sp, #0]
 8009296:	9b00      	ldr	r3, [sp, #0]
 8009298:	3b01      	subs	r3, #1
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	d504      	bpl.n	80092a8 <_fwalk_reent+0x24>
 800929e:	6824      	ldr	r4, [r4, #0]
 80092a0:	2c00      	cmp	r4, #0
 80092a2:	d1f5      	bne.n	8009290 <_fwalk_reent+0xc>
 80092a4:	0038      	movs	r0, r7
 80092a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80092a8:	89ab      	ldrh	r3, [r5, #12]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d908      	bls.n	80092c0 <_fwalk_reent+0x3c>
 80092ae:	220e      	movs	r2, #14
 80092b0:	5eab      	ldrsh	r3, [r5, r2]
 80092b2:	3301      	adds	r3, #1
 80092b4:	d004      	beq.n	80092c0 <_fwalk_reent+0x3c>
 80092b6:	0029      	movs	r1, r5
 80092b8:	0030      	movs	r0, r6
 80092ba:	9b01      	ldr	r3, [sp, #4]
 80092bc:	4798      	blx	r3
 80092be:	4307      	orrs	r7, r0
 80092c0:	3568      	adds	r5, #104	; 0x68
 80092c2:	e7e8      	b.n	8009296 <_fwalk_reent+0x12>

080092c4 <__retarget_lock_init_recursive>:
 80092c4:	4770      	bx	lr

080092c6 <__retarget_lock_acquire_recursive>:
 80092c6:	4770      	bx	lr

080092c8 <__retarget_lock_release_recursive>:
 80092c8:	4770      	bx	lr
	...

080092cc <__swhatbuf_r>:
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	000e      	movs	r6, r1
 80092d0:	001d      	movs	r5, r3
 80092d2:	230e      	movs	r3, #14
 80092d4:	5ec9      	ldrsh	r1, [r1, r3]
 80092d6:	0014      	movs	r4, r2
 80092d8:	b096      	sub	sp, #88	; 0x58
 80092da:	2900      	cmp	r1, #0
 80092dc:	da07      	bge.n	80092ee <__swhatbuf_r+0x22>
 80092de:	2300      	movs	r3, #0
 80092e0:	602b      	str	r3, [r5, #0]
 80092e2:	89b3      	ldrh	r3, [r6, #12]
 80092e4:	061b      	lsls	r3, r3, #24
 80092e6:	d411      	bmi.n	800930c <__swhatbuf_r+0x40>
 80092e8:	2380      	movs	r3, #128	; 0x80
 80092ea:	00db      	lsls	r3, r3, #3
 80092ec:	e00f      	b.n	800930e <__swhatbuf_r+0x42>
 80092ee:	466a      	mov	r2, sp
 80092f0:	f000 f91c 	bl	800952c <_fstat_r>
 80092f4:	2800      	cmp	r0, #0
 80092f6:	dbf2      	blt.n	80092de <__swhatbuf_r+0x12>
 80092f8:	23f0      	movs	r3, #240	; 0xf0
 80092fa:	9901      	ldr	r1, [sp, #4]
 80092fc:	021b      	lsls	r3, r3, #8
 80092fe:	4019      	ands	r1, r3
 8009300:	4b05      	ldr	r3, [pc, #20]	; (8009318 <__swhatbuf_r+0x4c>)
 8009302:	18c9      	adds	r1, r1, r3
 8009304:	424b      	negs	r3, r1
 8009306:	4159      	adcs	r1, r3
 8009308:	6029      	str	r1, [r5, #0]
 800930a:	e7ed      	b.n	80092e8 <__swhatbuf_r+0x1c>
 800930c:	2340      	movs	r3, #64	; 0x40
 800930e:	2000      	movs	r0, #0
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	b016      	add	sp, #88	; 0x58
 8009314:	bd70      	pop	{r4, r5, r6, pc}
 8009316:	46c0      	nop			; (mov r8, r8)
 8009318:	ffffe000 	.word	0xffffe000

0800931c <__smakebuf_r>:
 800931c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800931e:	2602      	movs	r6, #2
 8009320:	898b      	ldrh	r3, [r1, #12]
 8009322:	0005      	movs	r5, r0
 8009324:	000c      	movs	r4, r1
 8009326:	4233      	tst	r3, r6
 8009328:	d006      	beq.n	8009338 <__smakebuf_r+0x1c>
 800932a:	0023      	movs	r3, r4
 800932c:	3347      	adds	r3, #71	; 0x47
 800932e:	6023      	str	r3, [r4, #0]
 8009330:	6123      	str	r3, [r4, #16]
 8009332:	2301      	movs	r3, #1
 8009334:	6163      	str	r3, [r4, #20]
 8009336:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009338:	466a      	mov	r2, sp
 800933a:	ab01      	add	r3, sp, #4
 800933c:	f7ff ffc6 	bl	80092cc <__swhatbuf_r>
 8009340:	9900      	ldr	r1, [sp, #0]
 8009342:	0007      	movs	r7, r0
 8009344:	0028      	movs	r0, r5
 8009346:	f7ff f94d 	bl	80085e4 <_malloc_r>
 800934a:	2800      	cmp	r0, #0
 800934c:	d108      	bne.n	8009360 <__smakebuf_r+0x44>
 800934e:	220c      	movs	r2, #12
 8009350:	5ea3      	ldrsh	r3, [r4, r2]
 8009352:	059a      	lsls	r2, r3, #22
 8009354:	d4ef      	bmi.n	8009336 <__smakebuf_r+0x1a>
 8009356:	2203      	movs	r2, #3
 8009358:	4393      	bics	r3, r2
 800935a:	431e      	orrs	r6, r3
 800935c:	81a6      	strh	r6, [r4, #12]
 800935e:	e7e4      	b.n	800932a <__smakebuf_r+0xe>
 8009360:	4b0f      	ldr	r3, [pc, #60]	; (80093a0 <__smakebuf_r+0x84>)
 8009362:	62ab      	str	r3, [r5, #40]	; 0x28
 8009364:	2380      	movs	r3, #128	; 0x80
 8009366:	89a2      	ldrh	r2, [r4, #12]
 8009368:	6020      	str	r0, [r4, #0]
 800936a:	4313      	orrs	r3, r2
 800936c:	81a3      	strh	r3, [r4, #12]
 800936e:	9b00      	ldr	r3, [sp, #0]
 8009370:	6120      	str	r0, [r4, #16]
 8009372:	6163      	str	r3, [r4, #20]
 8009374:	9b01      	ldr	r3, [sp, #4]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00d      	beq.n	8009396 <__smakebuf_r+0x7a>
 800937a:	0028      	movs	r0, r5
 800937c:	230e      	movs	r3, #14
 800937e:	5ee1      	ldrsh	r1, [r4, r3]
 8009380:	f000 f8e6 	bl	8009550 <_isatty_r>
 8009384:	2800      	cmp	r0, #0
 8009386:	d006      	beq.n	8009396 <__smakebuf_r+0x7a>
 8009388:	2203      	movs	r2, #3
 800938a:	89a3      	ldrh	r3, [r4, #12]
 800938c:	4393      	bics	r3, r2
 800938e:	001a      	movs	r2, r3
 8009390:	2301      	movs	r3, #1
 8009392:	4313      	orrs	r3, r2
 8009394:	81a3      	strh	r3, [r4, #12]
 8009396:	89a0      	ldrh	r0, [r4, #12]
 8009398:	4307      	orrs	r7, r0
 800939a:	81a7      	strh	r7, [r4, #12]
 800939c:	e7cb      	b.n	8009336 <__smakebuf_r+0x1a>
 800939e:	46c0      	nop			; (mov r8, r8)
 80093a0:	08009109 	.word	0x08009109

080093a4 <_malloc_usable_size_r>:
 80093a4:	1f0b      	subs	r3, r1, #4
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	1f18      	subs	r0, r3, #4
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	da01      	bge.n	80093b2 <_malloc_usable_size_r+0xe>
 80093ae:	580b      	ldr	r3, [r1, r0]
 80093b0:	18c0      	adds	r0, r0, r3
 80093b2:	4770      	bx	lr

080093b4 <_raise_r>:
 80093b4:	b570      	push	{r4, r5, r6, lr}
 80093b6:	0004      	movs	r4, r0
 80093b8:	000d      	movs	r5, r1
 80093ba:	291f      	cmp	r1, #31
 80093bc:	d904      	bls.n	80093c8 <_raise_r+0x14>
 80093be:	2316      	movs	r3, #22
 80093c0:	6003      	str	r3, [r0, #0]
 80093c2:	2001      	movs	r0, #1
 80093c4:	4240      	negs	r0, r0
 80093c6:	bd70      	pop	{r4, r5, r6, pc}
 80093c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d004      	beq.n	80093d8 <_raise_r+0x24>
 80093ce:	008a      	lsls	r2, r1, #2
 80093d0:	189b      	adds	r3, r3, r2
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	2a00      	cmp	r2, #0
 80093d6:	d108      	bne.n	80093ea <_raise_r+0x36>
 80093d8:	0020      	movs	r0, r4
 80093da:	f000 f831 	bl	8009440 <_getpid_r>
 80093de:	002a      	movs	r2, r5
 80093e0:	0001      	movs	r1, r0
 80093e2:	0020      	movs	r0, r4
 80093e4:	f000 f81a 	bl	800941c <_kill_r>
 80093e8:	e7ed      	b.n	80093c6 <_raise_r+0x12>
 80093ea:	2000      	movs	r0, #0
 80093ec:	2a01      	cmp	r2, #1
 80093ee:	d0ea      	beq.n	80093c6 <_raise_r+0x12>
 80093f0:	1c51      	adds	r1, r2, #1
 80093f2:	d103      	bne.n	80093fc <_raise_r+0x48>
 80093f4:	2316      	movs	r3, #22
 80093f6:	3001      	adds	r0, #1
 80093f8:	6023      	str	r3, [r4, #0]
 80093fa:	e7e4      	b.n	80093c6 <_raise_r+0x12>
 80093fc:	2400      	movs	r4, #0
 80093fe:	0028      	movs	r0, r5
 8009400:	601c      	str	r4, [r3, #0]
 8009402:	4790      	blx	r2
 8009404:	0020      	movs	r0, r4
 8009406:	e7de      	b.n	80093c6 <_raise_r+0x12>

08009408 <raise>:
 8009408:	b510      	push	{r4, lr}
 800940a:	4b03      	ldr	r3, [pc, #12]	; (8009418 <raise+0x10>)
 800940c:	0001      	movs	r1, r0
 800940e:	6818      	ldr	r0, [r3, #0]
 8009410:	f7ff ffd0 	bl	80093b4 <_raise_r>
 8009414:	bd10      	pop	{r4, pc}
 8009416:	46c0      	nop			; (mov r8, r8)
 8009418:	20000014 	.word	0x20000014

0800941c <_kill_r>:
 800941c:	2300      	movs	r3, #0
 800941e:	b570      	push	{r4, r5, r6, lr}
 8009420:	4d06      	ldr	r5, [pc, #24]	; (800943c <_kill_r+0x20>)
 8009422:	0004      	movs	r4, r0
 8009424:	0008      	movs	r0, r1
 8009426:	0011      	movs	r1, r2
 8009428:	602b      	str	r3, [r5, #0]
 800942a:	f7f9 fe4d 	bl	80030c8 <_kill>
 800942e:	1c43      	adds	r3, r0, #1
 8009430:	d103      	bne.n	800943a <_kill_r+0x1e>
 8009432:	682b      	ldr	r3, [r5, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d000      	beq.n	800943a <_kill_r+0x1e>
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	bd70      	pop	{r4, r5, r6, pc}
 800943c:	20000490 	.word	0x20000490

08009440 <_getpid_r>:
 8009440:	b510      	push	{r4, lr}
 8009442:	f7f9 fe3b 	bl	80030bc <_getpid>
 8009446:	bd10      	pop	{r4, pc}

08009448 <__sread>:
 8009448:	b570      	push	{r4, r5, r6, lr}
 800944a:	000c      	movs	r4, r1
 800944c:	250e      	movs	r5, #14
 800944e:	5f49      	ldrsh	r1, [r1, r5]
 8009450:	f000 f8a4 	bl	800959c <_read_r>
 8009454:	2800      	cmp	r0, #0
 8009456:	db03      	blt.n	8009460 <__sread+0x18>
 8009458:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800945a:	181b      	adds	r3, r3, r0
 800945c:	6563      	str	r3, [r4, #84]	; 0x54
 800945e:	bd70      	pop	{r4, r5, r6, pc}
 8009460:	89a3      	ldrh	r3, [r4, #12]
 8009462:	4a02      	ldr	r2, [pc, #8]	; (800946c <__sread+0x24>)
 8009464:	4013      	ands	r3, r2
 8009466:	81a3      	strh	r3, [r4, #12]
 8009468:	e7f9      	b.n	800945e <__sread+0x16>
 800946a:	46c0      	nop			; (mov r8, r8)
 800946c:	ffffefff 	.word	0xffffefff

08009470 <__swrite>:
 8009470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009472:	001f      	movs	r7, r3
 8009474:	898b      	ldrh	r3, [r1, #12]
 8009476:	0005      	movs	r5, r0
 8009478:	000c      	movs	r4, r1
 800947a:	0016      	movs	r6, r2
 800947c:	05db      	lsls	r3, r3, #23
 800947e:	d505      	bpl.n	800948c <__swrite+0x1c>
 8009480:	230e      	movs	r3, #14
 8009482:	5ec9      	ldrsh	r1, [r1, r3]
 8009484:	2200      	movs	r2, #0
 8009486:	2302      	movs	r3, #2
 8009488:	f000 f874 	bl	8009574 <_lseek_r>
 800948c:	89a3      	ldrh	r3, [r4, #12]
 800948e:	4a05      	ldr	r2, [pc, #20]	; (80094a4 <__swrite+0x34>)
 8009490:	0028      	movs	r0, r5
 8009492:	4013      	ands	r3, r2
 8009494:	81a3      	strh	r3, [r4, #12]
 8009496:	0032      	movs	r2, r6
 8009498:	230e      	movs	r3, #14
 800949a:	5ee1      	ldrsh	r1, [r4, r3]
 800949c:	003b      	movs	r3, r7
 800949e:	f000 f81f 	bl	80094e0 <_write_r>
 80094a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094a4:	ffffefff 	.word	0xffffefff

080094a8 <__sseek>:
 80094a8:	b570      	push	{r4, r5, r6, lr}
 80094aa:	000c      	movs	r4, r1
 80094ac:	250e      	movs	r5, #14
 80094ae:	5f49      	ldrsh	r1, [r1, r5]
 80094b0:	f000 f860 	bl	8009574 <_lseek_r>
 80094b4:	89a3      	ldrh	r3, [r4, #12]
 80094b6:	1c42      	adds	r2, r0, #1
 80094b8:	d103      	bne.n	80094c2 <__sseek+0x1a>
 80094ba:	4a05      	ldr	r2, [pc, #20]	; (80094d0 <__sseek+0x28>)
 80094bc:	4013      	ands	r3, r2
 80094be:	81a3      	strh	r3, [r4, #12]
 80094c0:	bd70      	pop	{r4, r5, r6, pc}
 80094c2:	2280      	movs	r2, #128	; 0x80
 80094c4:	0152      	lsls	r2, r2, #5
 80094c6:	4313      	orrs	r3, r2
 80094c8:	81a3      	strh	r3, [r4, #12]
 80094ca:	6560      	str	r0, [r4, #84]	; 0x54
 80094cc:	e7f8      	b.n	80094c0 <__sseek+0x18>
 80094ce:	46c0      	nop			; (mov r8, r8)
 80094d0:	ffffefff 	.word	0xffffefff

080094d4 <__sclose>:
 80094d4:	b510      	push	{r4, lr}
 80094d6:	230e      	movs	r3, #14
 80094d8:	5ec9      	ldrsh	r1, [r1, r3]
 80094da:	f000 f815 	bl	8009508 <_close_r>
 80094de:	bd10      	pop	{r4, pc}

080094e0 <_write_r>:
 80094e0:	b570      	push	{r4, r5, r6, lr}
 80094e2:	0004      	movs	r4, r0
 80094e4:	0008      	movs	r0, r1
 80094e6:	0011      	movs	r1, r2
 80094e8:	001a      	movs	r2, r3
 80094ea:	2300      	movs	r3, #0
 80094ec:	4d05      	ldr	r5, [pc, #20]	; (8009504 <_write_r+0x24>)
 80094ee:	602b      	str	r3, [r5, #0]
 80094f0:	f7f9 fe23 	bl	800313a <_write>
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	d103      	bne.n	8009500 <_write_r+0x20>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d000      	beq.n	8009500 <_write_r+0x20>
 80094fe:	6023      	str	r3, [r4, #0]
 8009500:	bd70      	pop	{r4, r5, r6, pc}
 8009502:	46c0      	nop			; (mov r8, r8)
 8009504:	20000490 	.word	0x20000490

08009508 <_close_r>:
 8009508:	2300      	movs	r3, #0
 800950a:	b570      	push	{r4, r5, r6, lr}
 800950c:	4d06      	ldr	r5, [pc, #24]	; (8009528 <_close_r+0x20>)
 800950e:	0004      	movs	r4, r0
 8009510:	0008      	movs	r0, r1
 8009512:	602b      	str	r3, [r5, #0]
 8009514:	f7f9 fe2d 	bl	8003172 <_close>
 8009518:	1c43      	adds	r3, r0, #1
 800951a:	d103      	bne.n	8009524 <_close_r+0x1c>
 800951c:	682b      	ldr	r3, [r5, #0]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d000      	beq.n	8009524 <_close_r+0x1c>
 8009522:	6023      	str	r3, [r4, #0]
 8009524:	bd70      	pop	{r4, r5, r6, pc}
 8009526:	46c0      	nop			; (mov r8, r8)
 8009528:	20000490 	.word	0x20000490

0800952c <_fstat_r>:
 800952c:	2300      	movs	r3, #0
 800952e:	b570      	push	{r4, r5, r6, lr}
 8009530:	4d06      	ldr	r5, [pc, #24]	; (800954c <_fstat_r+0x20>)
 8009532:	0004      	movs	r4, r0
 8009534:	0008      	movs	r0, r1
 8009536:	0011      	movs	r1, r2
 8009538:	602b      	str	r3, [r5, #0]
 800953a:	f7f9 fe24 	bl	8003186 <_fstat>
 800953e:	1c43      	adds	r3, r0, #1
 8009540:	d103      	bne.n	800954a <_fstat_r+0x1e>
 8009542:	682b      	ldr	r3, [r5, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d000      	beq.n	800954a <_fstat_r+0x1e>
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	bd70      	pop	{r4, r5, r6, pc}
 800954c:	20000490 	.word	0x20000490

08009550 <_isatty_r>:
 8009550:	2300      	movs	r3, #0
 8009552:	b570      	push	{r4, r5, r6, lr}
 8009554:	4d06      	ldr	r5, [pc, #24]	; (8009570 <_isatty_r+0x20>)
 8009556:	0004      	movs	r4, r0
 8009558:	0008      	movs	r0, r1
 800955a:	602b      	str	r3, [r5, #0]
 800955c:	f7f9 fe21 	bl	80031a2 <_isatty>
 8009560:	1c43      	adds	r3, r0, #1
 8009562:	d103      	bne.n	800956c <_isatty_r+0x1c>
 8009564:	682b      	ldr	r3, [r5, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d000      	beq.n	800956c <_isatty_r+0x1c>
 800956a:	6023      	str	r3, [r4, #0]
 800956c:	bd70      	pop	{r4, r5, r6, pc}
 800956e:	46c0      	nop			; (mov r8, r8)
 8009570:	20000490 	.word	0x20000490

08009574 <_lseek_r>:
 8009574:	b570      	push	{r4, r5, r6, lr}
 8009576:	0004      	movs	r4, r0
 8009578:	0008      	movs	r0, r1
 800957a:	0011      	movs	r1, r2
 800957c:	001a      	movs	r2, r3
 800957e:	2300      	movs	r3, #0
 8009580:	4d05      	ldr	r5, [pc, #20]	; (8009598 <_lseek_r+0x24>)
 8009582:	602b      	str	r3, [r5, #0]
 8009584:	f7f9 fe16 	bl	80031b4 <_lseek>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d103      	bne.n	8009594 <_lseek_r+0x20>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d000      	beq.n	8009594 <_lseek_r+0x20>
 8009592:	6023      	str	r3, [r4, #0]
 8009594:	bd70      	pop	{r4, r5, r6, pc}
 8009596:	46c0      	nop			; (mov r8, r8)
 8009598:	20000490 	.word	0x20000490

0800959c <_read_r>:
 800959c:	b570      	push	{r4, r5, r6, lr}
 800959e:	0004      	movs	r4, r0
 80095a0:	0008      	movs	r0, r1
 80095a2:	0011      	movs	r1, r2
 80095a4:	001a      	movs	r2, r3
 80095a6:	2300      	movs	r3, #0
 80095a8:	4d05      	ldr	r5, [pc, #20]	; (80095c0 <_read_r+0x24>)
 80095aa:	602b      	str	r3, [r5, #0]
 80095ac:	f7f9 fda8 	bl	8003100 <_read>
 80095b0:	1c43      	adds	r3, r0, #1
 80095b2:	d103      	bne.n	80095bc <_read_r+0x20>
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d000      	beq.n	80095bc <_read_r+0x20>
 80095ba:	6023      	str	r3, [r4, #0]
 80095bc:	bd70      	pop	{r4, r5, r6, pc}
 80095be:	46c0      	nop			; (mov r8, r8)
 80095c0:	20000490 	.word	0x20000490

080095c4 <_init>:
 80095c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c6:	46c0      	nop			; (mov r8, r8)
 80095c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ca:	bc08      	pop	{r3}
 80095cc:	469e      	mov	lr, r3
 80095ce:	4770      	bx	lr

080095d0 <_fini>:
 80095d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095d2:	46c0      	nop			; (mov r8, r8)
 80095d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095d6:	bc08      	pop	{r3}
 80095d8:	469e      	mov	lr, r3
 80095da:	4770      	bx	lr
